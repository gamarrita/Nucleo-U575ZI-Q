
100_LPTIM_Capture_StopMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd1c  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000546  0800bf58  0800bf58  0000cf58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c4a0  0800c4a0  0000d4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c4a8  0800c4a8  0000d4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c4ac  0800c4ac  0000d4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d4  20000000  0800c4b0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000290  200001d4  0800c684  0000e1d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000464  0800c684  0000e464  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018d18  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035ee  00000000  00000000  00026f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001440  00000000  00000000  0002a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f65  00000000  00000000  0002b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034c84  00000000  00000000  0002c8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000198c8  00000000  00000000  00061539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140e33  00000000  00000000  0007ae01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bbc34  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006940  00000000  00000000  001bbc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000091  00000000  00000000  001c25b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001d4 	.word	0x200001d4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bf3c 	.word	0x0800bf3c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001d8 	.word	0x200001d8
 8000274:	0800bf3c 	.word	0x0800bf3c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b4 	b.w	8001010 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	460c      	mov	r4, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14d      	bne.n	8000dd4 <__udivmoddi4+0xa8>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	4696      	mov	lr, r2
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	d960      	bls.n	8000e08 <__udivmoddi4+0xdc>
 8000d46:	b14b      	cbz	r3, 8000d5c <__udivmoddi4+0x30>
 8000d48:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d4c:	f1c3 0220 	rsb	r2, r3, #32
 8000d50:	409f      	lsls	r7, r3
 8000d52:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d56:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5a:	4317      	orrs	r7, r2
 8000d5c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d60:	fa1f f48e 	uxth.w	r4, lr
 8000d64:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d68:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d6c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d70:	fb01 f004 	mul.w	r0, r1, r4
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x62>
 8000d7c:	eb1e 0202 	adds.w	r2, lr, r2
 8000d80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x60>
 8000d86:	4290      	cmp	r0, r2
 8000d88:	f200 812d 	bhi.w	8000fe6 <__udivmoddi4+0x2ba>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	1a12      	subs	r2, r2, r0
 8000d90:	fa1f fc8c 	uxth.w	ip, ip
 8000d94:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d98:	fb06 2210 	mls	r2, r6, r0, r2
 8000d9c:	fb00 f404 	mul.w	r4, r0, r4
 8000da0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000da4:	4564      	cmp	r4, ip
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	4564      	cmp	r4, ip
 8000db4:	f200 811a 	bhi.w	8000fec <__udivmoddi4+0x2c0>
 8000db8:	4610      	mov	r0, r2
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	ebac 0c04 	sub.w	ip, ip, r4
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b125      	cbz	r5, 8000dd0 <__udivmoddi4+0xa4>
 8000dc6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d905      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd8:	b10d      	cbz	r5, 8000dde <__udivmoddi4+0xb2>
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	2100      	movs	r1, #0
 8000de0:	4608      	mov	r0, r1
 8000de2:	e7f5      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d14d      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4290      	cmp	r0, r2
 8000df4:	f080 80ef 	bcs.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0e6      	beq.n	8000dd0 <__udivmoddi4+0xa4>
 8000e02:	e9c5 6300 	strd	r6, r3, [r5]
 8000e06:	e7e3      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 80a2 	bne.w	8000f52 <__udivmoddi4+0x226>
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa1f f68e 	uxth.w	r6, lr
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2a:	fb06 f004 	mul.w	r0, r6, r4
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1e 0202 	adds.w	r2, lr, r2
 8000e36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4290      	cmp	r0, r2
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80c8 	beq.w	8000fe0 <__udivmoddi4+0x2b4>
 8000e50:	4644      	mov	r4, r8
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	fa1f fc8c 	uxth.w	ip, ip
 8000e58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e60:	fb00 f606 	mul.w	r6, r0, r6
 8000e64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e68:	4566      	cmp	r6, ip
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x150>
 8000e76:	4566      	cmp	r6, ip
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2c6>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000e82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e92:	fa22 f706 	lsr.w	r7, r2, r6
 8000e96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e9a:	40f4      	lsrs	r4, r6
 8000e9c:	408a      	lsls	r2, r1
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ea4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ea8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eb8:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ec4:	45a1      	cmp	r9, r4
 8000ec6:	d90e      	bls.n	8000ee6 <__udivmoddi4+0x1ba>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ece:	bf2c      	ite	cs
 8000ed0:	f04f 0b01 	movcs.w	fp, #1
 8000ed4:	f04f 0b00 	movcc.w	fp, #0
 8000ed8:	45a1      	cmp	r9, r4
 8000eda:	d903      	bls.n	8000ee4 <__udivmoddi4+0x1b8>
 8000edc:	f1bb 0f00 	cmp.w	fp, #0
 8000ee0:	f000 8093 	beq.w	800100a <__udivmoddi4+0x2de>
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	eba4 0409 	sub.w	r4, r4, r9
 8000eea:	fa1f f983 	uxth.w	r9, r3
 8000eee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ef2:	fb08 4413 	mls	r4, r8, r3, r4
 8000ef6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d906      	bls.n	8000f10 <__udivmoddi4+0x1e4>
 8000f02:	193c      	adds	r4, r7, r4
 8000f04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x1e2>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d87a      	bhi.n	8001004 <__udivmoddi4+0x2d8>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f14:	eba4 040c 	sub.w	r4, r4, ip
 8000f18:	fba0 9802 	umull	r9, r8, r0, r2
 8000f1c:	4544      	cmp	r4, r8
 8000f1e:	46cc      	mov	ip, r9
 8000f20:	4643      	mov	r3, r8
 8000f22:	d302      	bcc.n	8000f2a <__udivmoddi4+0x1fe>
 8000f24:	d106      	bne.n	8000f34 <__udivmoddi4+0x208>
 8000f26:	45ce      	cmp	lr, r9
 8000f28:	d204      	bcs.n	8000f34 <__udivmoddi4+0x208>
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f30:	eb68 0307 	sbc.w	r3, r8, r7
 8000f34:	b15d      	cbz	r5, 8000f4e <__udivmoddi4+0x222>
 8000f36:	ebbe 020c 	subs.w	r2, lr, ip
 8000f3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f42:	fa22 f301 	lsr.w	r3, r2, r1
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	431e      	orrs	r6, r3
 8000f4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e73e      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000f52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f56:	f1c3 0120 	rsb	r1, r3, #32
 8000f5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f62:	40cc      	lsrs	r4, r1
 8000f64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f68:	fa20 f101 	lsr.w	r1, r0, r1
 8000f6c:	fa1f f68e 	uxth.w	r6, lr
 8000f70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f74:	430a      	orrs	r2, r1
 8000f76:	fb07 4410 	mls	r4, r7, r0, r4
 8000f7a:	0c11      	lsrs	r1, r2, #16
 8000f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f80:	fb00 f406 	mul.w	r4, r0, r6
 8000f84:	428c      	cmp	r4, r1
 8000f86:	d90e      	bls.n	8000fa6 <__udivmoddi4+0x27a>
 8000f88:	eb1e 0101 	adds.w	r1, lr, r1
 8000f8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f90:	bf2c      	ite	cs
 8000f92:	f04f 0901 	movcs.w	r9, #1
 8000f96:	f04f 0900 	movcc.w	r9, #0
 8000f9a:	428c      	cmp	r4, r1
 8000f9c:	d902      	bls.n	8000fa4 <__udivmoddi4+0x278>
 8000f9e:	f1b9 0f00 	cmp.w	r9, #0
 8000fa2:	d02c      	beq.n	8000ffe <__udivmoddi4+0x2d2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	1b09      	subs	r1, r1, r4
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb6:	fb04 f106 	mul.w	r1, r4, r6
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x2a2>
 8000fbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000fc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fc6:	d201      	bcs.n	8000fcc <__udivmoddi4+0x2a0>
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	d815      	bhi.n	8000ff8 <__udivmoddi4+0x2cc>
 8000fcc:	4644      	mov	r4, r8
 8000fce:	1a52      	subs	r2, r2, r1
 8000fd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fd4:	e721      	b.n	8000e1a <__udivmoddi4+0xee>
 8000fd6:	1a86      	subs	r6, r0, r2
 8000fd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e70e      	b.n	8000dfe <__udivmoddi4+0xd2>
 8000fe0:	3c02      	subs	r4, #2
 8000fe2:	4472      	add	r2, lr
 8000fe4:	e735      	b.n	8000e52 <__udivmoddi4+0x126>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4472      	add	r2, lr
 8000fea:	e6d0      	b.n	8000d8e <__udivmoddi4+0x62>
 8000fec:	44f4      	add	ip, lr
 8000fee:	3802      	subs	r0, #2
 8000ff0:	e6e3      	b.n	8000dba <__udivmoddi4+0x8e>
 8000ff2:	44f4      	add	ip, lr
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x152>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e7e7      	b.n	8000fce <__udivmoddi4+0x2a2>
 8000ffe:	3802      	subs	r0, #2
 8001000:	4471      	add	r1, lr
 8001002:	e7d0      	b.n	8000fa6 <__udivmoddi4+0x27a>
 8001004:	3b02      	subs	r3, #2
 8001006:	443c      	add	r4, r7
 8001008:	e782      	b.n	8000f10 <__udivmoddi4+0x1e4>
 800100a:	3802      	subs	r0, #2
 800100c:	443c      	add	r4, r7
 800100e:	e76a      	b.n	8000ee6 <__udivmoddi4+0x1ba>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <MX_GPIO_Init>:
/** Configure pins
     PC14-OSC32_IN (PC14)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
*/
void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <MX_GPIO_Init+0xa0>)
 800102c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001030:	4a20      	ldr	r2, [pc, #128]	@ (80010b4 <MX_GPIO_Init+0xa0>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <MX_GPIO_Init+0xa0>)
 800103c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_GPIO_Init+0xa0>)
 800104a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800104e:	4a19      	ldr	r2, [pc, #100]	@ (80010b4 <MX_GPIO_Init+0xa0>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_GPIO_Init+0xa0>)
 800105a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <MX_GPIO_Init+0xa0>)
 8001068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800106c:	4a11      	ldr	r2, [pc, #68]	@ (80010b4 <MX_GPIO_Init+0xa0>)
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_GPIO_Init+0xa0>)
 8001078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2180      	movs	r1, #128	@ 0x80
 8001088:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <MX_GPIO_Init+0xa4>)
 800108a:	f001 f8bb 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800108e:	2380      	movs	r3, #128	@ 0x80
 8001090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4619      	mov	r1, r3
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <MX_GPIO_Init+0xa4>)
 80010a6:	f000 fed5 	bl	8001e54 <HAL_GPIO_Init>

}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	46020c00 	.word	0x46020c00
 80010b8:	42020400 	.word	0x42020400

080010bc <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80010c0:	2000      	movs	r0, #0
 80010c2:	f001 f8b7 	bl	8002234 <HAL_ICACHE_ConfigAssociativityMode>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80010cc:	f000 f942 	bl	8001354 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80010d0:	f001 f8d0 	bl	8002274 <HAL_ICACHE_Enable>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80010da:	f000 f93b 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LPTIM_IC_ConfigTypeDef sConfig = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 80010f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001178 <MX_LPTIM1_Init+0x94>)
 80010fa:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 800110a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800110e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 65535;
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 8001112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001116:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8001130:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001136:	480f      	ldr	r0, [pc, #60]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 8001138:	f001 f8ac 	bl	8002294 <HAL_LPTIM_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_LPTIM1_Init+0x62>
  {
    Error_Handler();
 8001142:	f000 f907 	bl	8001354 <Error_Handler>
  }
  sConfig.ICInputSource = LPTIM_IC1SOURCE_GPIO;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
  sConfig.ICPrescaler = LPTIM_ICPSC_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  sConfig.ICPolarity = LPTIM_ICPOLARITY_RISING;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  sConfig.ICFilter = LPTIM_ICFLT_CLOCK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  if (HAL_LPTIM_IC_ConfigChannel(&hlptim1, &sConfig, LPTIM_CHANNEL_1) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_LPTIM1_Init+0x90>)
 800115e:	f001 f9fb 	bl	8002558 <HAL_LPTIM_IC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_LPTIM1_Init+0x88>
  {
    Error_Handler();
 8001168:	f000 f8f4 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200001f0 	.word	0x200001f0
 8001178:	46004400 	.word	0x46004400

0800117c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b0ba      	sub	sp, #232	@ 0xe8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	22c0      	movs	r2, #192	@ 0xc0
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f007 fadc 	bl	800875a <memset>
  if(lptimHandle->Instance==LPTIM1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a27      	ldr	r2, [pc, #156]	@ (8001244 <HAL_LPTIM_MspInit+0xc8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d146      	bne.n	800123a <HAL_LPTIM_MspInit+0xbe>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80011ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80011b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fe61 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_LPTIM_MspInit+0x58>
    {
      Error_Handler();
 80011d0:	f000 f8c0 	bl	8001354 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80011d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <HAL_LPTIM_MspInit+0xcc>)
 80011d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80011da:	4a1b      	ldr	r2, [pc, #108]	@ (8001248 <HAL_LPTIM_MspInit+0xcc>)
 80011dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011e0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80011e4:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <HAL_LPTIM_MspInit+0xcc>)
 80011e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80011ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_LPTIM_MspInit+0xcc>)
 80011f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011f8:	4a13      	ldr	r2, [pc, #76]	@ (8001248 <HAL_LPTIM_MspInit+0xcc>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HAL_LPTIM_MspInit+0xcc>)
 8001204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PC1     ------> LPTIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001228:	2301      	movs	r3, #1
 800122a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	@ (800124c <HAL_LPTIM_MspInit+0xd0>)
 8001236:	f000 fe0d 	bl	8001e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 800123a:	bf00      	nop
 800123c:	37e8      	adds	r7, #232	@ 0xe8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	46004400 	.word	0x46004400
 8001248:	46020c00 	.word	0x46020c00
 800124c:	42020800 	.word	0x42020800

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f000 fb60 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f810 	bl	800127c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800125c:	f000 f86c 	bl	8001338 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001260:	f7ff fed8 	bl	8001014 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8001264:	f7ff ff2a 	bl	80010bc <MX_ICACHE_Init>
  MX_RTC_Init();
 8001268:	f000 f87a 	bl	8001360 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800126c:	f000 fa76 	bl	800175c <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 8001270:	f7ff ff38 	bl	80010e4 <MX_LPTIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FM_MAIN_Main();
 8001274:	f006 fa78 	bl	8007768 <FM_MAIN_Main>
 8001278:	e7fc      	b.n	8001274 <main+0x24>
	...

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b09e      	sub	sp, #120	@ 0x78
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	2260      	movs	r2, #96	@ 0x60
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f007 fa65 	bl	800875a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80012a0:	2000      	movs	r0, #0
 80012a2:	f001 fa2f 	bl	8002704 <HAL_PWREx_ControlVoltageScaling>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012ac:	f000 f852 	bl	8001354 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012b0:	f001 fa18 	bl	80026e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <SystemClock_Config+0xb8>)
 80012b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001334 <SystemClock_Config+0xb8>)
 80012bc:	f023 0318 	bic.w	r3, r3, #24
 80012c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012c4:	2314      	movs	r3, #20
 80012c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012c8:	2381      	movs	r3, #129	@ 0x81
 80012ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012d0:	2310      	movs	r3, #16
 80012d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 80012d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012da:	2300      	movs	r3, #0
 80012dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 fb26 	bl	8002934 <HAL_RCC_OscConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80012ee:	f000 f831 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f2:	231f      	movs	r3, #31
 80012f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	2101      	movs	r1, #1
 800130e:	4618      	mov	r0, r3
 8001310:	f002 f9ec 	bl	80036ec <HAL_RCC_ClockConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800131a:	f000 f81b 	bl	8001354 <Error_Handler>
  }

  /** Enable the force of MSIK in stop mode
  */
  __HAL_RCC_MSIKSTOP_ENABLE();
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <SystemClock_Config+0xb8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <SystemClock_Config+0xb8>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	bf00      	nop
 800132c:	3778      	adds	r7, #120	@ 0x78
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	46020c00 	.word	0x46020c00

08001338 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800133c:	f001 faea 	bl	8002914 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001340:	2002      	movs	r0, #2
 8001342:	f001 fa6b 	bl	800281c <HAL_PWREx_ConfigSupply>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800134c:	f000 f802 	bl	8001354 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <Error_Handler+0x8>

08001360 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
 8001374:	615a      	str	r2, [r3, #20]
 8001376:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001378:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <MX_RTC_Init+0xa8>)
 800137a:	4a24      	ldr	r2, [pc, #144]	@ (800140c <MX_RTC_Init+0xac>)
 800137c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800137e:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <MX_RTC_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <MX_RTC_Init+0xa8>)
 8001386:	227f      	movs	r2, #127	@ 0x7f
 8001388:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <MX_RTC_Init+0xa8>)
 800138c:	22ff      	movs	r2, #255	@ 0xff
 800138e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MX_RTC_Init+0xa8>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <MX_RTC_Init+0xa8>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_RTC_Init+0xa8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <MX_RTC_Init+0xa8>)
 80013a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_RTC_Init+0xa8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_RTC_Init+0xa8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013b6:	4814      	ldr	r0, [pc, #80]	@ (8001408 <MX_RTC_Init+0xa8>)
 80013b8:	f005 fa00 	bl	80067bc <HAL_RTC_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80013c2:	f7ff ffc7 	bl	8001354 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	@ (8001408 <MX_RTC_Init+0xa8>)
 80013dc:	f005 fbac 	bl	8006b38 <HAL_RTCEx_PrivilegeModeSet>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80013e6:	f7ff ffb5 	bl	8001354 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 80013ea:	2300      	movs	r3, #0
 80013ec:	2204      	movs	r2, #4
 80013ee:	2100      	movs	r1, #0
 80013f0:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_RTC_Init+0xa8>)
 80013f2:	f005 fb11 	bl	8006a18 <HAL_RTCEx_SetWakeUpTimer_IT>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80013fc:	f7ff ffaa 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000240 	.word	0x20000240
 800140c:	46007800 	.word	0x46007800

08001410 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0b4      	sub	sp, #208	@ 0xd0
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	22c0      	movs	r2, #192	@ 0xc0
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f007 f99a 	bl	800875a <memset>
  if(rtcHandle->Instance==RTC)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a21      	ldr	r2, [pc, #132]	@ (80014b0 <HAL_RTC_MspInit+0xa0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d13a      	bne.n	80014a6 <HAL_RTC_MspInit+0x96>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001430:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800143c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001440:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fd1f 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001454:	f7ff ff7e 	bl	8001354 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_RTC_MspInit+0xa4>)
 800145a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800145e:	4a15      	ldr	r2, [pc, #84]	@ (80014b4 <HAL_RTC_MspInit+0xa4>)
 8001460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001464:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_RTC_MspInit+0xa4>)
 800146a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800146e:	4a11      	ldr	r2, [pc, #68]	@ (80014b4 <HAL_RTC_MspInit+0xa4>)
 8001470:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001474:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <HAL_RTC_MspInit+0xa4>)
 800147a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800147e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_RTC_MspInit+0xa4>)
 8001488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800148c:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <HAL_RTC_MspInit+0xa4>)
 800148e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001492:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2002      	movs	r0, #2
 800149c:	f000 fbfe 	bl	8001c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80014a0:	2002      	movs	r0, #2
 80014a2:	f000 fc15 	bl	8001cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014a6:	bf00      	nop
 80014a8:	37d0      	adds	r7, #208	@ 0xd0
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	46007800 	.word	0x46007800
 80014b4:	46020c00 	.word	0x46020c00

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_MspInit+0x30>)
 80014c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c4:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_MspInit+0x30>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_MspInit+0x30>)
 80014d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	46020c00 	.word	0x46020c00

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <NMI_Handler+0x4>

080014f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <MemManage_Handler+0x4>

08001504 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <UsageFault_Handler+0x4>

08001514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f000 fa8f 	bl	8001a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <RTC_IRQHandler+0x10>)
 8001552:	f005 facd 	bl	8006af0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000240 	.word	0x20000240

08001560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_kill>:

int _kill(int pid, int sig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800157a:	f007 f941 	bl	8008800 <__errno>
 800157e:	4603      	mov	r3, r0
 8001580:	2216      	movs	r2, #22
 8001582:	601a      	str	r2, [r3, #0]
  return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe7 	bl	8001570 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a2:	bf00      	nop
 80015a4:	e7fd      	b.n	80015a2 <_exit+0x12>

080015a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e00a      	b.n	80015ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b8:	f3af 8000 	nop.w
 80015bc:	4601      	mov	r1, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	b2ca      	uxtb	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbf0      	blt.n	80015b8 <_read+0x12>
  }

  return len;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e009      	b.n	8001606 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	60ba      	str	r2, [r7, #8]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbf1      	blt.n	80015f2 <_write+0x12>
  }
  return len;
 800160e:	687b      	ldr	r3, [r7, #4]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_close>:

int _close(int file)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001640:	605a      	str	r2, [r3, #4]
  return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_isatty>:

int _isatty(int file)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	@ (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f007 f8a6 	bl	8008800 <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200c0000 	.word	0x200c0000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	20000270 	.word	0x20000270
 80016e8:	20000468 	.word	0x20000468

080016ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <SystemInit+0x68>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <SystemInit+0x68>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <SystemInit+0x6c>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <SystemInit+0x6c>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <SystemInit+0x6c>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <SystemInit+0x6c>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <SystemInit+0x6c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0e      	ldr	r2, [pc, #56]	@ (8001758 <SystemInit+0x6c>)
 800171e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001722:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001726:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <SystemInit+0x6c>)
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <SystemInit+0x6c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <SystemInit+0x6c>)
 8001734:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001738:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800173a:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <SystemInit+0x6c>)
 800173c:	2200      	movs	r2, #0
 800173e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <SystemInit+0x68>)
 8001742:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001746:	609a      	str	r2, [r3, #8]
  #endif
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00
 8001758:	46020c00 	.word	0x46020c00

0800175c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001760:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 8001762:	4a23      	ldr	r2, [pc, #140]	@ (80017f0 <MX_USART1_UART_Init+0x94>)
 8001764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a4:	4811      	ldr	r0, [pc, #68]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 80017a6:	f005 f9f5 	bl	8006b94 <HAL_UART_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017b0:	f7ff fdd0 	bl	8001354 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b4:	2100      	movs	r1, #0
 80017b6:	480d      	ldr	r0, [pc, #52]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 80017b8:	f005 fed4 	bl	8007564 <HAL_UARTEx_SetTxFifoThreshold>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017c2:	f7ff fdc7 	bl	8001354 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c6:	2100      	movs	r1, #0
 80017c8:	4808      	ldr	r0, [pc, #32]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 80017ca:	f005 ff09 	bl	80075e0 <HAL_UARTEx_SetRxFifoThreshold>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017d4:	f7ff fdbe 	bl	8001354 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_USART1_UART_Init+0x90>)
 80017da:	f005 fe8a 	bl	80074f2 <HAL_UARTEx_DisableFifoMode>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017e4:	f7ff fdb6 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000274 	.word	0x20000274
 80017f0:	40013800 	.word	0x40013800

080017f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0ba      	sub	sp, #232	@ 0xe8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	22c0      	movs	r2, #192	@ 0xc0
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f006 ffa0 	bl	800875a <memset>
  if(uartHandle->Instance==USART1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a26      	ldr	r2, [pc, #152]	@ (80018b8 <HAL_UART_MspInit+0xc4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d145      	bne.n	80018b0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001824:	f04f 0201 	mov.w	r2, #1
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001830:	2300      	movs	r3, #0
 8001832:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4618      	mov	r0, r3
 800183a:	f002 fb27 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001844:	f7ff fd86 	bl	8001354 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001848:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <HAL_UART_MspInit+0xc8>)
 800184a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800184e:	4a1b      	ldr	r2, [pc, #108]	@ (80018bc <HAL_UART_MspInit+0xc8>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001854:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <HAL_UART_MspInit+0xc8>)
 800185a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800185e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_UART_MspInit+0xc8>)
 8001868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186c:	4a13      	ldr	r2, [pc, #76]	@ (80018bc <HAL_UART_MspInit+0xc8>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <HAL_UART_MspInit+0xc8>)
 8001878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001884:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001888:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800189e:	2307      	movs	r3, #7
 80018a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <HAL_UART_MspInit+0xcc>)
 80018ac:	f000 fad2 	bl	8001e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018b0:	bf00      	nop
 80018b2:	37e8      	adds	r7, #232	@ 0xe8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40013800 	.word	0x40013800
 80018bc:	46020c00 	.word	0x46020c00
 80018c0:	42020000 	.word	0x42020000

080018c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018fc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018c8:	f7ff ff10 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018ce:	e003      	b.n	80018d8 <LoopCopyDataInit>

080018d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018d6:	3104      	adds	r1, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018d8:	480a      	ldr	r0, [pc, #40]	@ (8001904 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018e0:	d3f6      	bcc.n	80018d0 <CopyDataInit>
	ldr	r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <LoopForever+0x12>)
	b	LoopFillZerobss
 80018e4:	e002      	b.n	80018ec <LoopFillZerobss>

080018e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018e8:	f842 3b04 	str.w	r3, [r2], #4

080018ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <LoopForever+0x16>)
	cmp	r2, r3
 80018ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018f0:	d3f9      	bcc.n	80018e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f006 ff8b 	bl	800880c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f6:	f7ff fcab 	bl	8001250 <main>

080018fa <LoopForever>:

LoopForever:
    b LoopForever
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80018fc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001900:	0800c4b0 	.word	0x0800c4b0
	ldr	r0, =_sdata
 8001904:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001908:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 800190c:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8001910:	20000464 	.word	0x20000464

08001914 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_IRQHandler>
	...

08001918 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_Init+0x50>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a11      	ldr	r2, [pc, #68]	@ (8001968 <HAL_Init+0x50>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f9ac 	bl	8001c86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800192e:	f002 f8cf 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_Init+0x54>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	490c      	ldr	r1, [pc, #48]	@ (8001970 <HAL_Init+0x58>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <HAL_Init+0x5c>)
 8001946:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001948:	2004      	movs	r0, #4
 800194a:	f000 f9f1 	bl	8001d30 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194e:	200f      	movs	r0, #15
 8001950:	f000 f812 	bl	8001978 <HAL_InitTick>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e002      	b.n	8001964 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800195e:	f7ff fdab 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40022000 	.word	0x40022000
 800196c:	46020c00 	.word	0x46020c00
 8001970:	0800bf74 	.word	0x0800bf74
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001984:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <HAL_InitTick+0xdc>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e05c      	b.n	8001a4a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <HAL_InitTick+0xe0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b04      	cmp	r3, #4
 800199a:	d10c      	bne.n	80019b6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800199c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a5c <HAL_InitTick+0xe4>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a54 <HAL_InitTick+0xdc>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e037      	b.n	8001a26 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80019b6:	f000 fa13 	bl	8001de0 <HAL_SYSTICK_GetCLKSourceConfig>
 80019ba:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d023      	beq.n	8001a0a <HAL_InitTick+0x92>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d82d      	bhi.n	8001a24 <HAL_InitTick+0xac>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_InitTick+0x5e>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d00d      	beq.n	80019f0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80019d4:	e026      	b.n	8001a24 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80019d6:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <HAL_InitTick+0xe4>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <HAL_InitTick+0xdc>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80019e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ec:	60fb      	str	r3, [r7, #12]
        break;
 80019ee:	e01a      	b.n	8001a26 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80019f0:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_InitTick+0xdc>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80019fe:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	60fb      	str	r3, [r7, #12]
        break;
 8001a08:	e00d      	b.n	8001a26 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001a0a:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_InitTick+0xdc>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	60fb      	str	r3, [r7, #12]
        break;
 8001a22:	e000      	b.n	8001a26 <HAL_InitTick+0xae>
        break;
 8001a24:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f960 	bl	8001cec <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e009      	b.n	8001a4a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a36:	2200      	movs	r2, #0
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3e:	f000 f92d 	bl	8001c9c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001a42:	4a07      	ldr	r2, [pc, #28]	@ (8001a60 <HAL_InitTick+0xe8>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008
 8001a58:	e000e010 	.word	0xe000e010
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_IncTick+0x20>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_IncTick+0x24>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <HAL_IncTick+0x24>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000308 	.word	0x20000308

08001a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_GetTick+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000308 	.word	0x20000308

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff ffee 	bl	8001a8c <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_Delay+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aca:	bf00      	nop
 8001acc:	f7ff ffde 	bl	8001a8c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000008 	.word	0x20000008

08001aec <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_SuspendTick+0x1c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <HAL_SuspendTick+0x1c>)
 8001af6:	f023 0302 	bic.w	r3, r3, #2
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_ResumeTick+0x1c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <HAL_ResumeTick+0x1c>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	@ (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	@ 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff4c 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001caa:	f7ff ff63 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	6978      	ldr	r0, [r7, #20]
 8001cb6:	f7ff ffb3 	bl	8001c20 <NVIC_EncodePriority>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff82 	bl	8001bcc <__NVIC_SetPriority>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff56 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00d      	b.n	8001d1e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <HAL_SYSTICK_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001d0a:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_SYSTICK_Config+0x40>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_SYSTICK_Config+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <HAL_SYSTICK_Config+0x40>)
 8001d16:	f043 0303 	orr.w	r3, r3, #3
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d844      	bhi.n	8001dc8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d44 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d67 	.word	0x08001d67
 8001d48:	08001d85 	.word	0x08001d85
 8001d4c:	08001da7 	.word	0x08001da7
 8001d50:	08001dc9 	.word	0x08001dc9
 8001d54:	08001d59 	.word	0x08001d59
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d58:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6013      	str	r3, [r2, #0]
      break;
 8001d64:	e031      	b.n	8001dca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d66:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d78:	4a18      	ldr	r2, [pc, #96]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d7a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001d82:	e022      	b.n	8001dca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a13      	ldr	r2, [pc, #76]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001d8a:	f023 0304 	bic.w	r3, r3, #4
 8001d8e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d96:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001d9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001da0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001da4:	e011      	b.n	8001dca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001dbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001dc6:	e000      	b.n	8001dca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001dc8:	bf00      	nop
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010
 8001ddc:	46020c00 	.word	0x46020c00

08001de0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001df2:	2304      	movs	r3, #4
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	e021      	b.n	8001e3c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfe:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001e02:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e0a:	d011      	beq.n	8001e30 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e12:	d810      	bhi.n	8001e36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e20:	d003      	beq.n	8001e2a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001e22:	e008      	b.n	8001e36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
        break;
 8001e28:	e008      	b.n	8001e3c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	607b      	str	r3, [r7, #4]
        break;
 8001e2e:	e005      	b.n	8001e3c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001e30:	2302      	movs	r3, #2
 8001e32:	607b      	str	r3, [r7, #4]
        break;
 8001e34:	e002      	b.n	8001e3c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
        break;
 8001e3a:	bf00      	nop
    }
  }
  return systick_source;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010
 8001e50:	46020c00 	.word	0x46020c00

08001e54 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e66:	e1ba      	b.n	80021de <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 81aa 	beq.w	80021d8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a55      	ldr	r2, [pc, #340]	@ (8001fdc <HAL_GPIO_Init+0x188>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d15d      	bne.n	8001f48 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001e92:	2201      	movs	r2, #1
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0201 	and.w	r2, r3, #1
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001ebc:	4a48      	ldr	r2, [pc, #288]	@ (8001fe0 <HAL_GPIO_Init+0x18c>)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ec4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001ec6:	4a46      	ldr	r2, [pc, #280]	@ (8001fe0 <HAL_GPIO_Init+0x18c>)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ede:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	220b      	movs	r2, #11
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69f9      	ldr	r1, [r7, #28]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2202      	movs	r2, #2
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e067      	b.n	8002018 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x104>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b12      	cmp	r3, #18
 8001f56:	d145      	bne.n	8001fe4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	08da      	lsrs	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3208      	adds	r2, #8
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69f9      	ldr	r1, [r7, #28]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e01e      	b.n	8002018 <HAL_GPIO_Init+0x1c4>
 8001fda:	bf00      	nop
 8001fdc:	46020000 	.word	0x46020000
 8001fe0:	0800bfcc 	.word	0x0800bfcc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	4313      	orrs	r3, r2
 8002010:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d00b      	beq.n	8002038 <HAL_GPIO_Init+0x1e4>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d007      	beq.n	8002038 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202c:	2b11      	cmp	r3, #17
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b12      	cmp	r3, #18
 8002036:	d130      	bne.n	800209a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	4013      	ands	r3, r2
 800204e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	4313      	orrs	r3, r2
 8002060:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800206e:	2201      	movs	r2, #1
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	4013      	ands	r3, r2
 800207c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0201 	and.w	r2, r3, #1
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	4313      	orrs	r3, r2
 8002092:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d017      	beq.n	80020d2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d07c      	beq.n	80021d8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80020de:	4a47      	ldr	r2, [pc, #284]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3318      	adds	r3, #24
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	4013      	ands	r3, r2
 8002100:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0a9a      	lsrs	r2, r3, #10
 8002106:	4b3e      	ldr	r3, [pc, #248]	@ (8002200 <HAL_GPIO_Init+0x3ac>)
 8002108:	4013      	ands	r3, r2
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	f002 0203 	and.w	r2, r2, #3
 8002110:	00d2      	lsls	r2, r2, #3
 8002112:	4093      	lsls	r3, r2
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	4313      	orrs	r3, r2
 8002118:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800211a:	4938      	ldr	r1, [pc, #224]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3318      	adds	r3, #24
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002128:	4b34      	ldr	r3, [pc, #208]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	4013      	ands	r3, r2
 8002136:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800214c:	4a2b      	ldr	r2, [pc, #172]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002152:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43db      	mvns	r3, r3
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	4013      	ands	r3, r2
 8002160:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002176:	4a21      	ldr	r2, [pc, #132]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800217c:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 800217e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002182:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43db      	mvns	r3, r3
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	4013      	ands	r3, r2
 800218c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80021a2:	4a16      	ldr	r2, [pc, #88]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80021aa:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 80021ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80021d0:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <HAL_GPIO_Init+0x3a8>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f47f ae3d 	bne.w	8001e68 <HAL_GPIO_Init+0x14>
  }
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	3724      	adds	r7, #36	@ 0x24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	46022000 	.word	0x46022000
 8002200:	002f7f7f 	.word	0x002f7f7f

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002220:	e002      	b.n	8002228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e007      	b.n	8002262 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002252:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0204 	bic.w	r2, r3, #4
 800225a:	4905      	ldr	r1, [pc, #20]	@ (8002270 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40030400 	.word	0x40030400

08002274 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_ICACHE_Enable+0x1c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <HAL_ICACHE_Enable+0x1c>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40030400 	.word	0x40030400

08002294 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0e7      	b.n	8002476 <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7fe ff5b 	bl	800117c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022e6:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80022f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f952 	bl	80025a0 <LPTIM_WaitForFlag>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d101      	bne.n	8002306 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0b7      	b.n	8002476 <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2210      	movs	r2, #16
 800230c:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a12      	ldr	r2, [r2, #32]
 8002316:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002318:	2110      	movs	r1, #16
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f940 	bl	80025a0 <LPTIM_WaitForFlag>
 8002320:	4603      	mov	r3, r0
 8002322:	2b03      	cmp	r3, #3
 8002324:	d101      	bne.n	800232a <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0a5      	b.n	8002476 <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10e      	bne.n	8002356 <HAL_LPTIM_Init+0xc2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d107      	bne.n	8002356 <HAL_LPTIM_Init+0xc2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d004      	beq.n	8002370 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800236e:	d103      	bne.n	8002378 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 031e 	bic.w	r3, r3, #30
 8002376:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002380:	4293      	cmp	r3, r2
 8002382:	d005      	beq.n	8002390 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800238a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800238e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4b3b      	ldr	r3, [pc, #236]	@ (8002480 <HAL_LPTIM_Init+0x1ec>)
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80023a0:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 80023a6:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80023ac:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80023c4:	4313      	orrs	r3, r2
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d004      	beq.n	80023de <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023dc:	d107      	bne.n	80023ee <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80023e6:	4313      	orrs	r3, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00a      	beq.n	8002410 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002402:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002408:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <HAL_LPTIM_Init+0x1f0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_LPTIM_Init+0x198>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a18      	ldr	r2, [pc, #96]	@ (8002488 <HAL_LPTIM_Init+0x1f4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d108      	bne.n	800243e <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24
 800243c:	e00e      	b.n	800245c <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a12      	ldr	r2, [pc, #72]	@ (800248c <HAL_LPTIM_Init+0x1f8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_LPTIM_Init+0x1be>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a10      	ldr	r2, [pc, #64]	@ (8002490 <HAL_LPTIM_Init+0x1fc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d104      	bne.n	800245c <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800245a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	ff39f1fe 	.word	0xff39f1fe
 8002484:	46004400 	.word	0x46004400
 8002488:	40009400 	.word	0x40009400
 800248c:	46004800 	.word	0x46004800
 8002490:	46004c00 	.word	0x46004c00

08002494 <HAL_LPTIM_IC_Start>:
  *            @arg LPTIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_IC_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INPUT_CAPTURE_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_LPTIM_IC_Start+0x24>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e008      	b.n	80024ca <HAL_LPTIM_IC_Start+0x36>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_LPTIM_IC_Start+0x3e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e03c      	b.n	800254c <HAL_LPTIM_IC_Start+0xb8>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d104      	bne.n	80024ea <HAL_LPTIM_IC_Start+0x56>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 80024e8:	e003      	b.n	80024f2 <HAL_LPTIM_IC_Start+0x5e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0204 	orr.w	r2, r2, #4
 8002510:	611a      	str	r2, [r3, #16]

  /* Enable capture */
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_LPTIM_IC_Start+0x8c>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d009      	beq.n	8002532 <HAL_LPTIM_IC_Start+0x9e>
 800251e:	e010      	b.n	8002542 <HAL_LPTIM_IC_Start+0xae>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0202 	orr.w	r2, r2, #2
 800252e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002530:	e007      	b.n	8002542 <HAL_LPTIM_IC_Start+0xae>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_LPTIM_IC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_IC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_IC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_LPTIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_LPTIM_IC_FILTER(sConfig->ICFilter));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  switch (Channel)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_LPTIM_IC_ConfigChannel+0x22>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <HAL_LPTIM_IC_ConfigChannel+0x2c>
      /* Configure the LPTIM Channel 2 in Input Capture */
      LPTIM_IC2_SetConfig(hlptim, sConfig);
      break;
    }
    default:
      break;
 8002578:	e009      	b.n	800258e <HAL_LPTIM_IC_ConfigChannel+0x36>
      LPTIM_IC1_SetConfig(hlptim, sConfig);
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f83f 	bl	8002600 <LPTIM_IC1_SetConfig>
      break;
 8002582:	e004      	b.n	800258e <HAL_LPTIM_IC_ConfigChannel+0x36>
      LPTIM_IC2_SetConfig(hlptim, sConfig);
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f871 	bl	800266e <LPTIM_IC2_SetConfig>
      break;
 800258c:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <LPTIM_WaitForFlag+0x58>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a12      	ldr	r2, [pc, #72]	@ (80025fc <LPTIM_WaitForFlag+0x5c>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	0b9b      	lsrs	r3, r3, #14
 80025ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	4013      	ands	r3, r2
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d002      	beq.n	80025ea <LPTIM_WaitForFlag+0x4a>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ec      	bne.n	80025c4 <LPTIM_WaitForFlag+0x24>

  return result;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	20000000 	.word	0x20000000
 80025fc:	d1b71759 	.word	0xd1b71759

08002600 <LPTIM_IC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The input configuration structure
  * @retval None
  */
static void LPTIM_IC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_IC_ConfigTypeDef *sConfig)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr2;

  tmpccmr1 = hlptim->Instance->CCMR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_IC1PSC_Msk | LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_IC1F_Msk);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 534c 	bic.w	r3, r3, #13056	@ 0x3300
 8002618:	f023 030c 	bic.w	r3, r3, #12
 800261c:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->ICPrescaler |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
              sConfig->ICPolarity |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
  tmpccmr1 |= sConfig->ICPrescaler |
 8002626:	431a      	orrs	r2, r3
              sConfig->ICFilter |
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
              sConfig->ICPolarity |
 800262c:	431a      	orrs	r2, r3
  tmpccmr1 |= sConfig->ICPrescaler |
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
              LPTIM_CCMR1_CC1SEL;

  tmpcfgr2 = hlptim->Instance->CFGR2;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	60bb      	str	r3, [r7, #8]
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC1SEL_Msk);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002646:	60bb      	str	r3, [r7, #8]
  tmpcfgr2 |= sConfig->ICInputSource;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	4313      	orrs	r3, r2
 8002650:	60bb      	str	r3, [r7, #8]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Write to CFGR2 register */
  hlptim->Instance->CFGR2 = tmpcfgr2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LPTIM_IC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The input configuration structure
  * @retval None
  */
static void LPTIM_IC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_IC_ConfigTypeDef *sConfig)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpcfgr2;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267e:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_IC2PSC_Msk | LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_IC2F_Msk);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 534c 	bic.w	r3, r3, #855638016	@ 0x33000000
 8002686:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800268a:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= (sConfig->ICPrescaler << (LPTIM_CCMR1_IC2PSC_Pos - LPTIM_CCMR1_IC1PSC_Pos)) |
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	041a      	lsls	r2, r3, #16
              (sConfig->ICPolarity << (LPTIM_CCMR1_CC2P_Pos - LPTIM_CCMR1_CC1P_Pos)) |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	041b      	lsls	r3, r3, #16
  tmpccmr1 |= (sConfig->ICPrescaler << (LPTIM_CCMR1_IC2PSC_Pos - LPTIM_CCMR1_IC1PSC_Pos)) |
 8002698:	431a      	orrs	r2, r3
              (sConfig->ICFilter << (LPTIM_CCMR1_IC2F_Pos - LPTIM_CCMR1_IC1F_Pos)) |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	041b      	lsls	r3, r3, #16
              (sConfig->ICPolarity << (LPTIM_CCMR1_CC2P_Pos - LPTIM_CCMR1_CC1P_Pos)) |
 80026a0:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->ICPrescaler << (LPTIM_CCMR1_IC2PSC_Pos - LPTIM_CCMR1_IC1PSC_Pos)) |
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026aa:	60fb      	str	r3, [r7, #12]
              LPTIM_CCMR1_CC2SEL;

  tmpcfgr2 = hlptim->Instance->CFGR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	60bb      	str	r3, [r7, #8]
  tmpcfgr2 &= ~(LPTIM_CFGR2_IC2SEL_Msk);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80026ba:	60bb      	str	r3, [r7, #8]
  tmpcfgr2 |= sConfig->ICInputSource;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60bb      	str	r3, [r7, #8]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Write to CFGR2 register */
  hlptim->Instance->CFGR2 = tmpcfgr2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	46020800 	.word	0x46020800

08002704 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800270c:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800270e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002714:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d10b      	bne.n	8002736 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002724:	d905      	bls.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002726:	4b33      	ldr	r3, [pc, #204]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4a32      	ldr	r2, [pc, #200]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002730:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e057      	b.n	80027e6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273c:	d90a      	bls.n	8002754 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800273e:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4313      	orrs	r3, r2
 800274a:	4a2a      	ldr	r2, [pc, #168]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002750:	60d3      	str	r3, [r2, #12]
 8002752:	e007      	b.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002754:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800275c:	4925      	ldr	r1, [pc, #148]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4313      	orrs	r3, r2
 8002762:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002764:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	099b      	lsrs	r3, r3, #6
 8002770:	2232      	movs	r2, #50	@ 0x32
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	4a21      	ldr	r2, [pc, #132]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002782:	e002      	b.n	800278a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3b01      	subs	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800278a:	4b1a      	ldr	r3, [pc, #104]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f3      	bne.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01b      	beq.n	80027da <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a15      	ldr	r2, [pc, #84]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	2232      	movs	r2, #50	@ 0x32
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	4a11      	ldr	r2, [pc, #68]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	099b      	lsrs	r3, r3, #6
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80027c0:	e002      	b.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80027c8:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80027ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <HAL_PWREx_ControlVoltageScaling+0xd6>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f3      	bne.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e000      	b.n	80027e6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	46020800 	.word	0x46020800
 80027f8:	20000000 	.word	0x20000000
 80027fc:	10624dd3 	.word	0x10624dd3

08002800 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <HAL_PWREx_GetVoltageRange+0x18>)
 8002806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	46020800 	.word	0x46020800

0800281c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002824:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <HAL_PWREx_ConfigSupply+0x94>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a22      	ldr	r2, [pc, #136]	@ (80028b4 <HAL_PWREx_ConfigSupply+0x98>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	2232      	movs	r2, #50	@ 0x32
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <HAL_PWREx_ConfigSupply+0x98>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	3301      	adds	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d113      	bne.n	8002870 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <HAL_PWREx_ConfigSupply+0x9c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a1a      	ldr	r2, [pc, #104]	@ (80028b8 <HAL_PWREx_ConfigSupply+0x9c>)
 800284e:	f023 0302 	bic.w	r3, r3, #2
 8002852:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002854:	e002      	b.n	800285c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3b01      	subs	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800285c:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <HAL_PWREx_ConfigSupply+0x9c>)
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b02      	cmp	r3, #2
 8002866:	d116      	bne.n	8002896 <HAL_PWREx_ConfigSupply+0x7a>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f3      	bne.n	8002856 <HAL_PWREx_ConfigSupply+0x3a>
 800286e:	e012      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <HAL_PWREx_ConfigSupply+0x9c>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a10      	ldr	r2, [pc, #64]	@ (80028b8 <HAL_PWREx_ConfigSupply+0x9c>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800287c:	e002      	b.n	8002884 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3b01      	subs	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <HAL_PWREx_ConfigSupply+0x9c>)
 8002886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_PWREx_ConfigSupply+0x7a>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f3      	bne.n	800287e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e000      	b.n	80028a2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000
 80028b4:	10624dd3 	.word	0x10624dd3
 80028b8:	46020800 	.word	0x46020800

080028bc <HAL_PWREx_EnterSTOP2Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 2 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 80028c6:	4b11      	ldr	r3, [pc, #68]	@ (800290c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 0307 	bic.w	r3, r3, #7
 80028ce:	4a0f      	ldr	r2, [pc, #60]	@ (800290c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80028e8:	bf30      	wfi
 80028ea:	e002      	b.n	80028f2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80028ec:	bf40      	sev
    __WFE();
 80028ee:	bf20      	wfe
    __WFE();
 80028f0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80028f2:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	4a06      	ldr	r2, [pc, #24]	@ (8002910 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	6113      	str	r3, [r2, #16]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	46020800 	.word	0x46020800
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	46020800 	.word	0x46020800

08002934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08e      	sub	sp, #56	@ 0x38
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f000 bec8 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294e:	4b99      	ldr	r3, [pc, #612]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002958:	4b96      	ldr	r3, [pc, #600]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 800295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 816c 	beq.w	8002c48 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_RCC_OscConfig+0x52>
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002978:	2b0c      	cmp	r3, #12
 800297a:	f040 80de 	bne.w	8002b3a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800297e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002980:	2b01      	cmp	r3, #1
 8002982:	f040 80da 	bne.w	8002b3a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f000 bea5 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002998:	4b86      	ldr	r3, [pc, #536]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_RCC_OscConfig+0x7a>
 80029a4:	4b83      	ldr	r3, [pc, #524]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80029ac:	e005      	b.n	80029ba <HAL_RCC_OscConfig+0x86>
 80029ae:	4b81      	ldr	r3, [pc, #516]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d255      	bcs.n	8002a6a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 f9d9 	bl	8003d80 <RCC_SetFlashLatencyFromMSIRange>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f000 be82 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80029da:	4b76      	ldr	r3, [pc, #472]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	4a75      	ldr	r2, [pc, #468]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029e4:	6093      	str	r3, [r2, #8]
 80029e6:	4b73      	ldr	r3, [pc, #460]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	4970      	ldr	r1, [pc, #448]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002a00:	d309      	bcc.n	8002a16 <HAL_RCC_OscConfig+0xe2>
 8002a02:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f023 021f 	bic.w	r2, r3, #31
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4969      	ldr	r1, [pc, #420]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
 8002a14:	e07e      	b.n	8002b14 <HAL_RCC_OscConfig+0x1e0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da0a      	bge.n	8002a34 <HAL_RCC_OscConfig+0x100>
 8002a1e:	4b65      	ldr	r3, [pc, #404]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	015b      	lsls	r3, r3, #5
 8002a2c:	4961      	ldr	r1, [pc, #388]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60cb      	str	r3, [r1, #12]
 8002a32:	e06f      	b.n	8002b14 <HAL_RCC_OscConfig+0x1e0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a3c:	d30a      	bcc.n	8002a54 <HAL_RCC_OscConfig+0x120>
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	029b      	lsls	r3, r3, #10
 8002a4c:	4959      	ldr	r1, [pc, #356]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60cb      	str	r3, [r1, #12]
 8002a52:	e05f      	b.n	8002b14 <HAL_RCC_OscConfig+0x1e0>
 8002a54:	4b57      	ldr	r3, [pc, #348]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	03db      	lsls	r3, r3, #15
 8002a62:	4954      	ldr	r1, [pc, #336]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60cb      	str	r3, [r1, #12]
 8002a68:	e054      	b.n	8002b14 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002a6a:	4b52      	ldr	r3, [pc, #328]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	4a51      	ldr	r2, [pc, #324]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a74:	6093      	str	r3, [r2, #8]
 8002a76:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	494c      	ldr	r1, [pc, #304]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002a90:	d309      	bcc.n	8002aa6 <HAL_RCC_OscConfig+0x172>
 8002a92:	4b48      	ldr	r3, [pc, #288]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f023 021f 	bic.w	r2, r3, #31
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4945      	ldr	r1, [pc, #276]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60cb      	str	r3, [r1, #12]
 8002aa4:	e028      	b.n	8002af8 <HAL_RCC_OscConfig+0x1c4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da0a      	bge.n	8002ac4 <HAL_RCC_OscConfig+0x190>
 8002aae:	4b41      	ldr	r3, [pc, #260]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	015b      	lsls	r3, r3, #5
 8002abc:	493d      	ldr	r1, [pc, #244]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60cb      	str	r3, [r1, #12]
 8002ac2:	e019      	b.n	8002af8 <HAL_RCC_OscConfig+0x1c4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002acc:	d30a      	bcc.n	8002ae4 <HAL_RCC_OscConfig+0x1b0>
 8002ace:	4b39      	ldr	r3, [pc, #228]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	029b      	lsls	r3, r3, #10
 8002adc:	4935      	ldr	r1, [pc, #212]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60cb      	str	r3, [r1, #12]
 8002ae2:	e009      	b.n	8002af8 <HAL_RCC_OscConfig+0x1c4>
 8002ae4:	4b33      	ldr	r3, [pc, #204]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	03db      	lsls	r3, r3, #15
 8002af2:	4930      	ldr	r1, [pc, #192]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f93c 	bl	8003d80 <RCC_SetFlashLatencyFromMSIRange>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f000 bde5 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002b14:	f001 f8de 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b18:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <HAL_RCC_OscConfig+0x284>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe ff2b 	bl	8001978 <HAL_InitTick>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 808a 	beq.w	8002c46 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b36:	f000 bdd2 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d066      	beq.n	8002c10 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002b42:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002b4e:	f7fe ff9d 	bl	8001a8c <HAL_GetTick>
 8002b52:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b56:	f7fe ff99 	bl	8001a8c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d902      	bls.n	8002b6a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	f000 bdba 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002b6a:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ef      	beq.n	8002b56 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002b76:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b80:	6093      	str	r3, [r2, #8]
 8002b82:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	4909      	ldr	r1, [pc, #36]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002b9c:	d30e      	bcc.n	8002bbc <HAL_RCC_OscConfig+0x288>
 8002b9e:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f023 021f 	bic.w	r2, r3, #31
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4902      	ldr	r1, [pc, #8]	@ (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60cb      	str	r3, [r1, #12]
 8002bb0:	e04a      	b.n	8002c48 <HAL_RCC_OscConfig+0x314>
 8002bb2:	bf00      	nop
 8002bb4:	46020c00 	.word	0x46020c00
 8002bb8:	20000004 	.word	0x20000004
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da0a      	bge.n	8002bda <HAL_RCC_OscConfig+0x2a6>
 8002bc4:	4b98      	ldr	r3, [pc, #608]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	015b      	lsls	r3, r3, #5
 8002bd2:	4995      	ldr	r1, [pc, #596]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
 8002bd8:	e036      	b.n	8002c48 <HAL_RCC_OscConfig+0x314>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be2:	d30a      	bcc.n	8002bfa <HAL_RCC_OscConfig+0x2c6>
 8002be4:	4b90      	ldr	r3, [pc, #576]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	029b      	lsls	r3, r3, #10
 8002bf2:	498d      	ldr	r1, [pc, #564]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60cb      	str	r3, [r1, #12]
 8002bf8:	e026      	b.n	8002c48 <HAL_RCC_OscConfig+0x314>
 8002bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	03db      	lsls	r3, r3, #15
 8002c08:	4987      	ldr	r1, [pc, #540]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60cb      	str	r3, [r1, #12]
 8002c0e:	e01b      	b.n	8002c48 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002c10:	4b85      	ldr	r3, [pc, #532]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a84      	ldr	r2, [pc, #528]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c1c:	f7fe ff36 	bl	8001a8c <HAL_GetTick>
 8002c20:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002c22:	e009      	b.n	8002c38 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c24:	f7fe ff32 	bl	8001a8c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	f000 bd53 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002c38:	4b7b      	ldr	r3, [pc, #492]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ef      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 808b 	beq.w	8002d6c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_OscConfig+0x334>
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d17d      	bne.n	8002d6c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f000 bd34 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x35a>
 8002c80:	4b69      	ldr	r3, [pc, #420]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a68      	ldr	r2, [pc, #416]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e041      	b.n	8002d12 <HAL_RCC_OscConfig+0x3de>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c96:	d112      	bne.n	8002cbe <HAL_RCC_OscConfig+0x38a>
 8002c98:	4b63      	ldr	r3, [pc, #396]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a62      	ldr	r2, [pc, #392]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002c9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b60      	ldr	r3, [pc, #384]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002caa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5c      	ldr	r2, [pc, #368]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e029      	b.n	8002d12 <HAL_RCC_OscConfig+0x3de>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002cc6:	d112      	bne.n	8002cee <HAL_RCC_OscConfig+0x3ba>
 8002cc8:	4b57      	ldr	r3, [pc, #348]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a56      	ldr	r2, [pc, #344]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b54      	ldr	r3, [pc, #336]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a53      	ldr	r2, [pc, #332]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b51      	ldr	r3, [pc, #324]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a50      	ldr	r2, [pc, #320]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	e011      	b.n	8002d12 <HAL_RCC_OscConfig+0x3de>
 8002cee:	4b4e      	ldr	r3, [pc, #312]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a4d      	ldr	r2, [pc, #308]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b48      	ldr	r3, [pc, #288]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a47      	ldr	r2, [pc, #284]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d014      	beq.n	8002d44 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002d1a:	f7fe feb7 	bl	8001a8c <HAL_GetTick>
 8002d1e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d20:	e009      	b.n	8002d36 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d22:	f7fe feb3 	bl	8001a8c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b64      	cmp	r3, #100	@ 0x64
 8002d2e:	d902      	bls.n	8002d36 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	f000 bcd4 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d36:	4b3c      	ldr	r3, [pc, #240]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0ef      	beq.n	8002d22 <HAL_RCC_OscConfig+0x3ee>
 8002d42:	e013      	b.n	8002d6c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002d44:	f7fe fea2 	bl	8001a8c <HAL_GetTick>
 8002d48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d4a:	e009      	b.n	8002d60 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fe9e 	bl	8001a8c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	@ 0x64
 8002d58:	d902      	bls.n	8002d60 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	f000 bcbf 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d60:	4b31      	ldr	r3, [pc, #196]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ef      	bne.n	8002d4c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d05f      	beq.n	8002e38 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_OscConfig+0x456>
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d114      	bne.n	8002dae <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d111      	bne.n	8002dae <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f000 bca3 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b23      	ldr	r3, [pc, #140]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	4920      	ldr	r1, [pc, #128]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002dac:	e044      	b.n	8002e38 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d024      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002db6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1b      	ldr	r2, [pc, #108]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002dc2:	f7fe fe63 	bl	8001a8c <HAL_GetTick>
 8002dc6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc8:	e009      	b.n	8002dde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dca:	f7fe fe5f 	bl	8001a8c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d902      	bls.n	8002dde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	f000 bc80 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ef      	beq.n	8002dca <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b0f      	ldr	r3, [pc, #60]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	490b      	ldr	r1, [pc, #44]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	610b      	str	r3, [r1, #16]
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a08      	ldr	r2, [pc, #32]	@ (8002e28 <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e0a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e0c:	f7fe fe3e 	bl	8001a8c <HAL_GetTick>
 8002e10:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e14:	f7fe fe3a 	bl	8001a8c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d904      	bls.n	8002e2c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	f000 bc5b 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
 8002e28:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e2c:	4baf      	ldr	r3, [pc, #700]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ed      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80c8 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4c:	4ba7      	ldr	r3, [pc, #668]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d111      	bne.n	8002e7e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4ba4      	ldr	r3, [pc, #656]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e60:	4aa2      	ldr	r2, [pc, #648]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002e62:	f043 0304 	orr.w	r3, r3, #4
 8002e66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e6a:	4ba0      	ldr	r3, [pc, #640]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e7e:	4b9c      	ldr	r3, [pc, #624]	@ (80030f0 <HAL_RCC_OscConfig+0x7bc>)
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d119      	bne.n	8002ebe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002e8a:	4b99      	ldr	r3, [pc, #612]	@ (80030f0 <HAL_RCC_OscConfig+0x7bc>)
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	4a98      	ldr	r2, [pc, #608]	@ (80030f0 <HAL_RCC_OscConfig+0x7bc>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fdf9 	bl	8001a8c <HAL_GetTick>
 8002e9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e9c:	e009      	b.n	8002eb2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe fdf5 	bl	8001a8c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d902      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	f000 bc16 	b.w	80036de <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002eb2:	4b8f      	ldr	r3, [pc, #572]	@ (80030f0 <HAL_RCC_OscConfig+0x7bc>)
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ef      	beq.n	8002e9e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d05f      	beq.n	8002f86 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002ec6:	4b89      	ldr	r3, [pc, #548]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ecc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d037      	beq.n	8002f4c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d006      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e3f4      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01b      	beq.n	8002f36 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002efe:	4b7b      	ldr	r3, [pc, #492]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f04:	4a79      	ldr	r2, [pc, #484]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f06:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002f0e:	f7fe fdbd 	bl	8001a8c <HAL_GetTick>
 8002f12:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f16:	f7fe fdb9 	bl	8001a8c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e3da      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f28:	4b70      	ldr	r3, [pc, #448]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ef      	bne.n	8002f16 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002f36:	4b6d      	ldr	r3, [pc, #436]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f3c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4969      	ldr	r1, [pc, #420]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002f4c:	4b67      	ldr	r3, [pc, #412]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f52:	4a66      	ldr	r2, [pc, #408]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002f5c:	f7fe fd96 	bl	8001a8c <HAL_GetTick>
 8002f60:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fe fd92 	bl	8001a8c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e3b3      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002f76:	4b5d      	ldr	r3, [pc, #372]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ef      	beq.n	8002f64 <HAL_RCC_OscConfig+0x630>
 8002f84:	e01b      	b.n	8002fbe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002f86:	4b59      	ldr	r3, [pc, #356]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f8c:	4a57      	ldr	r2, [pc, #348]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002f8e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002f92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002f96:	f7fe fd79 	bl	8001a8c <HAL_GetTick>
 8002f9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fe fd75 	bl	8001a8c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e396      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ef      	bne.n	8002f9e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fbe:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc6:	4b49      	ldr	r3, [pc, #292]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fcc:	4a47      	ldr	r2, [pc, #284]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002fce:	f023 0304 	bic.w	r3, r3, #4
 8002fd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8111 	beq.w	8003206 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fea:	4b40      	ldr	r3, [pc, #256]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003008:	4b38      	ldr	r3, [pc, #224]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800301c:	4b34      	ldr	r3, [pc, #208]	@ (80030f0 <HAL_RCC_OscConfig+0x7bc>)
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d118      	bne.n	800305a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003028:	4b31      	ldr	r3, [pc, #196]	@ (80030f0 <HAL_RCC_OscConfig+0x7bc>)
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	4a30      	ldr	r2, [pc, #192]	@ (80030f0 <HAL_RCC_OscConfig+0x7bc>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003034:	f7fe fd2a 	bl	8001a8c <HAL_GetTick>
 8003038:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fe fd26 	bl	8001a8c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e347      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800304e:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <HAL_RCC_OscConfig+0x7bc>)
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01f      	beq.n	80030a6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d010      	beq.n	8003094 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003072:	4b1e      	ldr	r3, [pc, #120]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8003074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003078:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003082:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8003084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003088:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003092:	e018      	b.n	80030c6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003094:	4b15      	ldr	r3, [pc, #84]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 8003096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800309a:	4a14      	ldr	r2, [pc, #80]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030a4:	e00f      	b.n	80030c6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 80030a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030ac:	4a0f      	ldr	r2, [pc, #60]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 80030b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030bc:	4a0b      	ldr	r2, [pc, #44]	@ (80030ec <HAL_RCC_OscConfig+0x7b8>)
 80030be:	f023 0304 	bic.w	r3, r3, #4
 80030c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d057      	beq.n	800317e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80030ce:	f7fe fcdd 	bl	8001a8c <HAL_GetTick>
 80030d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d4:	e00e      	b.n	80030f4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fe fcd9 	bl	8001a8c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d905      	bls.n	80030f4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e2f8      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
 80030ec:	46020c00 	.word	0x46020c00
 80030f0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80030f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0e9      	beq.n	80030d6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01b      	beq.n	8003146 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800310e:	4b96      	ldr	r3, [pc, #600]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003114:	4a94      	ldr	r2, [pc, #592]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800311a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800311e:	e00a      	b.n	8003136 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fe fcb4 	bl	8001a8c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e2d3      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003136:	4b8c      	ldr	r3, [pc, #560]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800313c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ed      	beq.n	8003120 <HAL_RCC_OscConfig+0x7ec>
 8003144:	e053      	b.n	80031ee <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003146:	4b88      	ldr	r3, [pc, #544]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800314c:	4a86      	ldr	r2, [pc, #536]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 800314e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003152:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe fc98 	bl	8001a8c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e2b7      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800316e:	4b7e      	ldr	r3, [pc, #504]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ed      	bne.n	8003158 <HAL_RCC_OscConfig+0x824>
 800317c:	e037      	b.n	80031ee <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800317e:	f7fe fc85 	bl	8001a8c <HAL_GetTick>
 8003182:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe fc81 	bl	8001a8c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e2a0      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800319c:	4b72      	ldr	r3, [pc, #456]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 800319e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ed      	bne.n	8003186 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80031aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80031ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01a      	beq.n	80031ee <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031b8:	4b6b      	ldr	r3, [pc, #428]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80031ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031be:	4a6a      	ldr	r2, [pc, #424]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80031c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe fc5f 	bl	8001a8c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e27e      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80031e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ed      	bne.n	80031ca <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80031f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80031fe:	f023 0304 	bic.w	r3, r3, #4
 8003202:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d036      	beq.n	8003280 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d019      	beq.n	800324e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800321a:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003220:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003224:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003226:	f7fe fc31 	bl	8001a8c <HAL_GetTick>
 800322a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800322e:	f7fe fc2d 	bl	8001a8c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e24e      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003240:	4b49      	ldr	r3, [pc, #292]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x8fa>
 800324c:	e018      	b.n	8003280 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800324e:	4b46      	ldr	r3, [pc, #280]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a45      	ldr	r2, [pc, #276]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003258:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800325a:	f7fe fc17 	bl	8001a8c <HAL_GetTick>
 800325e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003262:	f7fe fc13 	bl	8001a8c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e234      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003274:	4b3c      	ldr	r3, [pc, #240]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f0      	bne.n	8003262 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d036      	beq.n	80032fa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003290:	2b00      	cmp	r3, #0
 8003292:	d019      	beq.n	80032c8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003294:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a33      	ldr	r2, [pc, #204]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 800329a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800329e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032a0:	f7fe fbf4 	bl	8001a8c <HAL_GetTick>
 80032a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80032a8:	f7fe fbf0 	bl	8001a8c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e211      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80032ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x974>
 80032c6:	e018      	b.n	80032fa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80032c8:	4b27      	ldr	r3, [pc, #156]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a26      	ldr	r2, [pc, #152]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80032ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032d4:	f7fe fbda 	bl	8001a8c <HAL_GetTick>
 80032d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80032dc:	f7fe fbd6 	bl	8001a8c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e1f7      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80032ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d07f      	beq.n	8003406 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330a:	2b00      	cmp	r3, #0
 800330c:	d062      	beq.n	80033d4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800330e:	4b16      	ldr	r3, [pc, #88]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4a15      	ldr	r2, [pc, #84]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003314:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003318:	6093      	str	r3, [r2, #8]
 800331a:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003326:	4910      	ldr	r1, [pc, #64]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003334:	d309      	bcc.n	800334a <HAL_RCC_OscConfig+0xa16>
 8003336:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 021f 	bic.w	r2, r3, #31
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4909      	ldr	r1, [pc, #36]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003344:	4313      	orrs	r3, r2
 8003346:	60cb      	str	r3, [r1, #12]
 8003348:	e02a      	b.n	80033a0 <HAL_RCC_OscConfig+0xa6c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	da0c      	bge.n	800336c <HAL_RCC_OscConfig+0xa38>
 8003352:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	015b      	lsls	r3, r3, #5
 8003360:	4901      	ldr	r1, [pc, #4]	@ (8003368 <HAL_RCC_OscConfig+0xa34>)
 8003362:	4313      	orrs	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
 8003366:	e01b      	b.n	80033a0 <HAL_RCC_OscConfig+0xa6c>
 8003368:	46020c00 	.word	0x46020c00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003374:	d30a      	bcc.n	800338c <HAL_RCC_OscConfig+0xa58>
 8003376:	4ba1      	ldr	r3, [pc, #644]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	029b      	lsls	r3, r3, #10
 8003384:	499d      	ldr	r1, [pc, #628]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
 800338a:	e009      	b.n	80033a0 <HAL_RCC_OscConfig+0xa6c>
 800338c:	4b9b      	ldr	r3, [pc, #620]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	03db      	lsls	r3, r3, #15
 800339a:	4998      	ldr	r1, [pc, #608]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 800339c:	4313      	orrs	r3, r2
 800339e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80033a0:	4b96      	ldr	r3, [pc, #600]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a95      	ldr	r2, [pc, #596]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80033a6:	f043 0310 	orr.w	r3, r3, #16
 80033aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80033ac:	f7fe fb6e 	bl	8001a8c <HAL_GetTick>
 80033b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80033b4:	f7fe fb6a 	bl	8001a8c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e18b      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80033c6:	4b8d      	ldr	r3, [pc, #564]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xa80>
 80033d2:	e018      	b.n	8003406 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80033d4:	4b89      	ldr	r3, [pc, #548]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a88      	ldr	r2, [pc, #544]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80033da:	f023 0310 	bic.w	r3, r3, #16
 80033de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80033e0:	f7fe fb54 	bl	8001a8c <HAL_GetTick>
 80033e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80033e8:	f7fe fb50 	bl	8001a8c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e171      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80033fa:	4b80      	ldr	r3, [pc, #512]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8166 	beq.w	80036dc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003410:	2300      	movs	r3, #0
 8003412:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003416:	4b79      	ldr	r3, [pc, #484]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b0c      	cmp	r3, #12
 8003420:	f000 80f2 	beq.w	8003608 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003428:	2b02      	cmp	r3, #2
 800342a:	f040 80c5 	bne.w	80035b8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b73      	ldr	r3, [pc, #460]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a72      	ldr	r2, [pc, #456]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003434:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003438:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800343a:	f7fe fb27 	bl	8001a8c <HAL_GetTick>
 800343e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003442:	f7fe fb23 	bl	8001a8c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e144      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003454:	4b69      	ldr	r3, [pc, #420]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003460:	4b66      	ldr	r3, [pc, #408]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d111      	bne.n	8003492 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b63      	ldr	r3, [pc, #396]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003470:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003474:	4a61      	ldr	r2, [pc, #388]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800347e:	4b5f      	ldr	r3, [pc, #380]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003492:	4b5b      	ldr	r3, [pc, #364]	@ (8003600 <HAL_RCC_OscConfig+0xccc>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800349a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800349e:	d102      	bne.n	80034a6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80034a6:	4b56      	ldr	r3, [pc, #344]	@ (8003600 <HAL_RCC_OscConfig+0xccc>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4a55      	ldr	r2, [pc, #340]	@ (8003600 <HAL_RCC_OscConfig+0xccc>)
 80034ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034b0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80034b2:	4b52      	ldr	r3, [pc, #328]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034c6:	3a01      	subs	r2, #1
 80034c8:	0212      	lsls	r2, r2, #8
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80034d0:	430a      	orrs	r2, r1
 80034d2:	494a      	ldr	r1, [pc, #296]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80034d8:	4b48      	ldr	r3, [pc, #288]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80034da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034dc:	4b49      	ldr	r3, [pc, #292]	@ (8003604 <HAL_RCC_OscConfig+0xcd0>)
 80034de:	4013      	ands	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034e4:	3a01      	subs	r2, #1
 80034e6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034ee:	3a01      	subs	r2, #1
 80034f0:	0252      	lsls	r2, r2, #9
 80034f2:	b292      	uxth	r2, r2
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034fa:	3a01      	subs	r2, #1
 80034fc:	0412      	lsls	r2, r2, #16
 80034fe:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003502:	4311      	orrs	r1, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003508:	3a01      	subs	r2, #1
 800350a:	0612      	lsls	r2, r2, #24
 800350c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003510:	430a      	orrs	r2, r1
 8003512:	493a      	ldr	r1, [pc, #232]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003514:	4313      	orrs	r3, r2
 8003516:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003518:	4b38      	ldr	r3, [pc, #224]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	4a37      	ldr	r2, [pc, #220]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 800351e:	f023 0310 	bic.w	r3, r3, #16
 8003522:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	4a34      	ldr	r2, [pc, #208]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800352e:	4b33      	ldr	r3, [pc, #204]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003532:	4a32      	ldr	r2, [pc, #200]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003534:	f043 0310 	orr.w	r3, r3, #16
 8003538:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800353a:	4b30      	ldr	r3, [pc, #192]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	f023 020c 	bic.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	492d      	ldr	r1, [pc, #180]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003548:	4313      	orrs	r3, r2
 800354a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800354c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003554:	4b2a      	ldr	r3, [pc, #168]	@ (8003600 <HAL_RCC_OscConfig+0xccc>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4a29      	ldr	r2, [pc, #164]	@ (8003600 <HAL_RCC_OscConfig+0xccc>)
 800355a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800355e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003560:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b24      	ldr	r3, [pc, #144]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 800356a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356e:	4a23      	ldr	r2, [pc, #140]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003578:	4b20      	ldr	r3, [pc, #128]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1f      	ldr	r2, [pc, #124]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 800357e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003582:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003584:	f7fe fa82 	bl	8001a8c <HAL_GetTick>
 8003588:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe fa7e 	bl	8001a8c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e09f      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800359e:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035aa:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	4a13      	ldr	r2, [pc, #76]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b4:	6293      	str	r3, [r2, #40]	@ 0x28
 80035b6:	e091      	b.n	80036dc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b10      	ldr	r3, [pc, #64]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0f      	ldr	r2, [pc, #60]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80035c4:	f7fe fa62 	bl	8001a8c <HAL_GetTick>
 80035c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fa5e 	bl	8001a8c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e07f      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80035de:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80035ea:	4b04      	ldr	r3, [pc, #16]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	4a03      	ldr	r2, [pc, #12]	@ (80035fc <HAL_RCC_OscConfig+0xcc8>)
 80035f0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80035f4:	f023 0303 	bic.w	r3, r3, #3
 80035f8:	6293      	str	r3, [r2, #40]	@ 0x28
 80035fa:	e06f      	b.n	80036dc <HAL_RCC_OscConfig+0xda8>
 80035fc:	46020c00 	.word	0x46020c00
 8003600:	46020800 	.word	0x46020800
 8003604:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003608:	4b37      	ldr	r3, [pc, #220]	@ (80036e8 <HAL_RCC_OscConfig+0xdb4>)
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800360e:	4b36      	ldr	r3, [pc, #216]	@ (80036e8 <HAL_RCC_OscConfig+0xdb4>)
 8003610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003612:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003618:	2b01      	cmp	r3, #1
 800361a:	d039      	beq.n	8003690 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0203 	and.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d132      	bne.n	8003690 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d129      	bne.n	8003690 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d122      	bne.n	8003690 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003654:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d11a      	bne.n	8003690 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	0a5b      	lsrs	r3, r3, #9
 800365e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003666:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d111      	bne.n	8003690 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d108      	bne.n	8003690 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	0e1b      	lsrs	r3, r3, #24
 8003682:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e024      	b.n	80036de <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003694:	4b14      	ldr	r3, [pc, #80]	@ (80036e8 <HAL_RCC_OscConfig+0xdb4>)
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	08db      	lsrs	r3, r3, #3
 800369a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d01a      	beq.n	80036dc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80036a6:	4b10      	ldr	r3, [pc, #64]	@ (80036e8 <HAL_RCC_OscConfig+0xdb4>)
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	4a0f      	ldr	r2, [pc, #60]	@ (80036e8 <HAL_RCC_OscConfig+0xdb4>)
 80036ac:	f023 0310 	bic.w	r3, r3, #16
 80036b0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7fe f9eb 	bl	8001a8c <HAL_GetTick>
 80036b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80036b8:	bf00      	nop
 80036ba:	f7fe f9e7 	bl	8001a8c <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d0f9      	beq.n	80036ba <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	4a07      	ldr	r2, [pc, #28]	@ (80036e8 <HAL_RCC_OscConfig+0xdb4>)
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <HAL_RCC_OscConfig+0xdb4>)
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	4a04      	ldr	r2, [pc, #16]	@ (80036e8 <HAL_RCC_OscConfig+0xdb4>)
 80036d6:	f043 0310 	orr.w	r3, r3, #16
 80036da:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3738      	adds	r7, #56	@ 0x38
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	46020c00 	.word	0x46020c00

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e1d9      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b9b      	ldr	r3, [pc, #620]	@ (8003970 <HAL_RCC_ClockConfig+0x284>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b98      	ldr	r3, [pc, #608]	@ (8003970 <HAL_RCC_ClockConfig+0x284>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 020f 	bic.w	r2, r3, #15
 8003716:	4996      	ldr	r1, [pc, #600]	@ (8003970 <HAL_RCC_ClockConfig+0x284>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b94      	ldr	r3, [pc, #592]	@ (8003970 <HAL_RCC_ClockConfig+0x284>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e1c1      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d010      	beq.n	800375e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	4b8c      	ldr	r3, [pc, #560]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003748:	429a      	cmp	r2, r3
 800374a:	d908      	bls.n	800375e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800374c:	4b89      	ldr	r3, [pc, #548]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	4986      	ldr	r1, [pc, #536]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 800375a:	4313      	orrs	r3, r2
 800375c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d012      	beq.n	8003790 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	4b81      	ldr	r3, [pc, #516]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003778:	429a      	cmp	r2, r3
 800377a:	d909      	bls.n	8003790 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800377c:	4b7d      	ldr	r3, [pc, #500]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	497a      	ldr	r1, [pc, #488]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 800378c:	4313      	orrs	r3, r2
 800378e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d010      	beq.n	80037be <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	4b74      	ldr	r3, [pc, #464]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d908      	bls.n	80037be <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	4b71      	ldr	r3, [pc, #452]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	496e      	ldr	r1, [pc, #440]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d010      	beq.n	80037ec <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	4b69      	ldr	r3, [pc, #420]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d908      	bls.n	80037ec <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80037da:	4b66      	ldr	r3, [pc, #408]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f023 020f 	bic.w	r2, r3, #15
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	4963      	ldr	r1, [pc, #396]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80d2 	beq.w	800399e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d143      	bne.n	800388e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003806:	4b5b      	ldr	r3, [pc, #364]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d110      	bne.n	8003836 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003814:	4b57      	ldr	r3, [pc, #348]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800381a:	4a56      	ldr	r2, [pc, #344]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 800381c:	f043 0304 	orr.w	r3, r3, #4
 8003820:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003824:	4b53      	ldr	r3, [pc, #332]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003836:	f7fe f929 	bl	8001a8c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800383c:	4b4e      	ldr	r3, [pc, #312]	@ (8003978 <HAL_RCC_ClockConfig+0x28c>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00f      	beq.n	8003868 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800384a:	f7fe f91f 	bl	8001a8c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e12b      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800385c:	4b46      	ldr	r3, [pc, #280]	@ (8003978 <HAL_RCC_ClockConfig+0x28c>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800386e:	4b41      	ldr	r3, [pc, #260]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003874:	4a3f      	ldr	r2, [pc, #252]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003876:	f023 0304 	bic.w	r3, r3, #4
 800387a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800387e:	4b3d      	ldr	r3, [pc, #244]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d121      	bne.n	80038ce <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e112      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003896:	4b37      	ldr	r3, [pc, #220]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d115      	bne.n	80038ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e106      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038ae:	4b31      	ldr	r3, [pc, #196]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e0fa      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038be:	4b2d      	ldr	r3, [pc, #180]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0f2      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80038ce:	4b29      	ldr	r3, [pc, #164]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4926      	ldr	r1, [pc, #152]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80038e0:	f7fe f8d4 	bl	8001a8c <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d112      	bne.n	8003914 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fe f8cc 	bl	8001a8c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e0d6      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003906:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d1ee      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x204>
 8003912:	e044      	b.n	800399e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d112      	bne.n	8003942 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800391c:	e00a      	b.n	8003934 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391e:	f7fe f8b5 	bl	8001a8c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392c:	4293      	cmp	r3, r2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e0bf      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003934:	4b0f      	ldr	r3, [pc, #60]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b08      	cmp	r3, #8
 800393e:	d1ee      	bne.n	800391e <HAL_RCC_ClockConfig+0x232>
 8003940:	e02d      	b.n	800399e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d123      	bne.n	8003992 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fe f89e 	bl	8001a8c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e0a8      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003962:	4b04      	ldr	r3, [pc, #16]	@ (8003974 <HAL_RCC_ClockConfig+0x288>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ee      	bne.n	800394c <HAL_RCC_ClockConfig+0x260>
 800396e:	e016      	b.n	800399e <HAL_RCC_ClockConfig+0x2b2>
 8003970:	40022000 	.word	0x40022000
 8003974:	46020c00 	.word	0x46020c00
 8003978:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397c:	f7fe f886 	bl	8001a8c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e090      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003992:	4b4a      	ldr	r3, [pc, #296]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d1ee      	bne.n	800397c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	4b43      	ldr	r3, [pc, #268]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d208      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80039ba:	4b40      	ldr	r3, [pc, #256]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 020f 	bic.w	r2, r3, #15
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	493d      	ldr	r1, [pc, #244]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac0 <HAL_RCC_ClockConfig+0x3d4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d210      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b39      	ldr	r3, [pc, #228]	@ (8003ac0 <HAL_RCC_ClockConfig+0x3d4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 020f 	bic.w	r2, r3, #15
 80039e2:	4937      	ldr	r1, [pc, #220]	@ (8003ac0 <HAL_RCC_ClockConfig+0x3d4>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b35      	ldr	r3, [pc, #212]	@ (8003ac0 <HAL_RCC_ClockConfig+0x3d4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e05b      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d208      	bcs.n	8003a2a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b28      	ldr	r3, [pc, #160]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4925      	ldr	r1, [pc, #148]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d012      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d209      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003a48:	4b1c      	ldr	r3, [pc, #112]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	4919      	ldr	r1, [pc, #100]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d010      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	4b13      	ldr	r3, [pc, #76]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d208      	bcs.n	8003a8a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003a78:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	490d      	ldr	r1, [pc, #52]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003a8a:	f000 f821 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b0a      	ldr	r3, [pc, #40]	@ (8003abc <HAL_RCC_ClockConfig+0x3d0>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	490a      	ldr	r1, [pc, #40]	@ (8003ac4 <HAL_RCC_ClockConfig+0x3d8>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	4a09      	ldr	r2, [pc, #36]	@ (8003ac8 <HAL_RCC_ClockConfig+0x3dc>)
 8003aa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <HAL_RCC_ClockConfig+0x3e0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd ff65 	bl	8001978 <HAL_InitTick>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	46020c00 	.word	0x46020c00
 8003ac0:	40022000 	.word	0x40022000
 8003ac4:	0800bf74 	.word	0x0800bf74
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	20000004 	.word	0x20000004

08003ad0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b08b      	sub	sp, #44	@ 0x2c
 8003ad4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ade:	4b78      	ldr	r3, [pc, #480]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae8:	4b75      	ldr	r3, [pc, #468]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x34>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d121      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d11e      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003b04:	4b6e      	ldr	r3, [pc, #440]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003b10:	4b6b      	ldr	r3, [pc, #428]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b16:	0b1b      	lsrs	r3, r3, #12
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b1e:	e005      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003b20:	4b67      	ldr	r3, [pc, #412]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	0f1b      	lsrs	r3, r3, #28
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b2c:	4a65      	ldr	r2, [pc, #404]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d110      	bne.n	8003b5e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b40:	e00d      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b42:	4b5f      	ldr	r3, [pc, #380]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b4e:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	e004      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003b5c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	f040 80a5 	bne.w	8003cb0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003b66:	4b56      	ldr	r3, [pc, #344]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003b70:	4b53      	ldr	r3, [pc, #332]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003b7e:	4b50      	ldr	r3, [pc, #320]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	08db      	lsrs	r3, r3, #3
 8003b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d003      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0xe4>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d022      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x128>
 8003bb2:	e043      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003ccc <HAL_RCC_GetSysClockFreq+0x1fc>
 8003bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003bd6:	ed97 6a01 	vldr	s12, [r7, #4]
 8003bda:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003cd0 <HAL_RCC_GetSysClockFreq+0x200>
 8003bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bf6:	e046      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003ccc <HAL_RCC_GetSysClockFreq+0x1fc>
 8003c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c1a:	ed97 6a01 	vldr	s12, [r7, #4]
 8003c1e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003cd0 <HAL_RCC_GetSysClockFreq+0x200>
 8003c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c3a:	e024      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c54:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c64:	ed97 6a01 	vldr	s12, [r7, #4]
 8003c68:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003cd0 <HAL_RCC_GetSysClockFreq+0x200>
 8003c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c84:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003c86:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8a:	0e1b      	lsrs	r3, r3, #24
 8003c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c90:	3301      	adds	r3, #1
 8003c92:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003caa:	ee17 3a90 	vmov	r3, s15
 8003cae:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	372c      	adds	r7, #44	@ 0x2c
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	46020c00 	.word	0x46020c00
 8003cc4:	0800bf8c 	.word	0x0800bf8c
 8003cc8:	00f42400 	.word	0x00f42400
 8003ccc:	4b742400 	.word	0x4b742400
 8003cd0:	46000000 	.word	0x46000000

08003cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003cd8:	f7ff fefa 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b07      	ldr	r3, [pc, #28]	@ (8003cfc <HAL_RCC_GetHCLKFreq+0x28>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	4906      	ldr	r1, [pc, #24]	@ (8003d00 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003ce8:	5ccb      	ldrb	r3, [r1, r3]
 8003cea:	fa22 f303 	lsr.w	r3, r2, r3
 8003cee:	4a05      	ldr	r2, [pc, #20]	@ (8003d04 <HAL_RCC_GetHCLKFreq+0x30>)
 8003cf0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003cf2:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <HAL_RCC_GetHCLKFreq+0x30>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	46020c00 	.word	0x46020c00
 8003d00:	0800bf74 	.word	0x0800bf74
 8003d04:	20000000 	.word	0x20000000

08003d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003d0c:	f7ff ffe2 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	4903      	ldr	r1, [pc, #12]	@ (8003d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	46020c00 	.word	0x46020c00
 8003d2c:	0800bf84 	.word	0x0800bf84

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003d34:	f7ff ffce 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4903      	ldr	r1, [pc, #12]	@ (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	46020c00 	.word	0x46020c00
 8003d54:	0800bf84 	.word	0x0800bf84

08003d58 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003d5c:	f7ff ffba 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	@ (8003d7c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	46020c00 	.word	0x46020c00
 8003d7c:	0800bf84 	.word	0x0800bf84

08003d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d88:	4b3e      	ldr	r3, [pc, #248]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d96:	f7fe fd33 	bl	8002800 <HAL_PWREx_GetVoltageRange>
 8003d9a:	6178      	str	r0, [r7, #20]
 8003d9c:	e019      	b.n	8003dd2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	4b39      	ldr	r3, [pc, #228]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da4:	4a37      	ldr	r2, [pc, #220]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003da6:	f043 0304 	orr.w	r3, r3, #4
 8003daa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003dae:	4b35      	ldr	r3, [pc, #212]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003dbc:	f7fe fd20 	bl	8002800 <HAL_PWREx_GetVoltageRange>
 8003dc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b30      	ldr	r3, [pc, #192]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8003e84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003dca:	f023 0304 	bic.w	r3, r3, #4
 8003dce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dd8:	d003      	beq.n	8003de2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003de0:	d109      	bne.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003de8:	d202      	bcs.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003dea:	2301      	movs	r3, #1
 8003dec:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003dee:	e033      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003df4:	e030      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dfc:	d208      	bcs.n	8003e10 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e04:	d102      	bne.n	8003e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003e06:	2303      	movs	r3, #3
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	e025      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e035      	b.n	8003e7c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e16:	d90f      	bls.n	8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e24:	d902      	bls.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	e015      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	e012      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	e00f      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e3e:	d109      	bne.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e46:	d102      	bne.n	8003e4e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003e48:	2301      	movs	r3, #1
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e004      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003e4e:	2302      	movs	r3, #2
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	e001      	b.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003e54:	2301      	movs	r3, #1
 8003e56:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 020f 	bic.w	r2, r3, #15
 8003e60:	4909      	ldr	r1, [pc, #36]	@ (8003e88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003e68:	4b07      	ldr	r3, [pc, #28]	@ (8003e88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d001      	beq.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	46020c00 	.word	0x46020c00
 8003e88:	40022000 	.word	0x40022000

08003e8c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e90:	b0b8      	sub	sp, #224	@ 0xe0
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f002 0401 	and.w	r4, r2, #1
 8003eb0:	2500      	movs	r5, #0
 8003eb2:	ea54 0305 	orrs.w	r3, r4, r5
 8003eb6:	d00b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003eb8:	4bca      	ldr	r3, [pc, #808]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ebe:	f023 0103 	bic.w	r1, r3, #3
 8003ec2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec8:	4ac6      	ldr	r2, [pc, #792]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f002 0802 	and.w	r8, r2, #2
 8003edc:	f04f 0900 	mov.w	r9, #0
 8003ee0:	ea58 0309 	orrs.w	r3, r8, r9
 8003ee4:	d00b      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003ee6:	4bbf      	ldr	r3, [pc, #764]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003eec:	f023 010c 	bic.w	r1, r3, #12
 8003ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef6:	4abb      	ldr	r2, [pc, #748]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f002 0a04 	and.w	sl, r2, #4
 8003f0a:	f04f 0b00 	mov.w	fp, #0
 8003f0e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f12:	d00b      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003f14:	4bb3      	ldr	r3, [pc, #716]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f1a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003f1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	4aaf      	ldr	r2, [pc, #700]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f002 0308 	and.w	r3, r2, #8
 8003f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003f4c:	4ba5      	ldr	r3, [pc, #660]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	4aa1      	ldr	r2, [pc, #644]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f002 0310 	and.w	r3, r2, #16
 8003f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	d00b      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003f84:	4b97      	ldr	r3, [pc, #604]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f94:	4a93      	ldr	r2, [pc, #588]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003f96:	430b      	orrs	r3, r1
 8003f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f002 0320 	and.w	r3, r2, #32
 8003fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fac:	2300      	movs	r3, #0
 8003fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003fbc:	4b89      	ldr	r3, [pc, #548]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fc2:	f023 0107 	bic.w	r1, r3, #7
 8003fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fcc:	4a85      	ldr	r2, [pc, #532]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	d00b      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003ff4:	4b7b      	ldr	r3, [pc, #492]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ffa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003ffe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004004:	4a77      	ldr	r2, [pc, #476]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004006:	430b      	orrs	r3, r1
 8004008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800400c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004018:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800401c:	2300      	movs	r3, #0
 800401e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004022:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004026:	460b      	mov	r3, r1
 8004028:	4313      	orrs	r3, r2
 800402a:	d00b      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800402c:	4b6d      	ldr	r3, [pc, #436]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800402e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800403a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800403c:	4a69      	ldr	r2, [pc, #420]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800403e:	430b      	orrs	r3, r1
 8004040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004044:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800405a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800405e:	460b      	mov	r3, r1
 8004060:	4313      	orrs	r3, r2
 8004062:	d00b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004064:	4b5f      	ldr	r3, [pc, #380]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800406a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800406e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004074:	4a5b      	ldr	r2, [pc, #364]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004076:	430b      	orrs	r3, r1
 8004078:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800407c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004092:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	d00b      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800409c:	4b51      	ldr	r3, [pc, #324]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800409e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040a2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80040a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ac:	4a4d      	ldr	r2, [pc, #308]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040ae:	430b      	orrs	r3, r1
 80040b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80040c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d00b      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80040d4:	4b43      	ldr	r3, [pc, #268]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80040da:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80040de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e4:	4a3f      	ldr	r2, [pc, #252]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040e6:	430b      	orrs	r3, r1
 80040e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80040f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004102:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d00b      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800410c:	4b35      	ldr	r3, [pc, #212]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800410e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004112:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004116:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800411a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800411c:	4a31      	ldr	r2, [pc, #196]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800411e:	430b      	orrs	r3, r1
 8004120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004130:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004132:	2300      	movs	r3, #0
 8004134:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004136:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800413a:	460b      	mov	r3, r1
 800413c:	4313      	orrs	r3, r2
 800413e:	d00c      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004140:	4b28      	ldr	r3, [pc, #160]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004146:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800414a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800414e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004152:	4a24      	ldr	r2, [pc, #144]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004154:	430b      	orrs	r3, r1
 8004156:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800415a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004166:	673b      	str	r3, [r7, #112]	@ 0x70
 8004168:	2300      	movs	r3, #0
 800416a:	677b      	str	r3, [r7, #116]	@ 0x74
 800416c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d04f      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	2b80      	cmp	r3, #128	@ 0x80
 8004180:	d02d      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004182:	2b80      	cmp	r3, #128	@ 0x80
 8004184:	d827      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004186:	2b60      	cmp	r3, #96	@ 0x60
 8004188:	d02e      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800418a:	2b60      	cmp	r3, #96	@ 0x60
 800418c:	d823      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800418e:	2b40      	cmp	r3, #64	@ 0x40
 8004190:	d006      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d81f      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x322>
 800419a:	2b20      	cmp	r3, #32
 800419c:	d011      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800419e:	e01a      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041a0:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	4a0f      	ldr	r2, [pc, #60]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80041ac:	e01d      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041b2:	3308      	adds	r3, #8
 80041b4:	4618      	mov	r0, r3
 80041b6:	f002 f9d1 	bl	800655c <RCCEx_PLL2_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80041c0:	e013      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041c6:	332c      	adds	r3, #44	@ 0x2c
 80041c8:	4618      	mov	r0, r3
 80041ca:	f002 fa5f 	bl	800668c <RCCEx_PLL3_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80041d4:	e009      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80041dc:	e005      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80041de:	bf00      	nop
 80041e0:	e003      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80041e2:	bf00      	nop
 80041e4:	46020c00 	.word	0x46020c00
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80041f2:	4bb6      	ldr	r3, [pc, #728]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80041f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041f8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80041fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	4ab1      	ldr	r2, [pc, #708]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004206:	430b      	orrs	r3, r1
 8004208:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004212:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004222:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004224:	2300      	movs	r3, #0
 8004226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004228:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d053      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004232:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423e:	d033      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004244:	d82c      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800424a:	d02f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 800424c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004250:	d826      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004256:	d008      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800425c:	d820      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004266:	d011      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004268:	e01a      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800426a:	4b98      	ldr	r3, [pc, #608]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	4a97      	ldr	r2, [pc, #604]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004274:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004276:	e01a      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800427c:	3308      	adds	r3, #8
 800427e:	4618      	mov	r0, r3
 8004280:	f002 f96c 	bl	800655c <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800428a:	e010      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800428c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004290:	332c      	adds	r3, #44	@ 0x2c
 8004292:	4618      	mov	r0, r3
 8004294:	f002 f9fa 	bl	800668c <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800429e:	e006      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80042a6:	e002      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80042ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10d      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80042b6:	4b85      	ldr	r3, [pc, #532]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80042b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80042c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c8:	4a80      	ldr	r2, [pc, #512]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80042ca:	430b      	orrs	r3, r1
 80042cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80042d6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80042da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80042e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80042e8:	2300      	movs	r3, #0
 80042ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80042ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042f0:	460b      	mov	r3, r1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	d046      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80042f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004302:	d028      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004304:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004308:	d821      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800430a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800430e:	d022      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004314:	d81b      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004316:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800431a:	d01c      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800431c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004320:	d815      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004326:	d008      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432c:	d80f      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d011      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004336:	d00e      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004338:	e009      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800433a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800433e:	3308      	adds	r3, #8
 8004340:	4618      	mov	r0, r3
 8004342:	f002 f90b 	bl	800655c <RCCEx_PLL2_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800434c:	e004      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004354:	e000      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004358:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004360:	4b5a      	ldr	r3, [pc, #360]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004366:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800436a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800436e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004372:	4a56      	ldr	r2, [pc, #344]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004374:	430b      	orrs	r3, r1
 8004376:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004380:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004390:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004392:	2300      	movs	r3, #0
 8004394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004396:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800439a:	460b      	mov	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	d03f      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80043a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d81e      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80043ac:	a201      	add	r2, pc, #4	@ (adr r2, 80043b4 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043f3 	.word	0x080043f3
 80043b8:	080043c9 	.word	0x080043c9
 80043bc:	080043d7 	.word	0x080043d7
 80043c0:	080043f3 	.word	0x080043f3
 80043c4:	080043f3 	.word	0x080043f3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043c8:	4b40      	ldr	r3, [pc, #256]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80043ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043cc:	4a3f      	ldr	r2, [pc, #252]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80043ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80043d4:	e00e      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043da:	332c      	adds	r3, #44	@ 0x2c
 80043dc:	4618      	mov	r0, r3
 80043de:	f002 f955 	bl	800668c <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80043e8:	e004      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80043f0:	e000      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80043f2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80043f4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10d      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80043fc:	4b33      	ldr	r3, [pc, #204]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80043fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004402:	f023 0107 	bic.w	r1, r3, #7
 8004406:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	4a2f      	ldr	r2, [pc, #188]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004410:	430b      	orrs	r3, r1
 8004412:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800441c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800442c:	653b      	str	r3, [r7, #80]	@ 0x50
 800442e:	2300      	movs	r3, #0
 8004430:	657b      	str	r3, [r7, #84]	@ 0x54
 8004432:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d04d      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800443c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004444:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004448:	d028      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x610>
 800444a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800444e:	d821      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004450:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004454:	d024      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004456:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800445a:	d81b      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800445c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004460:	d00e      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004462:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004466:	d815      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01b      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004470:	d110      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004472:	4b16      	ldr	r3, [pc, #88]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800447e:	e012      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004484:	332c      	adds	r3, #44	@ 0x2c
 8004486:	4618      	mov	r0, r3
 8004488:	f002 f900 	bl	800668c <RCCEx_PLL3_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004492:	e008      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800449a:	e004      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800449c:	bf00      	nop
 800449e:	e002      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80044a0:	bf00      	nop
 80044a2:	e000      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80044a4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80044a6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d110      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80044ae:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80044b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80044b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044c0:	4a02      	ldr	r2, [pc, #8]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80044c2:	430b      	orrs	r3, r1
 80044c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044c8:	e006      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80044ca:	bf00      	nop
 80044cc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80044d4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e6:	2300      	movs	r3, #0
 80044e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f000 80b5 	beq.w	8004660 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fc:	4b9d      	ldr	r3, [pc, #628]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80044fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d113      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	4b9a      	ldr	r3, [pc, #616]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800450c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004510:	4a98      	ldr	r2, [pc, #608]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004512:	f043 0304 	orr.w	r3, r3, #4
 8004516:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800451a:	4b96      	ldr	r3, [pc, #600]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004528:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004532:	4b91      	ldr	r3, [pc, #580]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	4a90      	ldr	r2, [pc, #576]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800453e:	f7fd faa5 	bl	8001a8c <HAL_GetTick>
 8004542:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004546:	e00b      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7fd faa0 	bl	8001a8c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d903      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800455e:	e005      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004560:	4b85      	ldr	r3, [pc, #532]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ed      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800456c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004570:	2b00      	cmp	r3, #0
 8004572:	d165      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004574:	4b7f      	ldr	r3, [pc, #508]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800457a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004586:	2b00      	cmp	r3, #0
 8004588:	d023      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800458a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800458e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004596:	4293      	cmp	r3, r2
 8004598:	d01b      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800459a:	4b76      	ldr	r3, [pc, #472]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800459c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045a8:	4b72      	ldr	r3, [pc, #456]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ae:	4a71      	ldr	r2, [pc, #452]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045b8:	4b6e      	ldr	r3, [pc, #440]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045be:	4a6d      	ldr	r2, [pc, #436]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d019      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045de:	f7fd fa55 	bl	8001a8c <HAL_GetTick>
 80045e2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e6:	e00d      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fd fa50 	bl	8001a8c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045f2:	1ad2      	subs	r2, r2, r3
 80045f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d903      	bls.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8004602:	e006      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004604:	4b5b      	ldr	r3, [pc, #364]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ea      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8004612:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10d      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800461a:	4b56      	ldr	r3, [pc, #344]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800461c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004620:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004628:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800462c:	4a51      	ldr	r2, [pc, #324]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800462e:	430b      	orrs	r3, r1
 8004630:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004634:	e008      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004636:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800463a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800463e:	e003      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004644:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004648:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800464c:	2b01      	cmp	r3, #1
 800464e:	d107      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004650:	4b48      	ldr	r3, [pc, #288]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004656:	4a47      	ldr	r2, [pc, #284]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800466c:	643b      	str	r3, [r7, #64]	@ 0x40
 800466e:	2300      	movs	r3, #0
 8004670:	647b      	str	r3, [r7, #68]	@ 0x44
 8004672:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004676:	460b      	mov	r3, r1
 8004678:	4313      	orrs	r3, r2
 800467a:	d042      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800467c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004684:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004688:	d022      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800468a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800468e:	d81b      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004690:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004694:	d011      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800469a:	d815      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d019      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80046a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046a4:	d110      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046aa:	3308      	adds	r3, #8
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 ff55 	bl	800655c <RCCEx_PLL2_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80046b8:	e00d      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	4a2d      	ldr	r2, [pc, #180]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80046c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046c4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80046c6:	e006      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80046ce:	e002      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80046d0:	bf00      	nop
 80046d2:	e000      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80046d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80046d6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10d      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80046de:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80046e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046e4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80046e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046f0:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80046f2:	430b      	orrs	r3, r1
 80046f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046f8:	e003      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80046fe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004710:	2300      	movs	r3, #0
 8004712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004714:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004718:	460b      	mov	r3, r1
 800471a:	4313      	orrs	r3, r2
 800471c:	d032      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800471e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800472a:	d00b      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800472c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004730:	d804      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473a:	d007      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004742:	e004      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800474c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800474e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004752:	2b00      	cmp	r3, #0
 8004754:	d112      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004756:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004758:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800475c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004764:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004768:	4a02      	ldr	r2, [pc, #8]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800476a:	430b      	orrs	r3, r1
 800476c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004770:	e008      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8004772:	bf00      	nop
 8004774:	46020c00 	.word	0x46020c00
 8004778:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004780:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004790:	633b      	str	r3, [r7, #48]	@ 0x30
 8004792:	2300      	movs	r3, #0
 8004794:	637b      	str	r3, [r7, #52]	@ 0x34
 8004796:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800479a:	460b      	mov	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	d019      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80047a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ac:	d105      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047ae:	4b88      	ldr	r3, [pc, #544]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	4a87      	ldr	r2, [pc, #540]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80047ba:	4b85      	ldr	r3, [pc, #532]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80047bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80047c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047cc:	4a80      	ldr	r2, [pc, #512]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80047d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047e2:	2300      	movs	r3, #0
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047ea:	460b      	mov	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	d00c      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80047f0:	4b77      	ldr	r3, [pc, #476]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80047f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004802:	4973      	ldr	r1, [pc, #460]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800480a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
 800481c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d00c      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004826:	4b6a      	ldr	r3, [pc, #424]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800482c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004834:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004838:	4965      	ldr	r1, [pc, #404]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004856:	460b      	mov	r3, r1
 8004858:	4313      	orrs	r3, r2
 800485a:	d00c      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800485c:	4b5c      	ldr	r3, [pc, #368]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800485e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004862:	f023 0218 	bic.w	r2, r3, #24
 8004866:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800486a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800486e:	4958      	ldr	r1, [pc, #352]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004876:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800488c:	460b      	mov	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	d032      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004892:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800489a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800489e:	d105      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a0:	4b4b      	ldr	r3, [pc, #300]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	4a4a      	ldr	r2, [pc, #296]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048aa:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80048ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048b8:	d108      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048be:	3308      	adds	r3, #8
 80048c0:	4618      	mov	r0, r3
 80048c2:	f001 fe4b 	bl	800655c <RCCEx_PLL2_Config>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80048cc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80048d4:	4b3e      	ldr	r3, [pc, #248]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80048d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80048e6:	493a      	ldr	r1, [pc, #232]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80048ee:	e003      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80048f4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80048f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800490e:	460b      	mov	r3, r1
 8004910:	4313      	orrs	r3, r2
 8004912:	d03a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800491c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004920:	d00e      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004922:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004926:	d815      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d017      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800492c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004930:	d110      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004932:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800493c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800493e:	e00e      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004944:	3308      	adds	r3, #8
 8004946:	4618      	mov	r0, r3
 8004948:	f001 fe08 	bl	800655c <RCCEx_PLL2_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004952:	e004      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800495c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800495e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004966:	4b1a      	ldr	r3, [pc, #104]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800496c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004970:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004978:	4915      	ldr	r1, [pc, #84]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004980:	e003      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004986:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800498a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	2300      	movs	r3, #0
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d00c      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80049a6:	4b0a      	ldr	r3, [pc, #40]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80049a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049ac:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80049b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049b8:	4905      	ldr	r1, [pc, #20]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80049c0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	37e0      	adds	r7, #224	@ 0xe0
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ce:	bf00      	nop
 80049d0:	46020c00 	.word	0x46020c00

080049d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	@ 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80049dc:	4ba6      	ldr	r3, [pc, #664]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80049de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80049e6:	4ba4      	ldr	r3, [pc, #656]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80049f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	3301      	adds	r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80049fe:	4b9e      	ldr	r3, [pc, #632]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004a0a:	4b9b      	ldr	r3, [pc, #620]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d062      	beq.n	8004af2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	f200 8081 	bhi.w	8004b36 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d024      	beq.n	8004a84 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d17a      	bne.n	8004b36 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b89      	ldr	r3, [pc, #548]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a66:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004c80 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a82:	e08f      	b.n	8004ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004a84:	4b7c      	ldr	r3, [pc, #496]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004a90:	4b79      	ldr	r3, [pc, #484]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	0f1b      	lsrs	r3, r3, #28
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	e006      	b.n	8004aaa <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8004a9c:	4b76      	ldr	r3, [pc, #472]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	0f1b      	lsrs	r3, r3, #28
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	4a76      	ldr	r2, [pc, #472]	@ (8004c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab0:	ee07 3a90 	vmov	s15, r3
 8004ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ad4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004c80 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af0:	e058      	b.n	8004ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b04:	4b5c      	ldr	r3, [pc, #368]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0c:	ee07 3a90 	vmov	s15, r3
 8004b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b14:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b18:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004c80 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b34:	e036      	b.n	8004ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004b36:	4b50      	ldr	r3, [pc, #320]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8004b42:	4b4d      	ldr	r3, [pc, #308]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0f1b      	lsrs	r3, r3, #28
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	e006      	b.n	8004b5c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8004b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b54:	041b      	lsls	r3, r3, #16
 8004b56:	0f1b      	lsrs	r3, r3, #28
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	4a49      	ldr	r2, [pc, #292]	@ (8004c84 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b86:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004c80 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ba2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004ba4:	4b34      	ldr	r3, [pc, #208]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d017      	beq.n	8004be0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004bb0:	4b31      	ldr	r3, [pc, #196]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb4:	0a5b      	lsrs	r3, r3, #9
 8004bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004bc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd6:	ee17 2a90 	vmov	r2, s15
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e002      	b.n	8004be6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004be6:	4b24      	ldr	r3, [pc, #144]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d017      	beq.n	8004c22 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004bf2:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004c04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c08:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c18:	ee17 2a90 	vmov	r2, s15
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	605a      	str	r2, [r3, #4]
 8004c20:	e002      	b.n	8004c28 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004c28:	4b13      	ldr	r3, [pc, #76]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d017      	beq.n	8004c64 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c34:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c38:	0e1b      	lsrs	r3, r3, #24
 8004c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5a:	ee17 2a90 	vmov	r2, s15
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004c62:	e002      	b.n	8004c6a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	609a      	str	r2, [r3, #8]
}
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	@ 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	46020c00 	.word	0x46020c00
 8004c7c:	4b742400 	.word	0x4b742400
 8004c80:	46000000 	.word	0x46000000
 8004c84:	0800bf8c 	.word	0x0800bf8c

08004c88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	@ 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004c90:	4ba6      	ldr	r3, [pc, #664]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c98:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004c9a:	4ba4      	ldr	r3, [pc, #656]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004ca4:	4ba1      	ldr	r3, [pc, #644]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	0a1b      	lsrs	r3, r3, #8
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	3301      	adds	r3, #1
 8004cb0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004cb2:	4b9e      	ldr	r3, [pc, #632]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004cbe:	4b9b      	ldr	r3, [pc, #620]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	08db      	lsrs	r3, r3, #3
 8004cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d062      	beq.n	8004da6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	f200 8081 	bhi.w	8004dea <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d024      	beq.n	8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d17a      	bne.n	8004dea <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d06:	4b89      	ldr	r3, [pc, #548]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d1a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d36:	e08f      	b.n	8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004d38:	4b7c      	ldr	r3, [pc, #496]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004d44:	4b79      	ldr	r3, [pc, #484]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	0f1b      	lsrs	r3, r3, #28
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	e006      	b.n	8004d5e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8004d50:	4b76      	ldr	r3, [pc, #472]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	0f1b      	lsrs	r3, r3, #28
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	4a76      	ldr	r2, [pc, #472]	@ (8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d88:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004da4:	e058      	b.n	8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dcc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004de8:	e036      	b.n	8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004dea:	4b50      	ldr	r3, [pc, #320]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8004df6:	4b4d      	ldr	r3, [pc, #308]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0f1b      	lsrs	r3, r3, #28
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	e006      	b.n	8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8004e02:	4b4a      	ldr	r3, [pc, #296]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	0f1b      	lsrs	r3, r3, #28
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	4a49      	ldr	r2, [pc, #292]	@ (8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	ee07 3a90 	vmov	s15, r3
 8004e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e3a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e56:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004e58:	4b34      	ldr	r3, [pc, #208]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d017      	beq.n	8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004e64:	4b31      	ldr	r3, [pc, #196]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e68:	0a5b      	lsrs	r3, r3, #9
 8004e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004e76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8a:	ee17 2a90 	vmov	r2, s15
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e002      	b.n	8004e9a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004e9a:	4b24      	ldr	r3, [pc, #144]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d017      	beq.n	8004ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ea6:	4b21      	ldr	r3, [pc, #132]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eaa:	0c1b      	lsrs	r3, r3, #16
 8004eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ecc:	ee17 2a90 	vmov	r2, s15
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	605a      	str	r2, [r3, #4]
 8004ed4:	e002      	b.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004edc:	4b13      	ldr	r3, [pc, #76]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d017      	beq.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ee8:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004efe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f0e:	ee17 2a90 	vmov	r2, s15
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f16:	e002      	b.n	8004f1e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]
}
 8004f1e:	bf00      	nop
 8004f20:	3724      	adds	r7, #36	@ 0x24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	46020c00 	.word	0x46020c00
 8004f30:	4b742400 	.word	0x4b742400
 8004f34:	46000000 	.word	0x46000000
 8004f38:	0800bf8c 	.word	0x0800bf8c

08004f3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	@ 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004f44:	4ba6      	ldr	r3, [pc, #664]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004f4e:	4ba4      	ldr	r3, [pc, #656]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004f58:	4ba1      	ldr	r3, [pc, #644]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5c:	0a1b      	lsrs	r3, r3, #8
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	3301      	adds	r3, #1
 8004f64:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004f66:	4b9e      	ldr	r3, [pc, #632]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	091b      	lsrs	r3, r3, #4
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004f72:	4b9b      	ldr	r3, [pc, #620]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f76:	08db      	lsrs	r3, r3, #3
 8004f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d062      	beq.n	800505a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	f200 8081 	bhi.w	800509e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d024      	beq.n	8004fec <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d17a      	bne.n	800509e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80051e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b89      	ldr	r3, [pc, #548]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fce:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004fea:	e08f      	b.n	800510c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004fec:	4b7c      	ldr	r3, [pc, #496]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004ff8:	4b79      	ldr	r3, [pc, #484]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	0f1b      	lsrs	r3, r3, #28
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	e006      	b.n	8005012 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005004:	4b76      	ldr	r3, [pc, #472]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005006:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	0f1b      	lsrs	r3, r3, #28
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	4a76      	ldr	r2, [pc, #472]	@ (80051ec <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005038:	ed97 6a02 	vldr	s12, [r7, #8]
 800503c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800504c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005054:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005058:	e058      	b.n	800510c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	ee07 3a90 	vmov	s15, r3
 8005060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005064:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80051e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506c:	4b5c      	ldr	r3, [pc, #368]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800506e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005074:	ee07 3a90 	vmov	s15, r3
 8005078:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800507c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005080:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005084:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005088:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800508c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005090:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005098:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800509c:	e036      	b.n	800510c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800509e:	4b50      	ldr	r3, [pc, #320]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80050aa:	4b4d      	ldr	r3, [pc, #308]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	0f1b      	lsrs	r3, r3, #28
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	e006      	b.n	80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80050b6:	4b4a      	ldr	r3, [pc, #296]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80050b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050bc:	041b      	lsls	r3, r3, #16
 80050be:	0f1b      	lsrs	r3, r3, #28
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	4a49      	ldr	r2, [pc, #292]	@ (80051ec <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80050c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800510a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800510c:	4b34      	ldr	r3, [pc, #208]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800510e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d017      	beq.n	8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005118:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800511a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511c:	0a5b      	lsrs	r3, r3, #9
 800511e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800512a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800512e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005132:	edd7 6a07 	vldr	s13, [r7, #28]
 8005136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513e:	ee17 2a90 	vmov	r2, s15
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e002      	b.n	800514e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800514e:	4b24      	ldr	r3, [pc, #144]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d017      	beq.n	800518a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800515a:	4b21      	ldr	r3, [pc, #132]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800515c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005164:	ee07 3a90 	vmov	s15, r3
 8005168:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800516c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005170:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005174:	edd7 6a07 	vldr	s13, [r7, #28]
 8005178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800517c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005180:	ee17 2a90 	vmov	r2, s15
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	605a      	str	r2, [r3, #4]
 8005188:	e002      	b.n	8005190 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005190:	4b13      	ldr	r3, [pc, #76]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d017      	beq.n	80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800519c:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800519e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a0:	0e1b      	lsrs	r3, r3, #24
 80051a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80051ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80051b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051c2:	ee17 2a90 	vmov	r2, s15
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051ca:	e002      	b.n	80051d2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
}
 80051d2:	bf00      	nop
 80051d4:	3724      	adds	r7, #36	@ 0x24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	46020c00 	.word	0x46020c00
 80051e4:	4b742400 	.word	0x4b742400
 80051e8:	46000000 	.word	0x46000000
 80051ec:	0800bf8c 	.word	0x0800bf8c

080051f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08e      	sub	sp, #56	@ 0x38
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80051fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051fe:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005202:	430b      	orrs	r3, r1
 8005204:	d145      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005206:	4baa      	ldr	r3, [pc, #680]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800520c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005210:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005212:	4ba7      	ldr	r3, [pc, #668]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b02      	cmp	r3, #2
 800521e:	d108      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005226:	d104      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005228:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800522c:	637b      	str	r3, [r7, #52]	@ 0x34
 800522e:	f001 b987 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005232:	4b9f      	ldr	r3, [pc, #636]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800523c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005240:	d114      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005248:	d110      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800524a:	4b99      	ldr	r3, [pc, #612]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800524c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005258:	d103      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800525a:	23fa      	movs	r3, #250	@ 0xfa
 800525c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800525e:	f001 b96f 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005262:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005266:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005268:	f001 b96a 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800526c:	4b90      	ldr	r3, [pc, #576]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005278:	d107      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005280:	d103      	bne.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005282:	4b8c      	ldr	r3, [pc, #560]	@ (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
 8005286:	f001 b95b 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
 800528e:	f001 b957 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005296:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800529a:	430b      	orrs	r3, r1
 800529c:	d151      	bne.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800529e:	4b84      	ldr	r3, [pc, #528]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80052a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052a4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80052a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	2b80      	cmp	r3, #128	@ 0x80
 80052ae:	d035      	beq.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	2b80      	cmp	r3, #128	@ 0x80
 80052b4:	d841      	bhi.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	2b60      	cmp	r3, #96	@ 0x60
 80052ba:	d02a      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	2b60      	cmp	r3, #96	@ 0x60
 80052c0:	d83b      	bhi.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	2b40      	cmp	r3, #64	@ 0x40
 80052c6:	d009      	beq.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	2b40      	cmp	r3, #64	@ 0x40
 80052cc:	d835      	bhi.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00c      	beq.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d012      	beq.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80052da:	e02e      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fb77 	bl	80049d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052ea:	f001 b929 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ee:	f107 0318 	add.w	r3, r7, #24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fcc8 	bl	8004c88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052fc:	f001 b920 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005300:	f107 030c 	add.w	r3, r7, #12
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fe19 	bl	8004f3c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800530e:	f001 b917 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005312:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005316:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005318:	f001 b912 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800531c:	4b64      	ldr	r3, [pc, #400]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005328:	d103      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800532a:	4b63      	ldr	r3, [pc, #396]	@ (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800532c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800532e:	f001 b907 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005336:	f001 b903 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800533e:	f001 b8ff 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005346:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800534a:	430b      	orrs	r3, r1
 800534c:	d158      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800534e:	4b58      	ldr	r3, [pc, #352]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005350:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005354:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005358:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005360:	d03b      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005368:	d846      	bhi.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005370:	d02e      	beq.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005378:	d83e      	bhi.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005380:	d00b      	beq.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005388:	d836      	bhi.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00d      	beq.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005396:	d012      	beq.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005398:	e02e      	b.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800539a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fb18 	bl	80049d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053a8:	f001 b8ca 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ac:	f107 0318 	add.w	r3, r7, #24
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fc69 	bl	8004c88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053ba:	f001 b8c1 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053be:	f107 030c 	add.w	r3, r7, #12
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fdba 	bl	8004f3c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053cc:	f001 b8b8 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80053d0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053d6:	f001 b8b3 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053da:	4b35      	ldr	r3, [pc, #212]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e6:	d103      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80053e8:	4b33      	ldr	r3, [pc, #204]	@ (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80053ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80053ec:	f001 b8a8 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053f4:	f001 b8a4 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053fc:	f001 b8a0 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005404:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005408:	430b      	orrs	r3, r1
 800540a:	d16e      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800540c:	4b28      	ldr	r3, [pc, #160]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800540e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005412:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005416:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800541e:	d034      	beq.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005422:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005426:	d85c      	bhi.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800542e:	d00b      	beq.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005436:	d854      	bhi.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005444:	d009      	beq.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005446:	e04c      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fac1 	bl	80049d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005456:	f001 b873 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800545a:	f107 0318 	add.w	r3, r7, #24
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fc12 	bl	8004c88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005468:	f001 b86a 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800546c:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005478:	d103      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800547a:	4b10      	ldr	r3, [pc, #64]	@ (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800547c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800547e:	f001 b85f 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005486:	f001 b85b 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800548a:	4b09      	ldr	r3, [pc, #36]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b20      	cmp	r3, #32
 8005494:	d121      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005496:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00e      	beq.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80054a2:	4b03      	ldr	r3, [pc, #12]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	0e1b      	lsrs	r3, r3, #24
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	e00f      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80054ae:	bf00      	nop
 80054b0:	46020c00 	.word	0x46020c00
 80054b4:	0007a120 	.word	0x0007a120
 80054b8:	00f42400 	.word	0x00f42400
 80054bc:	02dc6c00 	.word	0x02dc6c00
 80054c0:	4ba7      	ldr	r3, [pc, #668]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80054c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	0e1b      	lsrs	r3, r3, #24
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	4aa5      	ldr	r2, [pc, #660]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80054d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054d6:	f001 b833 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054de:	f001 b82f 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054e6:	f001 b82b 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80054ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ee:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80054f2:	430b      	orrs	r3, r1
 80054f4:	d17f      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80054f6:	4b9a      	ldr	r3, [pc, #616]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80054f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005500:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	2b00      	cmp	r3, #0
 8005506:	d165      	bne.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005508:	4b95      	ldr	r3, [pc, #596]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800550a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800550e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005512:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800551a:	d034      	beq.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800551c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005522:	d853      	bhi.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800552a:	d00b      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005532:	d84b      	bhi.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	2b00      	cmp	r3, #0
 8005538:	d016      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005540:	d009      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005542:	e043      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fa43 	bl	80049d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005550:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005552:	f000 bff5 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005556:	f107 0318 	add.w	r3, r7, #24
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fb94 	bl	8004c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005564:	f000 bfec 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005568:	4b7d      	ldr	r3, [pc, #500]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005574:	d103      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8005576:	4b7c      	ldr	r3, [pc, #496]	@ (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005578:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800557a:	f000 bfe1 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005582:	f000 bfdd 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005586:	4b76      	ldr	r3, [pc, #472]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b20      	cmp	r3, #32
 8005590:	d118      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005592:	4b73      	ldr	r3, [pc, #460]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800559e:	4b70      	ldr	r3, [pc, #448]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0e1b      	lsrs	r3, r3, #24
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80055aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80055ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055b0:	041b      	lsls	r3, r3, #16
 80055b2:	0e1b      	lsrs	r3, r3, #24
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80055ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055be:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80055c0:	f000 bfbe 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80055c8:	f000 bfba 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80055d0:	f000 bfb6 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055da:	d108      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff f9f7 	bl	80049d4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ea:	f000 bfa9 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f2:	f000 bfa5 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80055f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055fa:	1e51      	subs	r1, r2, #1
 80055fc:	430b      	orrs	r3, r1
 80055fe:	d136      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005600:	4b57      	ldr	r3, [pc, #348]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005612:	f7fe fb8d 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8005616:	6378      	str	r0, [r7, #52]	@ 0x34
 8005618:	f000 bf92 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	2b01      	cmp	r3, #1
 8005620:	d104      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005622:	f7fe fa55 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8005626:	6378      	str	r0, [r7, #52]	@ 0x34
 8005628:	f000 bf8a 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800562c:	4b4c      	ldr	r3, [pc, #304]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005638:	d106      	bne.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	2b02      	cmp	r3, #2
 800563e:	d103      	bne.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8005640:	4b4a      	ldr	r3, [pc, #296]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005642:	637b      	str	r3, [r7, #52]	@ 0x34
 8005644:	f000 bf7c 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005648:	4b45      	ldr	r3, [pc, #276]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800564a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b02      	cmp	r3, #2
 8005654:	d107      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	2b03      	cmp	r3, #3
 800565a:	d104      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800565c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005660:	637b      	str	r3, [r7, #52]	@ 0x34
 8005662:	f000 bf6d 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	637b      	str	r3, [r7, #52]	@ 0x34
 800566a:	f000 bf69 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800566e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005672:	1e91      	subs	r1, r2, #2
 8005674:	430b      	orrs	r3, r1
 8005676:	d136      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005678:	4b39      	ldr	r3, [pc, #228]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800567a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800567e:	f003 030c 	and.w	r3, r3, #12
 8005682:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800568a:	f7fe fb3d 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 800568e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005690:	f000 bf56 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	2b04      	cmp	r3, #4
 8005698:	d104      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800569a:	f7fe fa19 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 800569e:	6378      	str	r0, [r7, #52]	@ 0x34
 80056a0:	f000 bf4e 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80056a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b0:	d106      	bne.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d103      	bne.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80056b8:	4b2c      	ldr	r3, [pc, #176]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80056ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80056bc:	f000 bf40 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80056c0:	4b27      	ldr	r3, [pc, #156]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80056c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d107      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	2b0c      	cmp	r3, #12
 80056d2:	d104      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80056d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80056da:	f000 bf31 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e2:	f000 bf2d 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80056e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ea:	1f11      	subs	r1, r2, #4
 80056ec:	430b      	orrs	r3, r1
 80056ee:	d13f      	bne.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80056f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80056f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80056fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005702:	f7fe fb01 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8005706:	6378      	str	r0, [r7, #52]	@ 0x34
 8005708:	f000 bf1a 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	2b10      	cmp	r3, #16
 8005710:	d104      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005712:	f7fe f9dd 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8005716:	6378      	str	r0, [r7, #52]	@ 0x34
 8005718:	f000 bf12 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800571c:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005728:	d106      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	2b20      	cmp	r3, #32
 800572e:	d103      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8005730:	4b0e      	ldr	r3, [pc, #56]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005732:	637b      	str	r3, [r7, #52]	@ 0x34
 8005734:	f000 bf04 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005738:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800573a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b02      	cmp	r3, #2
 8005744:	d107      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	2b30      	cmp	r3, #48	@ 0x30
 800574a:	d104      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800574c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005750:	637b      	str	r3, [r7, #52]	@ 0x34
 8005752:	f000 bef5 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	637b      	str	r3, [r7, #52]	@ 0x34
 800575a:	f000 bef1 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800575e:	bf00      	nop
 8005760:	46020c00 	.word	0x46020c00
 8005764:	0800bf8c 	.word	0x0800bf8c
 8005768:	02dc6c00 	.word	0x02dc6c00
 800576c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005774:	f1a2 0108 	sub.w	r1, r2, #8
 8005778:	430b      	orrs	r3, r1
 800577a:	d136      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800577c:	4ba4      	ldr	r3, [pc, #656]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800577e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005782:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005786:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800578e:	f7fe fabb 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8005792:	6378      	str	r0, [r7, #52]	@ 0x34
 8005794:	f000 bed4 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	2b40      	cmp	r3, #64	@ 0x40
 800579c:	d104      	bne.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800579e:	f7fe f997 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 80057a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80057a4:	f000 becc 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80057a8:	4b99      	ldr	r3, [pc, #612]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b4:	d106      	bne.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	2b80      	cmp	r3, #128	@ 0x80
 80057ba:	d103      	bne.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80057bc:	4b95      	ldr	r3, [pc, #596]	@ (8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80057be:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c0:	f000 bebe 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80057c4:	4b92      	ldr	r3, [pc, #584]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80057c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d107      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80057d6:	d104      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 80057d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057de:	f000 beaf 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e6:	f000 beab 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80057ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ee:	f1a2 0110 	sub.w	r1, r2, #16
 80057f2:	430b      	orrs	r3, r1
 80057f4:	d139      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80057f6:	4b86      	ldr	r3, [pc, #536]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80057f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005800:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fe fa7e 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 800580c:	6378      	str	r0, [r7, #52]	@ 0x34
 800580e:	f000 be97 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005818:	d104      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800581a:	f7fe f959 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 800581e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005820:	f000 be8e 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005824:	4b7a      	ldr	r3, [pc, #488]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005830:	d107      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005838:	d103      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800583a:	4b76      	ldr	r3, [pc, #472]	@ (8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800583c:	637b      	str	r3, [r7, #52]	@ 0x34
 800583e:	f000 be7f 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005842:	4b73      	ldr	r3, [pc, #460]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b02      	cmp	r3, #2
 800584e:	d108      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005856:	d104      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8005858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
 800585e:	f000 be6f 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	637b      	str	r3, [r7, #52]	@ 0x34
 8005866:	f000 be6b 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800586a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800586e:	f1a2 0120 	sub.w	r1, r2, #32
 8005872:	430b      	orrs	r3, r1
 8005874:	d158      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005876:	4b66      	ldr	r3, [pc, #408]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005888:	f7fe fa66 	bl	8003d58 <HAL_RCC_GetPCLK3Freq>
 800588c:	6378      	str	r0, [r7, #52]	@ 0x34
 800588e:	f000 be57 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	2b01      	cmp	r3, #1
 8005896:	d104      	bne.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005898:	f7fe f91a 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 800589c:	6378      	str	r0, [r7, #52]	@ 0x34
 800589e:	f000 be4f 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80058a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ae:	d106      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d103      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80058b6:	4b57      	ldr	r3, [pc, #348]	@ (8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80058b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ba:	f000 be41 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80058be:	4b54      	ldr	r3, [pc, #336]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80058c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d107      	bne.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80058cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d104      	bne.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80058d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d8:	f000 be32 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80058dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d11b      	bne.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d118      	bne.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058ee:	4b48      	ldr	r3, [pc, #288]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80058fa:	4b45      	ldr	r3, [pc, #276]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	0e1b      	lsrs	r3, r3, #24
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005906:	4b42      	ldr	r3, [pc, #264]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	0e1b      	lsrs	r3, r3, #24
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	4a40      	ldr	r2, [pc, #256]	@ (8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591a:	637b      	str	r3, [r7, #52]	@ 0x34
 800591c:	f000 be10 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	637b      	str	r3, [r7, #52]	@ 0x34
 8005924:	f000 be0c 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800592c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005930:	430b      	orrs	r3, r1
 8005932:	d173      	bne.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005934:	4b36      	ldr	r3, [pc, #216]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800593a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800593e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005946:	d104      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005948:	f7fe f8c2 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 800594c:	6378      	str	r0, [r7, #52]	@ 0x34
 800594e:	f000 bdf7 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005958:	d108      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595a:	f107 0318 	add.w	r3, r7, #24
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f992 	bl	8004c88 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
 8005968:	f000 bdea 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800596c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005972:	f7fe f9af 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8005976:	6378      	str	r0, [r7, #52]	@ 0x34
 8005978:	f000 bde2 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005982:	d122      	bne.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005984:	4b22      	ldr	r3, [pc, #136]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b20      	cmp	r3, #32
 800598e:	d118      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005990:	4b1f      	ldr	r3, [pc, #124]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800599c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	0e1b      	lsrs	r3, r3, #24
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	e006      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80059a8:	4b19      	ldr	r3, [pc, #100]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80059aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	0e1b      	lsrs	r3, r3, #24
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	4a18      	ldr	r2, [pc, #96]	@ (8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80059b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80059be:	f000 bdbf 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c6:	f000 bdbb 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80059ca:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059d6:	d107      	bne.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80059d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059de:	d103      	bne.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80059e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80059e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e4:	f000 bdac 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80059e8:	4b09      	ldr	r3, [pc, #36]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059f4:	d107      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059fc:	d103      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80059fe:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a02:	f000 bd9d 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a0a:	f000 bd99 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005a0e:	bf00      	nop
 8005a10:	46020c00 	.word	0x46020c00
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	0800bf8c 	.word	0x0800bf8c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a20:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005a24:	430b      	orrs	r3, r1
 8005a26:	d158      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005a28:	4bad      	ldr	r3, [pc, #692]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005a2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d84b      	bhi.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a79 	.word	0x08005a79
 8005a44:	08005a55 	.word	0x08005a55
 8005a48:	08005a67 	.word	0x08005a67
 8005a4c:	08005a83 	.word	0x08005a83
 8005a50:	08005a8d 	.word	0x08005a8d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe ffbb 	bl	80049d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a62:	f000 bd6d 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a66:	f107 030c 	add.w	r3, r7, #12
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fa66 	bl	8004f3c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a74:	f000 bd64 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005a78:	f7fe f92c 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8005a7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a7e:	f000 bd5f 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005a82:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a88:	f000 bd5a 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a8c:	4b94      	ldr	r3, [pc, #592]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d118      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a98:	4b91      	ldr	r3, [pc, #580]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8005aa4:	4b8e      	ldr	r3, [pc, #568]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	0e1b      	lsrs	r3, r3, #24
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	e006      	b.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8005ab0:	4b8b      	ldr	r3, [pc, #556]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ab6:	041b      	lsls	r3, r3, #16
 8005ab8:	0e1b      	lsrs	r3, r3, #24
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	4a89      	ldr	r2, [pc, #548]	@ (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ac6:	f000 bd3b 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ace:	f000 bd37 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ad6:	f000 bd33 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ade:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	d167      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005ae6:	4b7e      	ldr	r3, [pc, #504]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005ae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005aec:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005af0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005af8:	d036      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8005afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b00:	d855      	bhi.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b08:	d029      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b10:	d84d      	bhi.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b18:	d013      	beq.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b20:	d845      	bhi.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d015      	beq.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b2e:	d13e      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe ff4d 	bl	80049d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b3e:	f000 bcff 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff f9f8 	bl	8004f3c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b50:	f000 bcf6 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005b54:	f7fe f8be 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8005b58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005b5a:	f000 bcf1 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005b5e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b64:	f000 bcec 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b68:	4b5d      	ldr	r3, [pc, #372]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d118      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b74:	4b5a      	ldr	r3, [pc, #360]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8005b80:	4b57      	ldr	r3, [pc, #348]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	0e1b      	lsrs	r3, r3, #24
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	e006      	b.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005b8c:	4b54      	ldr	r3, [pc, #336]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	0e1b      	lsrs	r3, r3, #24
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	4a52      	ldr	r2, [pc, #328]	@ (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ba2:	f000 bccd 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005baa:	f000 bcc9 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bb2:	f000 bcc5 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bba:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	d14c      	bne.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005bc2:	4b47      	ldr	r3, [pc, #284]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005bcc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005bd4:	f7fe f898 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8005bd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8005bda:	f000 bcb1 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be4:	d104      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005be6:	f7fd ff73 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8005bea:	6378      	str	r0, [r7, #52]	@ 0x34
 8005bec:	f000 bca8 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bfc:	d107      	bne.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c04:	d103      	bne.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8005c06:	4b38      	ldr	r3, [pc, #224]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c0a:	f000 bc99 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005c0e:	4b34      	ldr	r3, [pc, #208]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d11c      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c20:	d118      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c22:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	0e1b      	lsrs	r3, r3, #24
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	e006      	b.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8005c3a:	4b29      	ldr	r3, [pc, #164]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	0e1b      	lsrs	r3, r3, #24
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	4a26      	ldr	r2, [pc, #152]	@ (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c50:	f000 bc76 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c58:	f000 bc72 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c60:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8005c64:	430b      	orrs	r3, r1
 8005c66:	d152      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005c68:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c72:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d104      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005c7a:	f7fe f845 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8005c7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c80:	f000 bc5e 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8a:	d104      	bne.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005c8c:	f7fd ff20 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8005c90:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c92:	f000 bc55 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005c96:	4b12      	ldr	r3, [pc, #72]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005caa:	d103      	bne.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8005cac:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cb0:	f000 bc46 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d122      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cc6:	d11e      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005cc8:	4b05      	ldr	r3, [pc, #20]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8005cd4:	4b02      	ldr	r3, [pc, #8]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	0e1b      	lsrs	r3, r3, #24
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	e00c      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8005ce0:	46020c00 	.word	0x46020c00
 8005ce4:	0800bf8c 	.word	0x0800bf8c
 8005ce8:	00f42400 	.word	0x00f42400
 8005cec:	4ba1      	ldr	r3, [pc, #644]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cf2:	041b      	lsls	r3, r3, #16
 8005cf4:	0e1b      	lsrs	r3, r3, #24
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	4a9f      	ldr	r2, [pc, #636]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d02:	f000 bc1d 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0a:	f000 bc19 	b.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d12:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005d16:	430b      	orrs	r3, r1
 8005d18:	d151      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005d1a:	4b96      	ldr	r3, [pc, #600]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d20:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d2a:	d024      	beq.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d30:	d842      	bhi.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	2b80      	cmp	r3, #128	@ 0x80
 8005d36:	d00d      	beq.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	2b80      	cmp	r3, #128	@ 0x80
 8005d3c:	d83c      	bhi.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	2b40      	cmp	r3, #64	@ 0x40
 8005d48:	d011      	beq.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8005d4a:	e035      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005d4c:	f7fe f804 	bl	8003d58 <HAL_RCC_GetPCLK3Freq>
 8005d50:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005d52:	e3f5      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d54:	4b87      	ldr	r3, [pc, #540]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d60:	d102      	bne.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8005d62:	4b86      	ldr	r3, [pc, #536]	@ (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005d64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d66:	e3eb      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d6c:	e3e8      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005d6e:	f7fd feaf 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8005d72:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005d74:	e3e4      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d76:	4b7f      	ldr	r3, [pc, #508]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d117      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d82:	4b7c      	ldr	r3, [pc, #496]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8005d8e:	4b79      	ldr	r3, [pc, #484]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	0e1b      	lsrs	r3, r3, #24
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	e006      	b.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005d9a:	4b76      	ldr	r3, [pc, #472]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005da0:	041b      	lsls	r3, r3, #16
 8005da2:	0e1b      	lsrs	r3, r3, #24
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	4a73      	ldr	r2, [pc, #460]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005db0:	e3c6      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005db6:	e3c3      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dbc:	e3c0      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dc2:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	d147      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005dca:	4b6a      	ldr	r3, [pc, #424]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005dd4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d103      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005ddc:	f7fd ff94 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8005de0:	6378      	str	r0, [r7, #52]	@ 0x34
 8005de2:	e3ad      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dea:	d103      	bne.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005dec:	f7fd fe70 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8005df0:	6378      	str	r0, [r7, #52]	@ 0x34
 8005df2:	e3a5      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005df4:	4b5f      	ldr	r3, [pc, #380]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e00:	d106      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e08:	d102      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8005e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e0e:	e397      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005e10:	4b58      	ldr	r3, [pc, #352]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d11b      	bne.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005e22:	d117      	bne.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e24:	4b53      	ldr	r3, [pc, #332]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8005e30:	4b50      	ldr	r3, [pc, #320]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	0e1b      	lsrs	r3, r3, #24
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	e006      	b.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8005e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	0e1b      	lsrs	r3, r3, #24
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	4a4b      	ldr	r2, [pc, #300]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e52:	e375      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e58:	e372      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005e62:	430b      	orrs	r3, r1
 8005e64:	d164      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005e66:	4b43      	ldr	r3, [pc, #268]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e70:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d120      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e78:	4b3e      	ldr	r3, [pc, #248]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d117      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e84:	4b3b      	ldr	r3, [pc, #236]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005e90:	4b38      	ldr	r3, [pc, #224]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	0e1b      	lsrs	r3, r3, #24
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	e006      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005e9c:	4b35      	ldr	r3, [pc, #212]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	0e1b      	lsrs	r3, r3, #24
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	4a33      	ldr	r2, [pc, #204]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb2:	e345      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb8:	e342      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005eba:	4b2e      	ldr	r3, [pc, #184]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ec4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ec8:	d112      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ed2:	4b28      	ldr	r3, [pc, #160]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005edc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ee0:	d102      	bne.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8005ee2:	23fa      	movs	r3, #250	@ 0xfa
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ee6:	e32b      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005ee8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005eec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005eee:	e327      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005ef0:	4b20      	ldr	r3, [pc, #128]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005efc:	d106      	bne.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f04:	d102      	bne.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005f06:	4b1d      	ldr	r3, [pc, #116]	@ (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0a:	e319      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005f0c:	4b19      	ldr	r3, [pc, #100]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d107      	bne.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f20:	d103      	bne.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f28:	e30a      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2e:	e307      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f34:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	d16b      	bne.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f42:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d127      	bne.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005f4e:	4b09      	ldr	r3, [pc, #36]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d11e      	bne.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f5a:	4b06      	ldr	r3, [pc, #24]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00c      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8005f66:	4b03      	ldr	r3, [pc, #12]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	0e1b      	lsrs	r3, r3, #24
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	e00d      	b.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005f72:	bf00      	nop
 8005f74:	46020c00 	.word	0x46020c00
 8005f78:	0800bf8c 	.word	0x0800bf8c
 8005f7c:	00f42400 	.word	0x00f42400
 8005f80:	4b94      	ldr	r3, [pc, #592]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f86:	041b      	lsls	r3, r3, #16
 8005f88:	0e1b      	lsrs	r3, r3, #24
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	4a92      	ldr	r2, [pc, #584]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f96:	e2d3      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9c:	e2d0      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005f9e:	4b8d      	ldr	r3, [pc, #564]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fac:	d112      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb4:	d10e      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fb6:	4b87      	ldr	r3, [pc, #540]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fc4:	d102      	bne.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8005fc6:	23fa      	movs	r3, #250	@ 0xfa
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fca:	e2b9      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005fcc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005fd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fd2:	e2b5      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005fd4:	4b7f      	ldr	r3, [pc, #508]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fe8:	d102      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8005fea:	4b7c      	ldr	r3, [pc, #496]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fee:	e2a7      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005ff0:	4b78      	ldr	r3, [pc, #480]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d107      	bne.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006004:	d103      	bne.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800600a:	637b      	str	r3, [r7, #52]	@ 0x34
 800600c:	e298      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	637b      	str	r3, [r7, #52]	@ 0x34
 8006012:	e295      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006018:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800601c:	430b      	orrs	r3, r1
 800601e:	d147      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006020:	4b6c      	ldr	r3, [pc, #432]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006026:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800602a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006032:	f7fd fe69 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8006036:	6378      	str	r0, [r7, #52]	@ 0x34
 8006038:	e282      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800603a:	4b66      	ldr	r3, [pc, #408]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800603c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006044:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006048:	d112      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006050:	d10e      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006052:	4b60      	ldr	r3, [pc, #384]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800605c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006060:	d102      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006062:	23fa      	movs	r3, #250	@ 0xfa
 8006064:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006066:	e26b      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006068:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800606c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800606e:	e267      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006070:	4b58      	ldr	r3, [pc, #352]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607c:	d106      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006084:	d102      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006086:	4b55      	ldr	r3, [pc, #340]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006088:	637b      	str	r3, [r7, #52]	@ 0x34
 800608a:	e259      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800608c:	4b51      	ldr	r3, [pc, #324]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800608e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d107      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80060a0:	d103      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 80060a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a8:	e24a      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ae:	e247      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80060b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80060b8:	430b      	orrs	r3, r1
 80060ba:	d12d      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80060bc:	4b45      	ldr	r3, [pc, #276]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80060be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060c2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80060c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80060c8:	4b42      	ldr	r3, [pc, #264]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060d4:	d105      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d102      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80060dc:	4b3f      	ldr	r3, [pc, #252]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80060de:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e0:	e22e      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060e8:	d107      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fc70 	bl	80049d4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80060f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f8:	e222      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006100:	d107      	bne.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006102:	f107 0318 	add.w	r3, r7, #24
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fdbe 	bl	8004c88 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006110:	e216      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
 8006116:	e213      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800611c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006120:	430b      	orrs	r3, r1
 8006122:	d15d      	bne.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006124:	4b2b      	ldr	r3, [pc, #172]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800612a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800612e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006136:	d028      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800613e:	d845      	bhi.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006146:	d013      	beq.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800614e:	d83d      	bhi.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	2b00      	cmp	r3, #0
 8006154:	d004      	beq.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800615c:	d004      	beq.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800615e:	e035      	b.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006160:	f7fd fde6 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006164:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006166:	e1eb      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006168:	f7fd fcb2 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 800616c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800616e:	e1e7      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006170:	4b18      	ldr	r3, [pc, #96]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800617c:	d102      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800617e:	4b17      	ldr	r3, [pc, #92]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006180:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006182:	e1dd      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006188:	e1da      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800618a:	4b12      	ldr	r3, [pc, #72]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b20      	cmp	r3, #32
 8006194:	d117      	bne.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006196:	4b0f      	ldr	r3, [pc, #60]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80061a2:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	0e1b      	lsrs	r3, r3, #24
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	e006      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80061ae:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80061b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061b4:	041b      	lsls	r3, r3, #16
 80061b6:	0e1b      	lsrs	r3, r3, #24
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	4a06      	ldr	r2, [pc, #24]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80061be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061c4:	e1bc      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061ca:	e1b9      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061d0:	e1b6      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80061d2:	bf00      	nop
 80061d4:	46020c00 	.word	0x46020c00
 80061d8:	0800bf8c 	.word	0x0800bf8c
 80061dc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80061e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e4:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80061e8:	430b      	orrs	r3, r1
 80061ea:	d156      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80061ec:	4ba5      	ldr	r3, [pc, #660]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80061ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061f6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061fe:	d028      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006206:	d845      	bhi.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800620e:	d013      	beq.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006216:	d83d      	bhi.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006224:	d004      	beq.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006226:	e035      	b.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006228:	f7fd fd6e 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 800622c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800622e:	e187      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006230:	f7fd fc4e 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8006234:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006236:	e183      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006238:	4b92      	ldr	r3, [pc, #584]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006244:	d102      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006246:	4b90      	ldr	r3, [pc, #576]	@ (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006248:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800624a:	e179      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006250:	e176      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006252:	4b8c      	ldr	r3, [pc, #560]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b20      	cmp	r3, #32
 800625c:	d117      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800625e:	4b89      	ldr	r3, [pc, #548]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800626a:	4b86      	ldr	r3, [pc, #536]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	0e1b      	lsrs	r3, r3, #24
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	e006      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006276:	4b83      	ldr	r3, [pc, #524]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800627c:	041b      	lsls	r3, r3, #16
 800627e:	0e1b      	lsrs	r3, r3, #24
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	4a81      	ldr	r2, [pc, #516]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800628c:	e158      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006292:	e155      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006298:	e152      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800629a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800629e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80062a2:	430b      	orrs	r3, r1
 80062a4:	d177      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80062a6:	4b77      	ldr	r3, [pc, #476]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80062a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062ac:	f003 0318 	and.w	r3, r3, #24
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b18      	cmp	r3, #24
 80062b6:	d86b      	bhi.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80062b8:	a201      	add	r2, pc, #4	@ (adr r2, 80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	08006325 	.word	0x08006325
 80062c4:	08006391 	.word	0x08006391
 80062c8:	08006391 	.word	0x08006391
 80062cc:	08006391 	.word	0x08006391
 80062d0:	08006391 	.word	0x08006391
 80062d4:	08006391 	.word	0x08006391
 80062d8:	08006391 	.word	0x08006391
 80062dc:	08006391 	.word	0x08006391
 80062e0:	0800632d 	.word	0x0800632d
 80062e4:	08006391 	.word	0x08006391
 80062e8:	08006391 	.word	0x08006391
 80062ec:	08006391 	.word	0x08006391
 80062f0:	08006391 	.word	0x08006391
 80062f4:	08006391 	.word	0x08006391
 80062f8:	08006391 	.word	0x08006391
 80062fc:	08006391 	.word	0x08006391
 8006300:	08006335 	.word	0x08006335
 8006304:	08006391 	.word	0x08006391
 8006308:	08006391 	.word	0x08006391
 800630c:	08006391 	.word	0x08006391
 8006310:	08006391 	.word	0x08006391
 8006314:	08006391 	.word	0x08006391
 8006318:	08006391 	.word	0x08006391
 800631c:	08006391 	.word	0x08006391
 8006320:	0800634f 	.word	0x0800634f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006324:	f7fd fd18 	bl	8003d58 <HAL_RCC_GetPCLK3Freq>
 8006328:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800632a:	e109      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800632c:	f7fd fbd0 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8006330:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006332:	e105      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006334:	4b53      	ldr	r3, [pc, #332]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800633c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006340:	d102      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006342:	4b51      	ldr	r3, [pc, #324]	@ (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006344:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006346:	e0fb      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800634c:	e0f8      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800634e:	4b4d      	ldr	r3, [pc, #308]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b20      	cmp	r3, #32
 8006358:	d117      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800635a:	4b4a      	ldr	r3, [pc, #296]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006366:	4b47      	ldr	r3, [pc, #284]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	0e1b      	lsrs	r3, r3, #24
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	e006      	b.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006372:	4b44      	ldr	r3, [pc, #272]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006378:	041b      	lsls	r3, r3, #16
 800637a:	0e1b      	lsrs	r3, r3, #24
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	4a42      	ldr	r2, [pc, #264]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006386:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006388:	e0da      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800638e:	e0d7      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006394:	e0d4      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800639a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800639e:	430b      	orrs	r3, r1
 80063a0:	d155      	bne.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80063a2:	4b38      	ldr	r3, [pc, #224]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80063a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80063ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063b4:	d013      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063bc:	d844      	bhi.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063c4:	d013      	beq.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063cc:	d83c      	bhi.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d014      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063da:	d014      	beq.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80063dc:	e034      	b.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063de:	f107 0318 	add.w	r3, r7, #24
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fc50 	bl	8004c88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063ec:	e0a8      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe faee 	bl	80049d4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063fc:	e0a0      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80063fe:	f7fd fb67 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8006402:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006404:	e09c      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006406:	4b1f      	ldr	r3, [pc, #124]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b20      	cmp	r3, #32
 8006410:	d117      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006412:	4b1c      	ldr	r3, [pc, #112]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800641e:	4b19      	ldr	r3, [pc, #100]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	e006      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800642a:	4b16      	ldr	r3, [pc, #88]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800642c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006430:	041b      	lsls	r3, r3, #16
 8006432:	0e1b      	lsrs	r3, r3, #24
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	4a14      	ldr	r2, [pc, #80]	@ (800648c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800643a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006440:	e07e      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006446:	e07b      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800644c:	e078      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800644e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006452:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006456:	430b      	orrs	r3, r1
 8006458:	d138      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800645a:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800645c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006464:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006466:	4b07      	ldr	r3, [pc, #28]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d10d      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800647a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006480:	e05e      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006482:	bf00      	nop
 8006484:	46020c00 	.word	0x46020c00
 8006488:	00f42400 	.word	0x00f42400
 800648c:	0800bf8c 	.word	0x0800bf8c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006490:	4b2e      	ldr	r3, [pc, #184]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800649a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800649e:	d112      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80064a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a6:	d10e      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80064a8:	4b28      	ldr	r3, [pc, #160]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80064aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064b6:	d102      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80064b8:	23fa      	movs	r3, #250	@ 0xfa
 80064ba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80064bc:	e040      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80064be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80064c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80064c4:	e03c      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ca:	e039      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80064cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80064d4:	430b      	orrs	r3, r1
 80064d6:	d131      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80064d8:	4b1c      	ldr	r3, [pc, #112]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80064da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80064e2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80064e4:	4b19      	ldr	r3, [pc, #100]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f0:	d105      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80064f8:	4b15      	ldr	r3, [pc, #84]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80064fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fc:	e020      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80064fe:	4b13      	ldr	r3, [pc, #76]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800650a:	d106      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006512:	d102      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006514:	4b0f      	ldr	r3, [pc, #60]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
 8006518:	e012      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800651a:	4b0c      	ldr	r3, [pc, #48]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006526:	d106      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800652e:	d102      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8006530:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006532:	637b      	str	r3, [r7, #52]	@ 0x34
 8006534:	e004      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	637b      	str	r3, [r7, #52]	@ 0x34
 800653a:	e001      	b.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8006540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006542:	4618      	mov	r0, r3
 8006544:	3738      	adds	r7, #56	@ 0x38
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	46020c00 	.word	0x46020c00
 8006550:	02dc6c00 	.word	0x02dc6c00
 8006554:	016e3600 	.word	0x016e3600
 8006558:	00f42400 	.word	0x00f42400

0800655c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006564:	4b47      	ldr	r3, [pc, #284]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a46      	ldr	r2, [pc, #280]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 800656a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800656e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006570:	f7fb fa8c 	bl	8001a8c <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006576:	e008      	b.n	800658a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006578:	f7fb fa88 	bl	8001a8c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e077      	b.n	800667a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800658a:	4b3e      	ldr	r3, [pc, #248]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f0      	bne.n	8006578 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006596:	4b3b      	ldr	r3, [pc, #236]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 8006598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6811      	ldr	r1, [r2, #0]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6852      	ldr	r2, [r2, #4]
 80065aa:	3a01      	subs	r2, #1
 80065ac:	0212      	lsls	r2, r2, #8
 80065ae:	430a      	orrs	r2, r1
 80065b0:	4934      	ldr	r1, [pc, #208]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80065b6:	4b33      	ldr	r3, [pc, #204]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 80065b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065ba:	4b33      	ldr	r3, [pc, #204]	@ (8006688 <RCCEx_PLL2_Config+0x12c>)
 80065bc:	4013      	ands	r3, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6892      	ldr	r2, [r2, #8]
 80065c2:	3a01      	subs	r2, #1
 80065c4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	68d2      	ldr	r2, [r2, #12]
 80065cc:	3a01      	subs	r2, #1
 80065ce:	0252      	lsls	r2, r2, #9
 80065d0:	b292      	uxth	r2, r2
 80065d2:	4311      	orrs	r1, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6912      	ldr	r2, [r2, #16]
 80065d8:	3a01      	subs	r2, #1
 80065da:	0412      	lsls	r2, r2, #16
 80065dc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80065e0:	4311      	orrs	r1, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6952      	ldr	r2, [r2, #20]
 80065e6:	3a01      	subs	r2, #1
 80065e8:	0612      	lsls	r2, r2, #24
 80065ea:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80065ee:	430a      	orrs	r2, r1
 80065f0:	4924      	ldr	r1, [pc, #144]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80065f6:	4b23      	ldr	r3, [pc, #140]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fa:	f023 020c 	bic.w	r2, r3, #12
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	4920      	ldr	r1, [pc, #128]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 8006604:	4313      	orrs	r3, r2
 8006606:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006608:	4b1e      	ldr	r3, [pc, #120]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 800660a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	491c      	ldr	r1, [pc, #112]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 8006612:	4313      	orrs	r3, r2
 8006614:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006616:	4b1b      	ldr	r3, [pc, #108]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 8006618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661a:	4a1a      	ldr	r2, [pc, #104]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 800661c:	f023 0310 	bic.w	r3, r3, #16
 8006620:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006622:	4b18      	ldr	r3, [pc, #96]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800662a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	69d2      	ldr	r2, [r2, #28]
 8006632:	00d2      	lsls	r2, r2, #3
 8006634:	4913      	ldr	r1, [pc, #76]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 8006636:	4313      	orrs	r3, r2
 8006638:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800663a:	4b12      	ldr	r3, [pc, #72]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	4a11      	ldr	r2, [pc, #68]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 8006640:	f043 0310 	orr.w	r3, r3, #16
 8006644:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006646:	4b0f      	ldr	r3, [pc, #60]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a0e      	ldr	r2, [pc, #56]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 800664c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006650:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006652:	f7fb fa1b 	bl	8001a8c <HAL_GetTick>
 8006656:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006658:	e008      	b.n	800666c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800665a:	f7fb fa17 	bl	8001a8c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800666c:	4b05      	ldr	r3, [pc, #20]	@ (8006684 <RCCEx_PLL2_Config+0x128>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006678:	2300      	movs	r3, #0

}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	46020c00 	.word	0x46020c00
 8006688:	80800000 	.word	0x80800000

0800668c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006694:	4b47      	ldr	r3, [pc, #284]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a46      	ldr	r2, [pc, #280]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 800669a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800669e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066a0:	f7fb f9f4 	bl	8001a8c <HAL_GetTick>
 80066a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066a6:	e008      	b.n	80066ba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066a8:	f7fb f9f0 	bl	8001a8c <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e077      	b.n	80067aa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066ba:	4b3e      	ldr	r3, [pc, #248]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f0      	bne.n	80066a8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80066c6:	4b3b      	ldr	r3, [pc, #236]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6811      	ldr	r1, [r2, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6852      	ldr	r2, [r2, #4]
 80066da:	3a01      	subs	r2, #1
 80066dc:	0212      	lsls	r2, r2, #8
 80066de:	430a      	orrs	r2, r1
 80066e0:	4934      	ldr	r1, [pc, #208]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	630b      	str	r3, [r1, #48]	@ 0x30
 80066e6:	4b33      	ldr	r3, [pc, #204]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 80066e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ea:	4b33      	ldr	r3, [pc, #204]	@ (80067b8 <RCCEx_PLL3_Config+0x12c>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6892      	ldr	r2, [r2, #8]
 80066f2:	3a01      	subs	r2, #1
 80066f4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	68d2      	ldr	r2, [r2, #12]
 80066fc:	3a01      	subs	r2, #1
 80066fe:	0252      	lsls	r2, r2, #9
 8006700:	b292      	uxth	r2, r2
 8006702:	4311      	orrs	r1, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6912      	ldr	r2, [r2, #16]
 8006708:	3a01      	subs	r2, #1
 800670a:	0412      	lsls	r2, r2, #16
 800670c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006710:	4311      	orrs	r1, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6952      	ldr	r2, [r2, #20]
 8006716:	3a01      	subs	r2, #1
 8006718:	0612      	lsls	r2, r2, #24
 800671a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800671e:	430a      	orrs	r2, r1
 8006720:	4924      	ldr	r1, [pc, #144]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006722:	4313      	orrs	r3, r2
 8006724:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006726:	4b23      	ldr	r3, [pc, #140]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672a:	f023 020c 	bic.w	r2, r3, #12
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	4920      	ldr	r1, [pc, #128]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006734:	4313      	orrs	r3, r2
 8006736:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006738:	4b1e      	ldr	r3, [pc, #120]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 800673a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	491c      	ldr	r1, [pc, #112]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006742:	4313      	orrs	r3, r2
 8006744:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006746:	4b1b      	ldr	r3, [pc, #108]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674a:	4a1a      	ldr	r2, [pc, #104]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 800674c:	f023 0310 	bic.w	r3, r3, #16
 8006750:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006752:	4b18      	ldr	r3, [pc, #96]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006756:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800675a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	69d2      	ldr	r2, [r2, #28]
 8006762:	00d2      	lsls	r2, r2, #3
 8006764:	4913      	ldr	r1, [pc, #76]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006766:	4313      	orrs	r3, r2
 8006768:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800676a:	4b12      	ldr	r3, [pc, #72]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 800676c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676e:	4a11      	ldr	r2, [pc, #68]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006770:	f043 0310 	orr.w	r3, r3, #16
 8006774:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006776:	4b0f      	ldr	r3, [pc, #60]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a0e      	ldr	r2, [pc, #56]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 800677c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006780:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006782:	f7fb f983 	bl	8001a8c <HAL_GetTick>
 8006786:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006788:	e008      	b.n	800679c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800678a:	f7fb f97f 	bl	8001a8c <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e006      	b.n	80067aa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800679c:	4b05      	ldr	r3, [pc, #20]	@ (80067b4 <RCCEx_PLL3_Config+0x128>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	46020c00 	.word	0x46020c00
 80067b8:	80800000 	.word	0x80800000

080067bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d071      	beq.n	80068b2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fa fe14 	bl	8001410 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80067f0:	4b32      	ldr	r3, [pc, #200]	@ (80068bc <HAL_RTC_Init+0x100>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d051      	beq.n	80068a0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067fc:	4b2f      	ldr	r3, [pc, #188]	@ (80068bc <HAL_RTC_Init+0x100>)
 80067fe:	22ca      	movs	r2, #202	@ 0xca
 8006800:	625a      	str	r2, [r3, #36]	@ 0x24
 8006802:	4b2e      	ldr	r3, [pc, #184]	@ (80068bc <HAL_RTC_Init+0x100>)
 8006804:	2253      	movs	r2, #83	@ 0x53
 8006806:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f88b 	bl	8006924 <RTC_EnterInitMode>
 800680e:	4603      	mov	r3, r0
 8006810:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d13f      	bne.n	8006898 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006818:	4b28      	ldr	r3, [pc, #160]	@ (80068bc <HAL_RTC_Init+0x100>)
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	4a27      	ldr	r2, [pc, #156]	@ (80068bc <HAL_RTC_Init+0x100>)
 800681e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006826:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006828:	4b24      	ldr	r3, [pc, #144]	@ (80068bc <HAL_RTC_Init+0x100>)
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6859      	ldr	r1, [r3, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	4319      	orrs	r1, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	430b      	orrs	r3, r1
 800683c:	491f      	ldr	r1, [pc, #124]	@ (80068bc <HAL_RTC_Init+0x100>)
 800683e:	4313      	orrs	r3, r2
 8006840:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	491b      	ldr	r1, [pc, #108]	@ (80068bc <HAL_RTC_Init+0x100>)
 800684e:	4313      	orrs	r3, r2
 8006850:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006852:	4b1a      	ldr	r3, [pc, #104]	@ (80068bc <HAL_RTC_Init+0x100>)
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	430b      	orrs	r3, r1
 8006864:	4915      	ldr	r1, [pc, #84]	@ (80068bc <HAL_RTC_Init+0x100>)
 8006866:	4313      	orrs	r3, r2
 8006868:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f896 	bl	800699c <RTC_ExitInitMode>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10e      	bne.n	8006898 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800687a:	4b10      	ldr	r3, [pc, #64]	@ (80068bc <HAL_RTC_Init+0x100>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a19      	ldr	r1, [r3, #32]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	4319      	orrs	r1, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	430b      	orrs	r3, r1
 8006892:	490a      	ldr	r1, [pc, #40]	@ (80068bc <HAL_RTC_Init+0x100>)
 8006894:	4313      	orrs	r3, r2
 8006896:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006898:	4b08      	ldr	r3, [pc, #32]	@ (80068bc <HAL_RTC_Init+0x100>)
 800689a:	22ff      	movs	r2, #255	@ 0xff
 800689c:	625a      	str	r2, [r3, #36]	@ 0x24
 800689e:	e001      	b.n	80068a4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	46007800 	.word	0x46007800

080068c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80068c8:	4b15      	ldr	r3, [pc, #84]	@ (8006920 <HAL_RTC_WaitForSynchro+0x60>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	4a14      	ldr	r2, [pc, #80]	@ (8006920 <HAL_RTC_WaitForSynchro+0x60>)
 80068ce:	f023 0320 	bic.w	r3, r3, #32
 80068d2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80068d4:	f7fb f8da 	bl	8001a8c <HAL_GetTick>
 80068d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068da:	e013      	b.n	8006904 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068dc:	f7fb f8d6 	bl	8001a8c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068ea:	d90b      	bls.n	8006904 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006920 <HAL_RTC_WaitForSynchro+0x60>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10c      	bne.n	8006912 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2203      	movs	r2, #3
 80068fc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e008      	b.n	8006916 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006904:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <HAL_RTC_WaitForSynchro+0x60>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0e5      	beq.n	80068dc <HAL_RTC_WaitForSynchro+0x1c>
 8006910:	e000      	b.n	8006914 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8006912:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	46007800 	.word	0x46007800

08006924 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006930:	4b19      	ldr	r3, [pc, #100]	@ (8006998 <RTC_EnterInitMode+0x74>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d128      	bne.n	800698e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800693c:	4b16      	ldr	r3, [pc, #88]	@ (8006998 <RTC_EnterInitMode+0x74>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a15      	ldr	r2, [pc, #84]	@ (8006998 <RTC_EnterInitMode+0x74>)
 8006942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006946:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006948:	f7fb f8a0 	bl	8001a8c <HAL_GetTick>
 800694c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800694e:	e013      	b.n	8006978 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006950:	f7fb f89c 	bl	8001a8c <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800695e:	d90b      	bls.n	8006978 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006960:	4b0d      	ldr	r3, [pc, #52]	@ (8006998 <RTC_EnterInitMode+0x74>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10f      	bne.n	800698c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2203      	movs	r2, #3
 8006974:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006978:	4b07      	ldr	r3, [pc, #28]	@ (8006998 <RTC_EnterInitMode+0x74>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <RTC_EnterInitMode+0x6a>
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b03      	cmp	r3, #3
 8006988:	d1e2      	bne.n	8006950 <RTC_EnterInitMode+0x2c>
 800698a:	e000      	b.n	800698e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800698c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800698e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	46007800 	.word	0x46007800

0800699c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80069a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a14 <RTC_ExitInitMode+0x78>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	4a19      	ldr	r2, [pc, #100]	@ (8006a14 <RTC_ExitInitMode+0x78>)
 80069ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069b2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80069b4:	4b17      	ldr	r3, [pc, #92]	@ (8006a14 <RTC_ExitInitMode+0x78>)
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10c      	bne.n	80069da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ff7d 	bl	80068c0 <HAL_RTC_WaitForSynchro>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01e      	beq.n	8006a0a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2203      	movs	r2, #3
 80069d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	e017      	b.n	8006a0a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069da:	4b0e      	ldr	r3, [pc, #56]	@ (8006a14 <RTC_ExitInitMode+0x78>)
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	4a0d      	ldr	r2, [pc, #52]	@ (8006a14 <RTC_ExitInitMode+0x78>)
 80069e0:	f023 0320 	bic.w	r3, r3, #32
 80069e4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff ff6a 	bl	80068c0 <HAL_RTC_WaitForSynchro>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2203      	movs	r2, #3
 80069f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069fe:	4b05      	ldr	r3, [pc, #20]	@ (8006a14 <RTC_ExitInitMode+0x78>)
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	4a04      	ldr	r2, [pc, #16]	@ (8006a14 <RTC_ExitInitMode+0x78>)
 8006a04:	f043 0320 	orr.w	r3, r3, #32
 8006a08:	6193      	str	r3, [r2, #24]
  }
  return status;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	46007800 	.word	0x46007800

08006a18 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e057      	b.n	8006ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8006a44:	4b29      	ldr	r3, [pc, #164]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	4a28      	ldr	r2, [pc, #160]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006a4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a4e:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8006a50:	4b26      	ldr	r3, [pc, #152]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006a52:	2204      	movs	r2, #4
 8006a54:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006a56:	4b25      	ldr	r3, [pc, #148]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d123      	bne.n	8006aaa <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
  {
    tickstart = HAL_GetTick();
 8006a62:	f7fb f813 	bl	8001a8c <HAL_GetTick>
 8006a66:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006a68:	e017      	b.n	8006a9a <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a6a:	f7fb f80f 	bl	8001a8c <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a78:	d90f      	bls.n	8006a9a <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d110      	bne.n	8006aa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
        {

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e024      	b.n	8006ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006a9a:	4b14      	ldr	r3, [pc, #80]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0e1      	beq.n	8006a6a <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
 8006aa6:	e000      	b.n	8006aaa <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
        }
        else
        {
          break;
 8006aa8:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	041a      	lsls	r2, r3, #16
 8006aae:	490f      	ldr	r1, [pc, #60]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	f023 0207 	bic.w	r2, r3, #7
 8006abe:	490b      	ldr	r1, [pc, #44]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8006ac6:	4b09      	ldr	r3, [pc, #36]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	4a08      	ldr	r2, [pc, #32]	@ (8006aec <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8006acc:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8006ad0:	6193      	str	r3, [r2, #24]


  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	46007800 	.word	0x46007800

08006af0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8006af8:	4b09      	ldr	r3, [pc, #36]	@ (8006b20 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8006afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d005      	beq.n	8006b10 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8006b04:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8006b06:	2204      	movs	r2, #4
 8006b08:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f80a 	bl	8006b24 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	46007800 	.word	0x46007800

08006b24 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	4910      	ldr	r1, [pc, #64]	@ (8006b8c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	490c      	ldr	r1, [pc, #48]	@ (8006b90 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8006b64:	4b0a      	ldr	r3, [pc, #40]	@ (8006b90 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	6919      	ldr	r1, [r3, #16]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	041b      	lsls	r3, r3, #16
 8006b76:	430b      	orrs	r3, r1
 8006b78:	4905      	ldr	r1, [pc, #20]	@ (8006b90 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	46007800 	.word	0x46007800
 8006b90:	46007c00 	.word	0x46007c00

08006b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e042      	b.n	8006c2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fa fe1b 	bl	80017f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2224      	movs	r2, #36	@ 0x24
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa68 	bl	80070b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f8c3 	bl	8006d70 <UART_SetConfig>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e01b      	b.n	8006c2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0201 	orr.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fae7 	bl	80071f8 <UART_CheckIdleState>
 8006c2a:	4603      	mov	r3, r0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	@ 0x28
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	f040 808b 	bne.w	8006d66 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_UART_Transmit+0x28>
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e083      	b.n	8006d68 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c6a:	2b80      	cmp	r3, #128	@ 0x80
 8006c6c:	d107      	bne.n	8006c7e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c7c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2221      	movs	r2, #33	@ 0x21
 8006c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c8e:	f7fa fefd 	bl	8001a8c <HAL_GetTick>
 8006c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	88fa      	ldrh	r2, [r7, #6]
 8006ca0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cac:	d108      	bne.n	8006cc0 <HAL_UART_Transmit+0x8c>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d104      	bne.n	8006cc0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	e003      	b.n	8006cc8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cc8:	e030      	b.n	8006d2c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2180      	movs	r1, #128	@ 0x80
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fb39 	bl	800734c <UART_WaitOnFlagUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e03d      	b.n	8006d68 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10b      	bne.n	8006d0a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	3302      	adds	r3, #2
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	e007      	b.n	8006d1a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	3301      	adds	r3, #1
 8006d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1c8      	bne.n	8006cca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2140      	movs	r1, #64	@ 0x40
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fb02 	bl	800734c <UART_WaitOnFlagUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e006      	b.n	8006d68 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e000      	b.n	8006d68 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006d66:	2302      	movs	r3, #2
  }
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d74:	b094      	sub	sp, #80	@ 0x50
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	4b7e      	ldr	r3, [pc, #504]	@ (8006f80 <UART_SetConfig+0x210>)
 8006d86:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	431a      	orrs	r2, r3
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4977      	ldr	r1, [pc, #476]	@ (8006f84 <UART_SetConfig+0x214>)
 8006da8:	4019      	ands	r1, r3
 8006daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006db0:	430b      	orrs	r3, r1
 8006db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc0:	68d9      	ldr	r1, [r3, #12]
 8006dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	ea40 0301 	orr.w	r3, r0, r1
 8006dca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8006f80 <UART_SetConfig+0x210>)
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d009      	beq.n	8006df0 <UART_SetConfig+0x80>
 8006ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	4b69      	ldr	r3, [pc, #420]	@ (8006f88 <UART_SetConfig+0x218>)
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d004      	beq.n	8006df0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	6a1a      	ldr	r2, [r3, #32]
 8006dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dec:	4313      	orrs	r3, r2
 8006dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006dfa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	f023 000f 	bic.w	r0, r3, #15
 8006e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e14:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	ea40 0301 	orr.w	r3, r0, r1
 8006e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	4b59      	ldr	r3, [pc, #356]	@ (8006f8c <UART_SetConfig+0x21c>)
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d102      	bne.n	8006e30 <UART_SetConfig+0xc0>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e2e:	e029      	b.n	8006e84 <UART_SetConfig+0x114>
 8006e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	4b56      	ldr	r3, [pc, #344]	@ (8006f90 <UART_SetConfig+0x220>)
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d102      	bne.n	8006e40 <UART_SetConfig+0xd0>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e3e:	e021      	b.n	8006e84 <UART_SetConfig+0x114>
 8006e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	4b53      	ldr	r3, [pc, #332]	@ (8006f94 <UART_SetConfig+0x224>)
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d102      	bne.n	8006e50 <UART_SetConfig+0xe0>
 8006e4a:	2304      	movs	r3, #4
 8006e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e4e:	e019      	b.n	8006e84 <UART_SetConfig+0x114>
 8006e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	4b50      	ldr	r3, [pc, #320]	@ (8006f98 <UART_SetConfig+0x228>)
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d102      	bne.n	8006e60 <UART_SetConfig+0xf0>
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e5e:	e011      	b.n	8006e84 <UART_SetConfig+0x114>
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	4b4d      	ldr	r3, [pc, #308]	@ (8006f9c <UART_SetConfig+0x22c>)
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d102      	bne.n	8006e70 <UART_SetConfig+0x100>
 8006e6a:	2310      	movs	r3, #16
 8006e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e6e:	e009      	b.n	8006e84 <UART_SetConfig+0x114>
 8006e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	4b42      	ldr	r3, [pc, #264]	@ (8006f80 <UART_SetConfig+0x210>)
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d102      	bne.n	8006e80 <UART_SetConfig+0x110>
 8006e7a:	2320      	movs	r3, #32
 8006e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e7e:	e001      	b.n	8006e84 <UART_SetConfig+0x114>
 8006e80:	2300      	movs	r3, #0
 8006e82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	4b3d      	ldr	r3, [pc, #244]	@ (8006f80 <UART_SetConfig+0x210>)
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d005      	beq.n	8006e9a <UART_SetConfig+0x12a>
 8006e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4b3d      	ldr	r3, [pc, #244]	@ (8006f88 <UART_SetConfig+0x218>)
 8006e94:	429a      	cmp	r2, r3
 8006e96:	f040 8085 	bne.w	8006fa4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	623b      	str	r3, [r7, #32]
 8006ea0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ea2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ea6:	f7fe f9a3 	bl	80051f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006eaa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80e8 	beq.w	8007084 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	4a39      	ldr	r2, [pc, #228]	@ (8006fa0 <UART_SetConfig+0x230>)
 8006eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	4413      	add	r3, r2
 8006ed2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d305      	bcc.n	8006ee4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d903      	bls.n	8006eec <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006eea:	e048      	b.n	8006f7e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eee:	2200      	movs	r2, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	61fa      	str	r2, [r7, #28]
 8006ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef8:	4a29      	ldr	r2, [pc, #164]	@ (8006fa0 <UART_SetConfig+0x230>)
 8006efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2200      	movs	r2, #0
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	617a      	str	r2, [r7, #20]
 8006f06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f0e:	f7f9 febf 	bl	8000c90 <__aeabi_uldivmod>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4610      	mov	r0, r2
 8006f18:	4619      	mov	r1, r3
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	020b      	lsls	r3, r1, #8
 8006f24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f28:	0202      	lsls	r2, r0, #8
 8006f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f2c:	6849      	ldr	r1, [r1, #4]
 8006f2e:	0849      	lsrs	r1, r1, #1
 8006f30:	2000      	movs	r0, #0
 8006f32:	460c      	mov	r4, r1
 8006f34:	4605      	mov	r5, r0
 8006f36:	eb12 0804 	adds.w	r8, r2, r4
 8006f3a:	eb43 0905 	adc.w	r9, r3, r5
 8006f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	60bb      	str	r3, [r7, #8]
 8006f46:	60fa      	str	r2, [r7, #12]
 8006f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 fe9e 	bl	8000c90 <__aeabi_uldivmod>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4613      	mov	r3, r2
 8006f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f62:	d308      	bcc.n	8006f76 <UART_SetConfig+0x206>
 8006f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f6a:	d204      	bcs.n	8006f76 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8006f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f72:	60da      	str	r2, [r3, #12]
 8006f74:	e003      	b.n	8006f7e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006f7c:	e082      	b.n	8007084 <UART_SetConfig+0x314>
 8006f7e:	e081      	b.n	8007084 <UART_SetConfig+0x314>
 8006f80:	46002400 	.word	0x46002400
 8006f84:	cfff69f3 	.word	0xcfff69f3
 8006f88:	56002400 	.word	0x56002400
 8006f8c:	40013800 	.word	0x40013800
 8006f90:	40004400 	.word	0x40004400
 8006f94:	40004800 	.word	0x40004800
 8006f98:	40004c00 	.word	0x40004c00
 8006f9c:	40005000 	.word	0x40005000
 8006fa0:	0800c04c 	.word	0x0800c04c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fac:	d13c      	bne.n	8007028 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fba:	f7fe f919 	bl	80051f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fbe:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d05e      	beq.n	8007084 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fca:	4a39      	ldr	r2, [pc, #228]	@ (80070b0 <UART_SetConfig+0x340>)
 8006fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fd8:	005a      	lsls	r2, r3, #1
 8006fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	441a      	add	r2, r3
 8006fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fee:	2b0f      	cmp	r3, #15
 8006ff0:	d916      	bls.n	8007020 <UART_SetConfig+0x2b0>
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff8:	d212      	bcs.n	8007020 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f023 030f 	bic.w	r3, r3, #15
 8007002:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	b29a      	uxth	r2, r3
 8007010:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007012:	4313      	orrs	r3, r2
 8007014:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800701c:	60da      	str	r2, [r3, #12]
 800701e:	e031      	b.n	8007084 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007026:	e02d      	b.n	8007084 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800702a:	2200      	movs	r2, #0
 800702c:	469a      	mov	sl, r3
 800702e:	4693      	mov	fp, r2
 8007030:	4650      	mov	r0, sl
 8007032:	4659      	mov	r1, fp
 8007034:	f7fe f8dc 	bl	80051f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007038:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800703a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d021      	beq.n	8007084 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007044:	4a1a      	ldr	r2, [pc, #104]	@ (80070b0 <UART_SetConfig+0x340>)
 8007046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800704a:	461a      	mov	r2, r3
 800704c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800704e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	085b      	lsrs	r3, r3, #1
 8007058:	441a      	add	r2, r3
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d909      	bls.n	800707e <UART_SetConfig+0x30e>
 800706a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007070:	d205      	bcs.n	800707e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007074:	b29a      	uxth	r2, r3
 8007076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60da      	str	r2, [r3, #12]
 800707c:	e002      	b.n	8007084 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	2201      	movs	r2, #1
 8007088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708e:	2201      	movs	r2, #1
 8007090:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	2200      	movs	r2, #0
 8007098:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800709a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709c:	2200      	movs	r2, #0
 800709e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80070a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3750      	adds	r7, #80	@ 0x50
 80070a8:	46bd      	mov	sp, r7
 80070aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ae:	bf00      	nop
 80070b0:	0800c04c 	.word	0x0800c04c

080070b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01a      	beq.n	80071ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071b2:	d10a      	bne.n	80071ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	605a      	str	r2, [r3, #4]
  }
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b098      	sub	sp, #96	@ 0x60
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007208:	f7fa fc40 	bl	8001a8c <HAL_GetTick>
 800720c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b08      	cmp	r3, #8
 800721a:	d12f      	bne.n	800727c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800721c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007224:	2200      	movs	r2, #0
 8007226:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f88e 	bl	800734c <UART_WaitOnFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d022      	beq.n	800727c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800724a:	653b      	str	r3, [r7, #80]	@ 0x50
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007254:	647b      	str	r3, [r7, #68]	@ 0x44
 8007256:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800725a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e6      	bne.n	8007236 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e063      	b.n	8007344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b04      	cmp	r3, #4
 8007288:	d149      	bne.n	800731e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007292:	2200      	movs	r2, #0
 8007294:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f857 	bl	800734c <UART_WaitOnFlagUntilTimeout>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d03c      	beq.n	800731e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	623b      	str	r3, [r7, #32]
   return(result);
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e6      	bne.n	80072a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3308      	adds	r3, #8
 80072dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3308      	adds	r3, #8
 80072f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072f6:	61fa      	str	r2, [r7, #28]
 80072f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fa:	69b9      	ldr	r1, [r7, #24]
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	617b      	str	r3, [r7, #20]
   return(result);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e5      	bne.n	80072d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e012      	b.n	8007344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3758      	adds	r7, #88	@ 0x58
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	4613      	mov	r3, r2
 800735a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735c:	e04f      	b.n	80073fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007364:	d04b      	beq.n	80073fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007366:	f7fa fb91 	bl	8001a8c <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	429a      	cmp	r2, r3
 8007374:	d302      	bcc.n	800737c <UART_WaitOnFlagUntilTimeout+0x30>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e04e      	b.n	800741e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d037      	beq.n	80073fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b80      	cmp	r3, #128	@ 0x80
 8007392:	d034      	beq.n	80073fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b40      	cmp	r3, #64	@ 0x40
 8007398:	d031      	beq.n	80073fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d110      	bne.n	80073ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2208      	movs	r2, #8
 80073ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f838 	bl	8007426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2208      	movs	r2, #8
 80073ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e029      	b.n	800741e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073d8:	d111      	bne.n	80073fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f81e 	bl	8007426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2220      	movs	r2, #32
 80073ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e00f      	b.n	800741e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4013      	ands	r3, r2
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	429a      	cmp	r2, r3
 800740c:	bf0c      	ite	eq
 800740e:	2301      	moveq	r3, #1
 8007410:	2300      	movne	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	429a      	cmp	r2, r3
 800741a:	d0a0      	beq.n	800735e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007426:	b480      	push	{r7}
 8007428:	b095      	sub	sp, #84	@ 0x54
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800744c:	643b      	str	r3, [r7, #64]	@ 0x40
 800744e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e6      	bne.n	800742e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3308      	adds	r3, #8
 8007482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800748a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e3      	bne.n	8007460 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800749c:	2b01      	cmp	r3, #1
 800749e:	d118      	bne.n	80074d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f023 0310 	bic.w	r3, r3, #16
 80074b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6979      	ldr	r1, [r7, #20]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	613b      	str	r3, [r7, #16]
   return(result);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80074e6:	bf00      	nop
 80074e8:	3754      	adds	r7, #84	@ 0x54
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_UARTEx_DisableFifoMode+0x16>
 8007504:	2302      	movs	r3, #2
 8007506:	e027      	b.n	8007558 <HAL_UARTEx_DisableFifoMode+0x66>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2224      	movs	r2, #36	@ 0x24
 8007514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0201 	bic.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007536:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007578:	2302      	movs	r3, #2
 800757a:	e02d      	b.n	80075d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2224      	movs	r2, #36	@ 0x24
 8007588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0201 	bic.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f84f 	bl	800765c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e02d      	b.n	8007654 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2224      	movs	r2, #36	@ 0x24
 8007604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0201 	bic.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f811 	bl	800765c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007668:	2b00      	cmp	r3, #0
 800766a:	d108      	bne.n	800767e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800767c:	e031      	b.n	80076e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800767e:	2308      	movs	r3, #8
 8007680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007682:	2308      	movs	r3, #8
 8007684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	0e5b      	lsrs	r3, r3, #25
 800768e:	b2db      	uxtb	r3, r3
 8007690:	f003 0307 	and.w	r3, r3, #7
 8007694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	0f5b      	lsrs	r3, r3, #29
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	7b3a      	ldrb	r2, [r7, #12]
 80076aa:	4911      	ldr	r1, [pc, #68]	@ (80076f0 <UARTEx_SetNbDataToProcess+0x94>)
 80076ac:	5c8a      	ldrb	r2, [r1, r2]
 80076ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076b2:	7b3a      	ldrb	r2, [r7, #12]
 80076b4:	490f      	ldr	r1, [pc, #60]	@ (80076f4 <UARTEx_SetNbDataToProcess+0x98>)
 80076b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80076bc:	b29a      	uxth	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	7b7a      	ldrb	r2, [r7, #13]
 80076c8:	4909      	ldr	r1, [pc, #36]	@ (80076f0 <UARTEx_SetNbDataToProcess+0x94>)
 80076ca:	5c8a      	ldrb	r2, [r1, r2]
 80076cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076d0:	7b7a      	ldrb	r2, [r7, #13]
 80076d2:	4908      	ldr	r1, [pc, #32]	@ (80076f4 <UARTEx_SetNbDataToProcess+0x98>)
 80076d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	0800c064 	.word	0x0800c064
 80076f4:	0800c06c 	.word	0x0800c06c

080076f8 <FM_DEBUG_UartMsg>:
 * @retval None
 *
 *
 */
void FM_DEBUG_UartMsg(const char *p_msg, uint8_t len)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret = HAL_BUSY;
 8007704:	2302      	movs	r3, #2
 8007706:	73fb      	strb	r3, [r7, #15]
	 * La función HAL_UART_Transmit retorna HAL_BUSY, si el UART esta en uso,
	 * no se logro transmitir.
	 *
	 */

	if (len < 1)
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <FM_DEBUG_UartMsg+0x2a>
	{
		return; // el tamaño del string no puede ser menor a 2, un caracter mas el nulo.
	}

	ret = HAL_UART_Transmit(&huart1, (const uint8_t*) p_msg, len, WAIT_FOR_UART_5MS);
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	b29a      	uxth	r2, r3
 8007712:	2305      	movs	r3, #5
 8007714:	6879      	ldr	r1, [r7, #4]
 8007716:	4805      	ldr	r0, [pc, #20]	@ (800772c <FM_DEBUG_UartMsg+0x34>)
 8007718:	f7ff fa8c 	bl	8006c34 <HAL_UART_Transmit>
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	e000      	b.n	8007724 <FM_DEBUG_UartMsg+0x2c>
		return; // el tamaño del string no puede ser menor a 2, un caracter mas el nulo.
 8007722:	bf00      	nop

	if (ret == HAL_BUSY)
	{
		// implementar
	}
}
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000274 	.word	0x20000274

08007730 <FM_DEBUG_UartUint16>:
 * @brief Función que envía un número de 16 bits por el puerto UART.
 * @param Número a imprimir.
 * @retval None
 */
void FM_DEBUG_UartUint16(uint16_t num)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	80fb      	strh	r3, [r7, #6]

	snprintf(str_buffer, sizeof(str_buffer), "%u\n", num);
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	4a08      	ldr	r2, [pc, #32]	@ (8007760 <FM_DEBUG_UartUint16+0x30>)
 800773e:	210c      	movs	r1, #12
 8007740:	4808      	ldr	r0, [pc, #32]	@ (8007764 <FM_DEBUG_UartUint16+0x34>)
 8007742:	f000 ff73 	bl	800862c <sniprintf>
	FM_DEBUG_UartMsg(str_buffer, strlen(str_buffer));
 8007746:	4807      	ldr	r0, [pc, #28]	@ (8007764 <FM_DEBUG_UartUint16+0x34>)
 8007748:	f7f8 fd96 	bl	8000278 <strlen>
 800774c:	4603      	mov	r3, r0
 800774e:	b2db      	uxtb	r3, r3
 8007750:	4619      	mov	r1, r3
 8007752:	4804      	ldr	r0, [pc, #16]	@ (8007764 <FM_DEBUG_UartUint16+0x34>)
 8007754:	f7ff ffd0 	bl	80076f8 <FM_DEBUG_UartMsg>
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	0800bf58 	.word	0x0800bf58
 8007764:	2000030c 	.word	0x2000030c

08007768 <FM_MAIN_Main>:
 * @param   Ninguno.
 * @retval  Ninguno.
 *
 */
void FM_MAIN_Main()
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	uint16_t capture;

	HAL_LPTIM_IC_Start(&hlptim1, LPTIM_CHANNEL_1);
 800776e:	2100      	movs	r1, #0
 8007770:	4813      	ldr	r0, [pc, #76]	@ (80077c0 <FM_MAIN_Main+0x58>)
 8007772:	f7fa fe8f 	bl	8002494 <HAL_LPTIM_IC_Start>
	__HAL_RCC_LPTIM1_CLKAM_ENABLE();
 8007776:	4b13      	ldr	r3, [pc, #76]	@ (80077c4 <FM_MAIN_Main+0x5c>)
 8007778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800777c:	4a11      	ldr	r2, [pc, #68]	@ (80077c4 <FM_MAIN_Main+0x5c>)
 800777e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007782:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

	HAL_Delay(100);
 8007786:	2064      	movs	r0, #100	@ 0x64
 8007788:	f7fa f98c 	bl	8001aa4 <HAL_Delay>

	for (;;)
	{
		//LL_LPTIM_ClearFlag_CC1O(LPTIM1);

		capture=LPTIM1->CCR1;
 800778c:	4b0e      	ldr	r3, [pc, #56]	@ (80077c8 <FM_MAIN_Main+0x60>)
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	80fb      	strh	r3, [r7, #6]
		FM_DEBUG_UartUint16(capture);
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff ffcb 	bl	8007730 <FM_DEBUG_UartUint16>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800779a:	2200      	movs	r2, #0
 800779c:	2180      	movs	r1, #128	@ 0x80
 800779e:	480b      	ldr	r0, [pc, #44]	@ (80077cc <FM_MAIN_Main+0x64>)
 80077a0:	f7fa fd30 	bl	8002204 <HAL_GPIO_WritePin>
		HAL_SuspendTick();
 80077a4:	f7fa f9a2 	bl	8001aec <HAL_SuspendTick>
		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80077a8:	2001      	movs	r0, #1
 80077aa:	f7fb f887 	bl	80028bc <HAL_PWREx_EnterSTOP2Mode>
		HAL_ResumeTick();
 80077ae:	f7fa f9ad 	bl	8001b0c <HAL_ResumeTick>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80077b2:	2201      	movs	r2, #1
 80077b4:	2180      	movs	r1, #128	@ 0x80
 80077b6:	4805      	ldr	r0, [pc, #20]	@ (80077cc <FM_MAIN_Main+0x64>)
 80077b8:	f7fa fd24 	bl	8002204 <HAL_GPIO_WritePin>
		capture=LPTIM1->CCR1;
 80077bc:	bf00      	nop
 80077be:	e7e5      	b.n	800778c <FM_MAIN_Main+0x24>
 80077c0:	200001f0 	.word	0x200001f0
 80077c4:	46020c00 	.word	0x46020c00
 80077c8:	46004400 	.word	0x46004400
 80077cc:	42020400 	.word	0x42020400

080077d0 <__cvt>:
 80077d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077d4:	ec57 6b10 	vmov	r6, r7, d0
 80077d8:	2f00      	cmp	r7, #0
 80077da:	460c      	mov	r4, r1
 80077dc:	4619      	mov	r1, r3
 80077de:	463b      	mov	r3, r7
 80077e0:	bfb4      	ite	lt
 80077e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077e6:	2300      	movge	r3, #0
 80077e8:	4691      	mov	r9, r2
 80077ea:	bfbf      	itttt	lt
 80077ec:	4632      	movlt	r2, r6
 80077ee:	461f      	movlt	r7, r3
 80077f0:	232d      	movlt	r3, #45	@ 0x2d
 80077f2:	4616      	movlt	r6, r2
 80077f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80077f8:	700b      	strb	r3, [r1, #0]
 80077fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077fc:	f023 0820 	bic.w	r8, r3, #32
 8007800:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007804:	d005      	beq.n	8007812 <__cvt+0x42>
 8007806:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800780a:	d100      	bne.n	800780e <__cvt+0x3e>
 800780c:	3401      	adds	r4, #1
 800780e:	2102      	movs	r1, #2
 8007810:	e000      	b.n	8007814 <__cvt+0x44>
 8007812:	2103      	movs	r1, #3
 8007814:	ab03      	add	r3, sp, #12
 8007816:	4622      	mov	r2, r4
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	ab02      	add	r3, sp, #8
 800781c:	ec47 6b10 	vmov	d0, r6, r7
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	4653      	mov	r3, sl
 8007824:	f001 f8bc 	bl	80089a0 <_dtoa_r>
 8007828:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800782c:	4605      	mov	r5, r0
 800782e:	d119      	bne.n	8007864 <__cvt+0x94>
 8007830:	f019 0f01 	tst.w	r9, #1
 8007834:	d00e      	beq.n	8007854 <__cvt+0x84>
 8007836:	eb00 0904 	add.w	r9, r0, r4
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f9 f945 	bl	8000ad0 <__aeabi_dcmpeq>
 8007846:	b108      	cbz	r0, 800784c <__cvt+0x7c>
 8007848:	f8cd 900c 	str.w	r9, [sp, #12]
 800784c:	2230      	movs	r2, #48	@ 0x30
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	454b      	cmp	r3, r9
 8007852:	d31e      	bcc.n	8007892 <__cvt+0xc2>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	4628      	mov	r0, r5
 8007858:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800785a:	1b5b      	subs	r3, r3, r5
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	b004      	add	sp, #16
 8007860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007864:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007868:	eb00 0904 	add.w	r9, r0, r4
 800786c:	d1e5      	bne.n	800783a <__cvt+0x6a>
 800786e:	7803      	ldrb	r3, [r0, #0]
 8007870:	2b30      	cmp	r3, #48	@ 0x30
 8007872:	d10a      	bne.n	800788a <__cvt+0xba>
 8007874:	2200      	movs	r2, #0
 8007876:	2300      	movs	r3, #0
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f9 f928 	bl	8000ad0 <__aeabi_dcmpeq>
 8007880:	b918      	cbnz	r0, 800788a <__cvt+0xba>
 8007882:	f1c4 0401 	rsb	r4, r4, #1
 8007886:	f8ca 4000 	str.w	r4, [sl]
 800788a:	f8da 3000 	ldr.w	r3, [sl]
 800788e:	4499      	add	r9, r3
 8007890:	e7d3      	b.n	800783a <__cvt+0x6a>
 8007892:	1c59      	adds	r1, r3, #1
 8007894:	9103      	str	r1, [sp, #12]
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e7d9      	b.n	800784e <__cvt+0x7e>

0800789a <__exponent>:
 800789a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800789c:	2900      	cmp	r1, #0
 800789e:	7002      	strb	r2, [r0, #0]
 80078a0:	bfba      	itte	lt
 80078a2:	4249      	neglt	r1, r1
 80078a4:	232d      	movlt	r3, #45	@ 0x2d
 80078a6:	232b      	movge	r3, #43	@ 0x2b
 80078a8:	2909      	cmp	r1, #9
 80078aa:	7043      	strb	r3, [r0, #1]
 80078ac:	dd28      	ble.n	8007900 <__exponent+0x66>
 80078ae:	f10d 0307 	add.w	r3, sp, #7
 80078b2:	270a      	movs	r7, #10
 80078b4:	461d      	mov	r5, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	fbb1 f6f7 	udiv	r6, r1, r7
 80078be:	fb07 1416 	mls	r4, r7, r6, r1
 80078c2:	3430      	adds	r4, #48	@ 0x30
 80078c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078c8:	460c      	mov	r4, r1
 80078ca:	4631      	mov	r1, r6
 80078cc:	2c63      	cmp	r4, #99	@ 0x63
 80078ce:	dcf2      	bgt.n	80078b6 <__exponent+0x1c>
 80078d0:	3130      	adds	r1, #48	@ 0x30
 80078d2:	1e94      	subs	r4, r2, #2
 80078d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078d8:	1c41      	adds	r1, r0, #1
 80078da:	4623      	mov	r3, r4
 80078dc:	42ab      	cmp	r3, r5
 80078de:	d30a      	bcc.n	80078f6 <__exponent+0x5c>
 80078e0:	f10d 0309 	add.w	r3, sp, #9
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	42ac      	cmp	r4, r5
 80078e8:	bf88      	it	hi
 80078ea:	2300      	movhi	r3, #0
 80078ec:	3302      	adds	r3, #2
 80078ee:	4403      	add	r3, r0
 80078f0:	1a18      	subs	r0, r3, r0
 80078f2:	b003      	add	sp, #12
 80078f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80078fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80078fe:	e7ed      	b.n	80078dc <__exponent+0x42>
 8007900:	2330      	movs	r3, #48	@ 0x30
 8007902:	3130      	adds	r1, #48	@ 0x30
 8007904:	7083      	strb	r3, [r0, #2]
 8007906:	1d03      	adds	r3, r0, #4
 8007908:	70c1      	strb	r1, [r0, #3]
 800790a:	e7f1      	b.n	80078f0 <__exponent+0x56>

0800790c <_printf_float>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	b08d      	sub	sp, #52	@ 0x34
 8007912:	460c      	mov	r4, r1
 8007914:	4616      	mov	r6, r2
 8007916:	461f      	mov	r7, r3
 8007918:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800791c:	4605      	mov	r5, r0
 800791e:	f000 ff25 	bl	800876c <_localeconv_r>
 8007922:	6803      	ldr	r3, [r0, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	f7f8 fca6 	bl	8000278 <strlen>
 800792c:	2300      	movs	r3, #0
 800792e:	9005      	str	r0, [sp, #20]
 8007930:	930a      	str	r3, [sp, #40]	@ 0x28
 8007932:	f8d8 3000 	ldr.w	r3, [r8]
 8007936:	f894 a018 	ldrb.w	sl, [r4, #24]
 800793a:	3307      	adds	r3, #7
 800793c:	f8d4 b000 	ldr.w	fp, [r4]
 8007940:	f023 0307 	bic.w	r3, r3, #7
 8007944:	f103 0208 	add.w	r2, r3, #8
 8007948:	f8c8 2000 	str.w	r2, [r8]
 800794c:	f04f 32ff 	mov.w	r2, #4294967295
 8007950:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007954:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007958:	f8cd 8018 	str.w	r8, [sp, #24]
 800795c:	9307      	str	r3, [sp, #28]
 800795e:	4b9d      	ldr	r3, [pc, #628]	@ (8007bd4 <_printf_float+0x2c8>)
 8007960:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007964:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007968:	f7f9 f8e4 	bl	8000b34 <__aeabi_dcmpun>
 800796c:	bb70      	cbnz	r0, 80079cc <_printf_float+0xc0>
 800796e:	f04f 32ff 	mov.w	r2, #4294967295
 8007972:	4b98      	ldr	r3, [pc, #608]	@ (8007bd4 <_printf_float+0x2c8>)
 8007974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007978:	f7f9 f8be 	bl	8000af8 <__aeabi_dcmple>
 800797c:	bb30      	cbnz	r0, 80079cc <_printf_float+0xc0>
 800797e:	2200      	movs	r2, #0
 8007980:	2300      	movs	r3, #0
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f9 f8ad 	bl	8000ae4 <__aeabi_dcmplt>
 800798a:	b110      	cbz	r0, 8007992 <_printf_float+0x86>
 800798c:	232d      	movs	r3, #45	@ 0x2d
 800798e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007992:	4a91      	ldr	r2, [pc, #580]	@ (8007bd8 <_printf_float+0x2cc>)
 8007994:	4b91      	ldr	r3, [pc, #580]	@ (8007bdc <_printf_float+0x2d0>)
 8007996:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800799a:	bf94      	ite	ls
 800799c:	4690      	movls	r8, r2
 800799e:	4698      	movhi	r8, r3
 80079a0:	2303      	movs	r3, #3
 80079a2:	f04f 0900 	mov.w	r9, #0
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	f02b 0304 	bic.w	r3, fp, #4
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	4633      	mov	r3, r6
 80079b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079b2:	4621      	mov	r1, r4
 80079b4:	4628      	mov	r0, r5
 80079b6:	9700      	str	r7, [sp, #0]
 80079b8:	f000 f9d2 	bl	8007d60 <_printf_common>
 80079bc:	3001      	adds	r0, #1
 80079be:	f040 808d 	bne.w	8007adc <_printf_float+0x1d0>
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295
 80079c6:	b00d      	add	sp, #52	@ 0x34
 80079c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079cc:	4642      	mov	r2, r8
 80079ce:	464b      	mov	r3, r9
 80079d0:	4640      	mov	r0, r8
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f9 f8ae 	bl	8000b34 <__aeabi_dcmpun>
 80079d8:	b140      	cbz	r0, 80079ec <_printf_float+0xe0>
 80079da:	464b      	mov	r3, r9
 80079dc:	4a80      	ldr	r2, [pc, #512]	@ (8007be0 <_printf_float+0x2d4>)
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfbc      	itt	lt
 80079e2:	232d      	movlt	r3, #45	@ 0x2d
 80079e4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079e8:	4b7e      	ldr	r3, [pc, #504]	@ (8007be4 <_printf_float+0x2d8>)
 80079ea:	e7d4      	b.n	8007996 <_printf_float+0x8a>
 80079ec:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	9206      	str	r2, [sp, #24]
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	d13b      	bne.n	8007a70 <_printf_float+0x164>
 80079f8:	2306      	movs	r3, #6
 80079fa:	6063      	str	r3, [r4, #4]
 80079fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a00:	2300      	movs	r3, #0
 8007a02:	4628      	mov	r0, r5
 8007a04:	6022      	str	r2, [r4, #0]
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a0a:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a0e:	ab09      	add	r3, sp, #36	@ 0x24
 8007a10:	ec49 8b10 	vmov	d0, r8, r9
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a1a:	6861      	ldr	r1, [r4, #4]
 8007a1c:	f7ff fed8 	bl	80077d0 <__cvt>
 8007a20:	9b06      	ldr	r3, [sp, #24]
 8007a22:	4680      	mov	r8, r0
 8007a24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a26:	2b47      	cmp	r3, #71	@ 0x47
 8007a28:	d129      	bne.n	8007a7e <_printf_float+0x172>
 8007a2a:	1cc8      	adds	r0, r1, #3
 8007a2c:	db02      	blt.n	8007a34 <_printf_float+0x128>
 8007a2e:	6863      	ldr	r3, [r4, #4]
 8007a30:	4299      	cmp	r1, r3
 8007a32:	dd41      	ble.n	8007ab8 <_printf_float+0x1ac>
 8007a34:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a38:	fa5f fa8a 	uxtb.w	sl, sl
 8007a3c:	3901      	subs	r1, #1
 8007a3e:	4652      	mov	r2, sl
 8007a40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a44:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a46:	f7ff ff28 	bl	800789a <__exponent>
 8007a4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a4c:	4681      	mov	r9, r0
 8007a4e:	1813      	adds	r3, r2, r0
 8007a50:	2a01      	cmp	r2, #1
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	dc02      	bgt.n	8007a5c <_printf_float+0x150>
 8007a56:	6822      	ldr	r2, [r4, #0]
 8007a58:	07d2      	lsls	r2, r2, #31
 8007a5a:	d501      	bpl.n	8007a60 <_printf_float+0x154>
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	6123      	str	r3, [r4, #16]
 8007a60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0a2      	beq.n	80079ae <_printf_float+0xa2>
 8007a68:	232d      	movs	r3, #45	@ 0x2d
 8007a6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a6e:	e79e      	b.n	80079ae <_printf_float+0xa2>
 8007a70:	9a06      	ldr	r2, [sp, #24]
 8007a72:	2a47      	cmp	r2, #71	@ 0x47
 8007a74:	d1c2      	bne.n	80079fc <_printf_float+0xf0>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1c0      	bne.n	80079fc <_printf_float+0xf0>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e7bd      	b.n	80079fa <_printf_float+0xee>
 8007a7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a82:	d9db      	bls.n	8007a3c <_printf_float+0x130>
 8007a84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a88:	d118      	bne.n	8007abc <_printf_float+0x1b0>
 8007a8a:	2900      	cmp	r1, #0
 8007a8c:	6863      	ldr	r3, [r4, #4]
 8007a8e:	dd0b      	ble.n	8007aa8 <_printf_float+0x19c>
 8007a90:	6121      	str	r1, [r4, #16]
 8007a92:	b913      	cbnz	r3, 8007a9a <_printf_float+0x18e>
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	07d0      	lsls	r0, r2, #31
 8007a98:	d502      	bpl.n	8007aa0 <_printf_float+0x194>
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	440b      	add	r3, r1
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	f04f 0900 	mov.w	r9, #0
 8007aa4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007aa6:	e7db      	b.n	8007a60 <_printf_float+0x154>
 8007aa8:	b913      	cbnz	r3, 8007ab0 <_printf_float+0x1a4>
 8007aaa:	6822      	ldr	r2, [r4, #0]
 8007aac:	07d2      	lsls	r2, r2, #31
 8007aae:	d501      	bpl.n	8007ab4 <_printf_float+0x1a8>
 8007ab0:	3302      	adds	r3, #2
 8007ab2:	e7f4      	b.n	8007a9e <_printf_float+0x192>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e7f2      	b.n	8007a9e <_printf_float+0x192>
 8007ab8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007abe:	4299      	cmp	r1, r3
 8007ac0:	db05      	blt.n	8007ace <_printf_float+0x1c2>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	6121      	str	r1, [r4, #16]
 8007ac6:	07d8      	lsls	r0, r3, #31
 8007ac8:	d5ea      	bpl.n	8007aa0 <_printf_float+0x194>
 8007aca:	1c4b      	adds	r3, r1, #1
 8007acc:	e7e7      	b.n	8007a9e <_printf_float+0x192>
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	bfd4      	ite	le
 8007ad2:	f1c1 0202 	rsble	r2, r1, #2
 8007ad6:	2201      	movgt	r2, #1
 8007ad8:	4413      	add	r3, r2
 8007ada:	e7e0      	b.n	8007a9e <_printf_float+0x192>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	055a      	lsls	r2, r3, #21
 8007ae0:	d407      	bmi.n	8007af2 <_printf_float+0x1e6>
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b8      	blx	r7
 8007aec:	3001      	adds	r0, #1
 8007aee:	d12b      	bne.n	8007b48 <_printf_float+0x23c>
 8007af0:	e767      	b.n	80079c2 <_printf_float+0xb6>
 8007af2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007af6:	f240 80dd 	bls.w	8007cb4 <_printf_float+0x3a8>
 8007afa:	2200      	movs	r2, #0
 8007afc:	2300      	movs	r3, #0
 8007afe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b02:	f7f8 ffe5 	bl	8000ad0 <__aeabi_dcmpeq>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d033      	beq.n	8007b72 <_printf_float+0x266>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4a36      	ldr	r2, [pc, #216]	@ (8007be8 <_printf_float+0x2dc>)
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f af54 	beq.w	80079c2 <_printf_float+0xb6>
 8007b1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b1e:	4543      	cmp	r3, r8
 8007b20:	db02      	blt.n	8007b28 <_printf_float+0x21c>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	07d8      	lsls	r0, r3, #31
 8007b26:	d50f      	bpl.n	8007b48 <_printf_float+0x23c>
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b30:	47b8      	blx	r7
 8007b32:	3001      	adds	r0, #1
 8007b34:	f43f af45 	beq.w	80079c2 <_printf_float+0xb6>
 8007b38:	f04f 0900 	mov.w	r9, #0
 8007b3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b40:	f104 0a1a 	add.w	sl, r4, #26
 8007b44:	45c8      	cmp	r8, r9
 8007b46:	dc09      	bgt.n	8007b5c <_printf_float+0x250>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	079b      	lsls	r3, r3, #30
 8007b4c:	f100 8103 	bmi.w	8007d56 <_printf_float+0x44a>
 8007b50:	68e0      	ldr	r0, [r4, #12]
 8007b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b54:	4298      	cmp	r0, r3
 8007b56:	bfb8      	it	lt
 8007b58:	4618      	movlt	r0, r3
 8007b5a:	e734      	b.n	80079c6 <_printf_float+0xba>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4652      	mov	r2, sl
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f af2b 	beq.w	80079c2 <_printf_float+0xb6>
 8007b6c:	f109 0901 	add.w	r9, r9, #1
 8007b70:	e7e8      	b.n	8007b44 <_printf_float+0x238>
 8007b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dc39      	bgt.n	8007bec <_printf_float+0x2e0>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007be8 <_printf_float+0x2dc>)
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f af1d 	beq.w	80079c2 <_printf_float+0xb6>
 8007b88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b8c:	ea59 0303 	orrs.w	r3, r9, r3
 8007b90:	d102      	bne.n	8007b98 <_printf_float+0x28c>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	07d9      	lsls	r1, r3, #31
 8007b96:	d5d7      	bpl.n	8007b48 <_printf_float+0x23c>
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ba0:	47b8      	blx	r7
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f43f af0d 	beq.w	80079c2 <_printf_float+0xb6>
 8007ba8:	f04f 0a00 	mov.w	sl, #0
 8007bac:	f104 0b1a 	add.w	fp, r4, #26
 8007bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb2:	425b      	negs	r3, r3
 8007bb4:	4553      	cmp	r3, sl
 8007bb6:	dc01      	bgt.n	8007bbc <_printf_float+0x2b0>
 8007bb8:	464b      	mov	r3, r9
 8007bba:	e793      	b.n	8007ae4 <_printf_float+0x1d8>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	465a      	mov	r2, fp
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f aefb 	beq.w	80079c2 <_printf_float+0xb6>
 8007bcc:	f10a 0a01 	add.w	sl, sl, #1
 8007bd0:	e7ee      	b.n	8007bb0 <_printf_float+0x2a4>
 8007bd2:	bf00      	nop
 8007bd4:	7fefffff 	.word	0x7fefffff
 8007bd8:	0800c074 	.word	0x0800c074
 8007bdc:	0800c078 	.word	0x0800c078
 8007be0:	0800c07c 	.word	0x0800c07c
 8007be4:	0800c080 	.word	0x0800c080
 8007be8:	0800c084 	.word	0x0800c084
 8007bec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bf2:	4553      	cmp	r3, sl
 8007bf4:	bfa8      	it	ge
 8007bf6:	4653      	movge	r3, sl
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	4699      	mov	r9, r3
 8007bfc:	dc36      	bgt.n	8007c6c <_printf_float+0x360>
 8007bfe:	f04f 0b00 	mov.w	fp, #0
 8007c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c06:	f104 021a 	add.w	r2, r4, #26
 8007c0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c0c:	9306      	str	r3, [sp, #24]
 8007c0e:	eba3 0309 	sub.w	r3, r3, r9
 8007c12:	455b      	cmp	r3, fp
 8007c14:	dc31      	bgt.n	8007c7a <_printf_float+0x36e>
 8007c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c18:	459a      	cmp	sl, r3
 8007c1a:	dc3a      	bgt.n	8007c92 <_printf_float+0x386>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	07da      	lsls	r2, r3, #31
 8007c20:	d437      	bmi.n	8007c92 <_printf_float+0x386>
 8007c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c24:	ebaa 0903 	sub.w	r9, sl, r3
 8007c28:	9b06      	ldr	r3, [sp, #24]
 8007c2a:	ebaa 0303 	sub.w	r3, sl, r3
 8007c2e:	4599      	cmp	r9, r3
 8007c30:	bfa8      	it	ge
 8007c32:	4699      	movge	r9, r3
 8007c34:	f1b9 0f00 	cmp.w	r9, #0
 8007c38:	dc33      	bgt.n	8007ca2 <_printf_float+0x396>
 8007c3a:	f04f 0800 	mov.w	r8, #0
 8007c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c42:	f104 0b1a 	add.w	fp, r4, #26
 8007c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c48:	ebaa 0303 	sub.w	r3, sl, r3
 8007c4c:	eba3 0309 	sub.w	r3, r3, r9
 8007c50:	4543      	cmp	r3, r8
 8007c52:	f77f af79 	ble.w	8007b48 <_printf_float+0x23c>
 8007c56:	2301      	movs	r3, #1
 8007c58:	465a      	mov	r2, fp
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	f43f aeae 	beq.w	80079c2 <_printf_float+0xb6>
 8007c66:	f108 0801 	add.w	r8, r8, #1
 8007c6a:	e7ec      	b.n	8007c46 <_printf_float+0x33a>
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	d1c2      	bne.n	8007bfe <_printf_float+0x2f2>
 8007c78:	e6a3      	b.n	80079c2 <_printf_float+0xb6>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	9206      	str	r2, [sp, #24]
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f ae9c 	beq.w	80079c2 <_printf_float+0xb6>
 8007c8a:	f10b 0b01 	add.w	fp, fp, #1
 8007c8e:	9a06      	ldr	r2, [sp, #24]
 8007c90:	e7bb      	b.n	8007c0a <_printf_float+0x2fe>
 8007c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c96:	4631      	mov	r1, r6
 8007c98:	4628      	mov	r0, r5
 8007c9a:	47b8      	blx	r7
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d1c0      	bne.n	8007c22 <_printf_float+0x316>
 8007ca0:	e68f      	b.n	80079c2 <_printf_float+0xb6>
 8007ca2:	9a06      	ldr	r2, [sp, #24]
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	4442      	add	r2, r8
 8007cac:	47b8      	blx	r7
 8007cae:	3001      	adds	r0, #1
 8007cb0:	d1c3      	bne.n	8007c3a <_printf_float+0x32e>
 8007cb2:	e686      	b.n	80079c2 <_printf_float+0xb6>
 8007cb4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cb8:	f1ba 0f01 	cmp.w	sl, #1
 8007cbc:	dc01      	bgt.n	8007cc2 <_printf_float+0x3b6>
 8007cbe:	07db      	lsls	r3, r3, #31
 8007cc0:	d536      	bpl.n	8007d30 <_printf_float+0x424>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	f43f ae78 	beq.w	80079c2 <_printf_float+0xb6>
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cda:	47b8      	blx	r7
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f43f ae70 	beq.w	80079c2 <_printf_float+0xb6>
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cee:	f7f8 feef 	bl	8000ad0 <__aeabi_dcmpeq>
 8007cf2:	b9c0      	cbnz	r0, 8007d26 <_printf_float+0x41a>
 8007cf4:	4653      	mov	r3, sl
 8007cf6:	f108 0201 	add.w	r2, r8, #1
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	d10c      	bne.n	8007d1e <_printf_float+0x412>
 8007d04:	e65d      	b.n	80079c2 <_printf_float+0xb6>
 8007d06:	2301      	movs	r3, #1
 8007d08:	465a      	mov	r2, fp
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b8      	blx	r7
 8007d10:	3001      	adds	r0, #1
 8007d12:	f43f ae56 	beq.w	80079c2 <_printf_float+0xb6>
 8007d16:	f108 0801 	add.w	r8, r8, #1
 8007d1a:	45d0      	cmp	r8, sl
 8007d1c:	dbf3      	blt.n	8007d06 <_printf_float+0x3fa>
 8007d1e:	464b      	mov	r3, r9
 8007d20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d24:	e6df      	b.n	8007ae6 <_printf_float+0x1da>
 8007d26:	f04f 0800 	mov.w	r8, #0
 8007d2a:	f104 0b1a 	add.w	fp, r4, #26
 8007d2e:	e7f4      	b.n	8007d1a <_printf_float+0x40e>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4642      	mov	r2, r8
 8007d34:	e7e1      	b.n	8007cfa <_printf_float+0x3ee>
 8007d36:	2301      	movs	r3, #1
 8007d38:	464a      	mov	r2, r9
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	f43f ae3e 	beq.w	80079c2 <_printf_float+0xb6>
 8007d46:	f108 0801 	add.w	r8, r8, #1
 8007d4a:	68e3      	ldr	r3, [r4, #12]
 8007d4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d4e:	1a5b      	subs	r3, r3, r1
 8007d50:	4543      	cmp	r3, r8
 8007d52:	dcf0      	bgt.n	8007d36 <_printf_float+0x42a>
 8007d54:	e6fc      	b.n	8007b50 <_printf_float+0x244>
 8007d56:	f04f 0800 	mov.w	r8, #0
 8007d5a:	f104 0919 	add.w	r9, r4, #25
 8007d5e:	e7f4      	b.n	8007d4a <_printf_float+0x43e>

08007d60 <_printf_common>:
 8007d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	4616      	mov	r6, r2
 8007d66:	4698      	mov	r8, r3
 8007d68:	688a      	ldr	r2, [r1, #8]
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	690b      	ldr	r3, [r1, #16]
 8007d6e:	460c      	mov	r4, r1
 8007d70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d74:	4293      	cmp	r3, r2
 8007d76:	bfb8      	it	lt
 8007d78:	4613      	movlt	r3, r2
 8007d7a:	6033      	str	r3, [r6, #0]
 8007d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d80:	b10a      	cbz	r2, 8007d86 <_printf_common+0x26>
 8007d82:	3301      	adds	r3, #1
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	0699      	lsls	r1, r3, #26
 8007d8a:	bf42      	ittt	mi
 8007d8c:	6833      	ldrmi	r3, [r6, #0]
 8007d8e:	3302      	addmi	r3, #2
 8007d90:	6033      	strmi	r3, [r6, #0]
 8007d92:	6825      	ldr	r5, [r4, #0]
 8007d94:	f015 0506 	ands.w	r5, r5, #6
 8007d98:	d106      	bne.n	8007da8 <_printf_common+0x48>
 8007d9a:	f104 0a19 	add.w	sl, r4, #25
 8007d9e:	68e3      	ldr	r3, [r4, #12]
 8007da0:	6832      	ldr	r2, [r6, #0]
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dc2b      	bgt.n	8007e00 <_printf_common+0xa0>
 8007da8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dac:	6822      	ldr	r2, [r4, #0]
 8007dae:	3b00      	subs	r3, #0
 8007db0:	bf18      	it	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	0692      	lsls	r2, r2, #26
 8007db6:	d430      	bmi.n	8007e1a <_printf_common+0xba>
 8007db8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	47c8      	blx	r9
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d023      	beq.n	8007e0e <_printf_common+0xae>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	341a      	adds	r4, #26
 8007dca:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007dce:	f003 0306 	and.w	r3, r3, #6
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	bf0a      	itet	eq
 8007dd6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8007dda:	2500      	movne	r5, #0
 8007ddc:	6833      	ldreq	r3, [r6, #0]
 8007dde:	f04f 0600 	mov.w	r6, #0
 8007de2:	bf08      	it	eq
 8007de4:	1aed      	subeq	r5, r5, r3
 8007de6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007dea:	bf08      	it	eq
 8007dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df0:	4293      	cmp	r3, r2
 8007df2:	bfc4      	itt	gt
 8007df4:	1a9b      	subgt	r3, r3, r2
 8007df6:	18ed      	addgt	r5, r5, r3
 8007df8:	42b5      	cmp	r5, r6
 8007dfa:	d11a      	bne.n	8007e32 <_printf_common+0xd2>
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	e008      	b.n	8007e12 <_printf_common+0xb2>
 8007e00:	2301      	movs	r3, #1
 8007e02:	4652      	mov	r2, sl
 8007e04:	4641      	mov	r1, r8
 8007e06:	4638      	mov	r0, r7
 8007e08:	47c8      	blx	r9
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d103      	bne.n	8007e16 <_printf_common+0xb6>
 8007e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e16:	3501      	adds	r5, #1
 8007e18:	e7c1      	b.n	8007d9e <_printf_common+0x3e>
 8007e1a:	18e1      	adds	r1, r4, r3
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	2030      	movs	r0, #48	@ 0x30
 8007e20:	3302      	adds	r3, #2
 8007e22:	4422      	add	r2, r4
 8007e24:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e30:	e7c2      	b.n	8007db8 <_printf_common+0x58>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4622      	mov	r2, r4
 8007e36:	4641      	mov	r1, r8
 8007e38:	4638      	mov	r0, r7
 8007e3a:	47c8      	blx	r9
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d0e6      	beq.n	8007e0e <_printf_common+0xae>
 8007e40:	3601      	adds	r6, #1
 8007e42:	e7d9      	b.n	8007df8 <_printf_common+0x98>

08007e44 <_printf_i>:
 8007e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	7e0f      	ldrb	r7, [r1, #24]
 8007e4a:	4691      	mov	r9, r2
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	2f78      	cmp	r7, #120	@ 0x78
 8007e52:	469a      	mov	sl, r3
 8007e54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e5a:	d807      	bhi.n	8007e6c <_printf_i+0x28>
 8007e5c:	2f62      	cmp	r7, #98	@ 0x62
 8007e5e:	d80a      	bhi.n	8007e76 <_printf_i+0x32>
 8007e60:	2f00      	cmp	r7, #0
 8007e62:	f000 80d2 	beq.w	800800a <_printf_i+0x1c6>
 8007e66:	2f58      	cmp	r7, #88	@ 0x58
 8007e68:	f000 80b9 	beq.w	8007fde <_printf_i+0x19a>
 8007e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e74:	e03a      	b.n	8007eec <_printf_i+0xa8>
 8007e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e7a:	2b15      	cmp	r3, #21
 8007e7c:	d8f6      	bhi.n	8007e6c <_printf_i+0x28>
 8007e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8007e84 <_printf_i+0x40>)
 8007e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007e6d 	.word	0x08007e6d
 8007e90:	08007e6d 	.word	0x08007e6d
 8007e94:	08007e6d 	.word	0x08007e6d
 8007e98:	08007e6d 	.word	0x08007e6d
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007e6d 	.word	0x08007e6d
 8007ea4:	08007e6d 	.word	0x08007e6d
 8007ea8:	08007e6d 	.word	0x08007e6d
 8007eac:	08007e6d 	.word	0x08007e6d
 8007eb0:	08007ff1 	.word	0x08007ff1
 8007eb4:	08007f1b 	.word	0x08007f1b
 8007eb8:	08007fab 	.word	0x08007fab
 8007ebc:	08007e6d 	.word	0x08007e6d
 8007ec0:	08007e6d 	.word	0x08007e6d
 8007ec4:	08008013 	.word	0x08008013
 8007ec8:	08007e6d 	.word	0x08007e6d
 8007ecc:	08007f1b 	.word	0x08007f1b
 8007ed0:	08007e6d 	.word	0x08007e6d
 8007ed4:	08007e6d 	.word	0x08007e6d
 8007ed8:	08007fb3 	.word	0x08007fb3
 8007edc:	6833      	ldr	r3, [r6, #0]
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6032      	str	r2, [r6, #0]
 8007ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007eec:	2301      	movs	r3, #1
 8007eee:	e09d      	b.n	800802c <_printf_i+0x1e8>
 8007ef0:	6833      	ldr	r3, [r6, #0]
 8007ef2:	6820      	ldr	r0, [r4, #0]
 8007ef4:	1d19      	adds	r1, r3, #4
 8007ef6:	6031      	str	r1, [r6, #0]
 8007ef8:	0606      	lsls	r6, r0, #24
 8007efa:	d501      	bpl.n	8007f00 <_printf_i+0xbc>
 8007efc:	681d      	ldr	r5, [r3, #0]
 8007efe:	e003      	b.n	8007f08 <_printf_i+0xc4>
 8007f00:	0645      	lsls	r5, r0, #25
 8007f02:	d5fb      	bpl.n	8007efc <_printf_i+0xb8>
 8007f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f08:	2d00      	cmp	r5, #0
 8007f0a:	da03      	bge.n	8007f14 <_printf_i+0xd0>
 8007f0c:	232d      	movs	r3, #45	@ 0x2d
 8007f0e:	426d      	negs	r5, r5
 8007f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f14:	4859      	ldr	r0, [pc, #356]	@ (800807c <_printf_i+0x238>)
 8007f16:	230a      	movs	r3, #10
 8007f18:	e011      	b.n	8007f3e <_printf_i+0xfa>
 8007f1a:	6821      	ldr	r1, [r4, #0]
 8007f1c:	6833      	ldr	r3, [r6, #0]
 8007f1e:	0608      	lsls	r0, r1, #24
 8007f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f24:	d402      	bmi.n	8007f2c <_printf_i+0xe8>
 8007f26:	0649      	lsls	r1, r1, #25
 8007f28:	bf48      	it	mi
 8007f2a:	b2ad      	uxthmi	r5, r5
 8007f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f2e:	6033      	str	r3, [r6, #0]
 8007f30:	4852      	ldr	r0, [pc, #328]	@ (800807c <_printf_i+0x238>)
 8007f32:	bf14      	ite	ne
 8007f34:	230a      	movne	r3, #10
 8007f36:	2308      	moveq	r3, #8
 8007f38:	2100      	movs	r1, #0
 8007f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f3e:	6866      	ldr	r6, [r4, #4]
 8007f40:	2e00      	cmp	r6, #0
 8007f42:	60a6      	str	r6, [r4, #8]
 8007f44:	bfa2      	ittt	ge
 8007f46:	6821      	ldrge	r1, [r4, #0]
 8007f48:	f021 0104 	bicge.w	r1, r1, #4
 8007f4c:	6021      	strge	r1, [r4, #0]
 8007f4e:	b90d      	cbnz	r5, 8007f54 <_printf_i+0x110>
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	d04b      	beq.n	8007fec <_printf_i+0x1a8>
 8007f54:	4616      	mov	r6, r2
 8007f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f5e:	5dc7      	ldrb	r7, [r0, r7]
 8007f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f64:	462f      	mov	r7, r5
 8007f66:	460d      	mov	r5, r1
 8007f68:	42bb      	cmp	r3, r7
 8007f6a:	d9f4      	bls.n	8007f56 <_printf_i+0x112>
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d10b      	bne.n	8007f88 <_printf_i+0x144>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	07df      	lsls	r7, r3, #31
 8007f74:	d508      	bpl.n	8007f88 <_printf_i+0x144>
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	6861      	ldr	r1, [r4, #4]
 8007f7a:	4299      	cmp	r1, r3
 8007f7c:	bfde      	ittt	le
 8007f7e:	2330      	movle	r3, #48	@ 0x30
 8007f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f88:	1b92      	subs	r2, r2, r6
 8007f8a:	6122      	str	r2, [r4, #16]
 8007f8c:	464b      	mov	r3, r9
 8007f8e:	aa03      	add	r2, sp, #12
 8007f90:	4621      	mov	r1, r4
 8007f92:	4640      	mov	r0, r8
 8007f94:	f8cd a000 	str.w	sl, [sp]
 8007f98:	f7ff fee2 	bl	8007d60 <_printf_common>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d14a      	bne.n	8008036 <_printf_i+0x1f2>
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	b004      	add	sp, #16
 8007fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	f043 0320 	orr.w	r3, r3, #32
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	2778      	movs	r7, #120	@ 0x78
 8007fb4:	4832      	ldr	r0, [pc, #200]	@ (8008080 <_printf_i+0x23c>)
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fbc:	061f      	lsls	r7, r3, #24
 8007fbe:	6831      	ldr	r1, [r6, #0]
 8007fc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fc4:	d402      	bmi.n	8007fcc <_printf_i+0x188>
 8007fc6:	065f      	lsls	r7, r3, #25
 8007fc8:	bf48      	it	mi
 8007fca:	b2ad      	uxthmi	r5, r5
 8007fcc:	6031      	str	r1, [r6, #0]
 8007fce:	07d9      	lsls	r1, r3, #31
 8007fd0:	bf44      	itt	mi
 8007fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fd6:	6023      	strmi	r3, [r4, #0]
 8007fd8:	b11d      	cbz	r5, 8007fe2 <_printf_i+0x19e>
 8007fda:	2310      	movs	r3, #16
 8007fdc:	e7ac      	b.n	8007f38 <_printf_i+0xf4>
 8007fde:	4827      	ldr	r0, [pc, #156]	@ (800807c <_printf_i+0x238>)
 8007fe0:	e7e9      	b.n	8007fb6 <_printf_i+0x172>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	f023 0320 	bic.w	r3, r3, #32
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	e7f6      	b.n	8007fda <_printf_i+0x196>
 8007fec:	4616      	mov	r6, r2
 8007fee:	e7bd      	b.n	8007f6c <_printf_i+0x128>
 8007ff0:	6833      	ldr	r3, [r6, #0]
 8007ff2:	6825      	ldr	r5, [r4, #0]
 8007ff4:	1d18      	adds	r0, r3, #4
 8007ff6:	6961      	ldr	r1, [r4, #20]
 8007ff8:	6030      	str	r0, [r6, #0]
 8007ffa:	062e      	lsls	r6, r5, #24
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	d501      	bpl.n	8008004 <_printf_i+0x1c0>
 8008000:	6019      	str	r1, [r3, #0]
 8008002:	e002      	b.n	800800a <_printf_i+0x1c6>
 8008004:	0668      	lsls	r0, r5, #25
 8008006:	d5fb      	bpl.n	8008000 <_printf_i+0x1bc>
 8008008:	8019      	strh	r1, [r3, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	4616      	mov	r6, r2
 800800e:	6123      	str	r3, [r4, #16]
 8008010:	e7bc      	b.n	8007f8c <_printf_i+0x148>
 8008012:	6833      	ldr	r3, [r6, #0]
 8008014:	2100      	movs	r1, #0
 8008016:	1d1a      	adds	r2, r3, #4
 8008018:	6032      	str	r2, [r6, #0]
 800801a:	681e      	ldr	r6, [r3, #0]
 800801c:	6862      	ldr	r2, [r4, #4]
 800801e:	4630      	mov	r0, r6
 8008020:	f000 fc1b 	bl	800885a <memchr>
 8008024:	b108      	cbz	r0, 800802a <_printf_i+0x1e6>
 8008026:	1b80      	subs	r0, r0, r6
 8008028:	6060      	str	r0, [r4, #4]
 800802a:	6863      	ldr	r3, [r4, #4]
 800802c:	6123      	str	r3, [r4, #16]
 800802e:	2300      	movs	r3, #0
 8008030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008034:	e7aa      	b.n	8007f8c <_printf_i+0x148>
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	4632      	mov	r2, r6
 800803a:	4649      	mov	r1, r9
 800803c:	4640      	mov	r0, r8
 800803e:	47d0      	blx	sl
 8008040:	3001      	adds	r0, #1
 8008042:	d0ad      	beq.n	8007fa0 <_printf_i+0x15c>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	079b      	lsls	r3, r3, #30
 8008048:	d413      	bmi.n	8008072 <_printf_i+0x22e>
 800804a:	68e0      	ldr	r0, [r4, #12]
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	4298      	cmp	r0, r3
 8008050:	bfb8      	it	lt
 8008052:	4618      	movlt	r0, r3
 8008054:	e7a6      	b.n	8007fa4 <_printf_i+0x160>
 8008056:	2301      	movs	r3, #1
 8008058:	4632      	mov	r2, r6
 800805a:	4649      	mov	r1, r9
 800805c:	4640      	mov	r0, r8
 800805e:	47d0      	blx	sl
 8008060:	3001      	adds	r0, #1
 8008062:	d09d      	beq.n	8007fa0 <_printf_i+0x15c>
 8008064:	3501      	adds	r5, #1
 8008066:	68e3      	ldr	r3, [r4, #12]
 8008068:	9903      	ldr	r1, [sp, #12]
 800806a:	1a5b      	subs	r3, r3, r1
 800806c:	42ab      	cmp	r3, r5
 800806e:	dcf2      	bgt.n	8008056 <_printf_i+0x212>
 8008070:	e7eb      	b.n	800804a <_printf_i+0x206>
 8008072:	2500      	movs	r5, #0
 8008074:	f104 0619 	add.w	r6, r4, #25
 8008078:	e7f5      	b.n	8008066 <_printf_i+0x222>
 800807a:	bf00      	nop
 800807c:	0800c086 	.word	0x0800c086
 8008080:	0800c097 	.word	0x0800c097

08008084 <_scanf_float>:
 8008084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008088:	b087      	sub	sp, #28
 800808a:	4617      	mov	r7, r2
 800808c:	4680      	mov	r8, r0
 800808e:	460c      	mov	r4, r1
 8008090:	9303      	str	r3, [sp, #12]
 8008092:	688b      	ldr	r3, [r1, #8]
 8008094:	1e5a      	subs	r2, r3, #1
 8008096:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800809a:	460a      	mov	r2, r1
 800809c:	bf89      	itett	hi
 800809e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80080a2:	f04f 0b00 	movls.w	fp, #0
 80080a6:	eb03 0b05 	addhi.w	fp, r3, r5
 80080aa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80080ae:	f04f 0500 	mov.w	r5, #0
 80080b2:	bf88      	it	hi
 80080b4:	608b      	strhi	r3, [r1, #8]
 80080b6:	680b      	ldr	r3, [r1, #0]
 80080b8:	46aa      	mov	sl, r5
 80080ba:	46a9      	mov	r9, r5
 80080bc:	9502      	str	r5, [sp, #8]
 80080be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80080c2:	f842 3b1c 	str.w	r3, [r2], #28
 80080c6:	4616      	mov	r6, r2
 80080c8:	9201      	str	r2, [sp, #4]
 80080ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80080ce:	68a2      	ldr	r2, [r4, #8]
 80080d0:	b152      	cbz	r2, 80080e8 <_scanf_float+0x64>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80080d8:	d864      	bhi.n	80081a4 <_scanf_float+0x120>
 80080da:	2b40      	cmp	r3, #64	@ 0x40
 80080dc:	d83c      	bhi.n	8008158 <_scanf_float+0xd4>
 80080de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80080e2:	b2c8      	uxtb	r0, r1
 80080e4:	280e      	cmp	r0, #14
 80080e6:	d93a      	bls.n	800815e <_scanf_float+0xda>
 80080e8:	f1b9 0f00 	cmp.w	r9, #0
 80080ec:	d003      	beq.n	80080f6 <_scanf_float+0x72>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080fa:	f1ba 0f01 	cmp.w	sl, #1
 80080fe:	f200 8117 	bhi.w	8008330 <_scanf_float+0x2ac>
 8008102:	9b01      	ldr	r3, [sp, #4]
 8008104:	429e      	cmp	r6, r3
 8008106:	f200 8108 	bhi.w	800831a <_scanf_float+0x296>
 800810a:	2001      	movs	r0, #1
 800810c:	b007      	add	sp, #28
 800810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008112:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008116:	2a0d      	cmp	r2, #13
 8008118:	d8e6      	bhi.n	80080e8 <_scanf_float+0x64>
 800811a:	a101      	add	r1, pc, #4	@ (adr r1, 8008120 <_scanf_float+0x9c>)
 800811c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008120:	08008267 	.word	0x08008267
 8008124:	080080e9 	.word	0x080080e9
 8008128:	080080e9 	.word	0x080080e9
 800812c:	080080e9 	.word	0x080080e9
 8008130:	080082c7 	.word	0x080082c7
 8008134:	0800829f 	.word	0x0800829f
 8008138:	080080e9 	.word	0x080080e9
 800813c:	080080e9 	.word	0x080080e9
 8008140:	08008275 	.word	0x08008275
 8008144:	080080e9 	.word	0x080080e9
 8008148:	080080e9 	.word	0x080080e9
 800814c:	080080e9 	.word	0x080080e9
 8008150:	080080e9 	.word	0x080080e9
 8008154:	0800822d 	.word	0x0800822d
 8008158:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800815c:	e7db      	b.n	8008116 <_scanf_float+0x92>
 800815e:	290e      	cmp	r1, #14
 8008160:	d8c2      	bhi.n	80080e8 <_scanf_float+0x64>
 8008162:	a001      	add	r0, pc, #4	@ (adr r0, 8008168 <_scanf_float+0xe4>)
 8008164:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008168:	0800821d 	.word	0x0800821d
 800816c:	080080e9 	.word	0x080080e9
 8008170:	0800821d 	.word	0x0800821d
 8008174:	080082b3 	.word	0x080082b3
 8008178:	080080e9 	.word	0x080080e9
 800817c:	080081c5 	.word	0x080081c5
 8008180:	08008203 	.word	0x08008203
 8008184:	08008203 	.word	0x08008203
 8008188:	08008203 	.word	0x08008203
 800818c:	08008203 	.word	0x08008203
 8008190:	08008203 	.word	0x08008203
 8008194:	08008203 	.word	0x08008203
 8008198:	08008203 	.word	0x08008203
 800819c:	08008203 	.word	0x08008203
 80081a0:	08008203 	.word	0x08008203
 80081a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80081a6:	d809      	bhi.n	80081bc <_scanf_float+0x138>
 80081a8:	2b60      	cmp	r3, #96	@ 0x60
 80081aa:	d8b2      	bhi.n	8008112 <_scanf_float+0x8e>
 80081ac:	2b54      	cmp	r3, #84	@ 0x54
 80081ae:	d07b      	beq.n	80082a8 <_scanf_float+0x224>
 80081b0:	2b59      	cmp	r3, #89	@ 0x59
 80081b2:	d199      	bne.n	80080e8 <_scanf_float+0x64>
 80081b4:	2d07      	cmp	r5, #7
 80081b6:	d197      	bne.n	80080e8 <_scanf_float+0x64>
 80081b8:	2508      	movs	r5, #8
 80081ba:	e02c      	b.n	8008216 <_scanf_float+0x192>
 80081bc:	2b74      	cmp	r3, #116	@ 0x74
 80081be:	d073      	beq.n	80082a8 <_scanf_float+0x224>
 80081c0:	2b79      	cmp	r3, #121	@ 0x79
 80081c2:	e7f6      	b.n	80081b2 <_scanf_float+0x12e>
 80081c4:	6821      	ldr	r1, [r4, #0]
 80081c6:	05c8      	lsls	r0, r1, #23
 80081c8:	d51b      	bpl.n	8008202 <_scanf_float+0x17e>
 80081ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80081ce:	f109 0901 	add.w	r9, r9, #1
 80081d2:	6021      	str	r1, [r4, #0]
 80081d4:	f1bb 0f00 	cmp.w	fp, #0
 80081d8:	d003      	beq.n	80081e2 <_scanf_float+0x15e>
 80081da:	3201      	adds	r2, #1
 80081dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081e0:	60a2      	str	r2, [r4, #8]
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	60a3      	str	r3, [r4, #8]
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	3301      	adds	r3, #1
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	607b      	str	r3, [r7, #4]
 80081f6:	f340 8087 	ble.w	8008308 <_scanf_float+0x284>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	3301      	adds	r3, #1
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	e765      	b.n	80080ce <_scanf_float+0x4a>
 8008202:	eb1a 0105 	adds.w	r1, sl, r5
 8008206:	f47f af6f 	bne.w	80080e8 <_scanf_float+0x64>
 800820a:	6822      	ldr	r2, [r4, #0]
 800820c:	460d      	mov	r5, r1
 800820e:	468a      	mov	sl, r1
 8008210:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008214:	6022      	str	r2, [r4, #0]
 8008216:	f806 3b01 	strb.w	r3, [r6], #1
 800821a:	e7e2      	b.n	80081e2 <_scanf_float+0x15e>
 800821c:	6822      	ldr	r2, [r4, #0]
 800821e:	0610      	lsls	r0, r2, #24
 8008220:	f57f af62 	bpl.w	80080e8 <_scanf_float+0x64>
 8008224:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008228:	6022      	str	r2, [r4, #0]
 800822a:	e7f4      	b.n	8008216 <_scanf_float+0x192>
 800822c:	f1ba 0f00 	cmp.w	sl, #0
 8008230:	d10e      	bne.n	8008250 <_scanf_float+0x1cc>
 8008232:	f1b9 0f00 	cmp.w	r9, #0
 8008236:	d10e      	bne.n	8008256 <_scanf_float+0x1d2>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800823e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008242:	d108      	bne.n	8008256 <_scanf_float+0x1d2>
 8008244:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008248:	f04f 0a01 	mov.w	sl, #1
 800824c:	6022      	str	r2, [r4, #0]
 800824e:	e7e2      	b.n	8008216 <_scanf_float+0x192>
 8008250:	f1ba 0f02 	cmp.w	sl, #2
 8008254:	d055      	beq.n	8008302 <_scanf_float+0x27e>
 8008256:	2d01      	cmp	r5, #1
 8008258:	d002      	beq.n	8008260 <_scanf_float+0x1dc>
 800825a:	2d04      	cmp	r5, #4
 800825c:	f47f af44 	bne.w	80080e8 <_scanf_float+0x64>
 8008260:	3501      	adds	r5, #1
 8008262:	b2ed      	uxtb	r5, r5
 8008264:	e7d7      	b.n	8008216 <_scanf_float+0x192>
 8008266:	f1ba 0f01 	cmp.w	sl, #1
 800826a:	f47f af3d 	bne.w	80080e8 <_scanf_float+0x64>
 800826e:	f04f 0a02 	mov.w	sl, #2
 8008272:	e7d0      	b.n	8008216 <_scanf_float+0x192>
 8008274:	b97d      	cbnz	r5, 8008296 <_scanf_float+0x212>
 8008276:	f1b9 0f00 	cmp.w	r9, #0
 800827a:	f47f af38 	bne.w	80080ee <_scanf_float+0x6a>
 800827e:	6822      	ldr	r2, [r4, #0]
 8008280:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008284:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008288:	f040 8107 	bne.w	800849a <_scanf_float+0x416>
 800828c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008290:	2501      	movs	r5, #1
 8008292:	6022      	str	r2, [r4, #0]
 8008294:	e7bf      	b.n	8008216 <_scanf_float+0x192>
 8008296:	2d03      	cmp	r5, #3
 8008298:	d0e2      	beq.n	8008260 <_scanf_float+0x1dc>
 800829a:	2d05      	cmp	r5, #5
 800829c:	e7de      	b.n	800825c <_scanf_float+0x1d8>
 800829e:	2d02      	cmp	r5, #2
 80082a0:	f47f af22 	bne.w	80080e8 <_scanf_float+0x64>
 80082a4:	2503      	movs	r5, #3
 80082a6:	e7b6      	b.n	8008216 <_scanf_float+0x192>
 80082a8:	2d06      	cmp	r5, #6
 80082aa:	f47f af1d 	bne.w	80080e8 <_scanf_float+0x64>
 80082ae:	2507      	movs	r5, #7
 80082b0:	e7b1      	b.n	8008216 <_scanf_float+0x192>
 80082b2:	6822      	ldr	r2, [r4, #0]
 80082b4:	0591      	lsls	r1, r2, #22
 80082b6:	f57f af17 	bpl.w	80080e8 <_scanf_float+0x64>
 80082ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80082be:	f8cd 9008 	str.w	r9, [sp, #8]
 80082c2:	6022      	str	r2, [r4, #0]
 80082c4:	e7a7      	b.n	8008216 <_scanf_float+0x192>
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80082cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80082d0:	d006      	beq.n	80082e0 <_scanf_float+0x25c>
 80082d2:	0550      	lsls	r0, r2, #21
 80082d4:	f57f af08 	bpl.w	80080e8 <_scanf_float+0x64>
 80082d8:	f1b9 0f00 	cmp.w	r9, #0
 80082dc:	f000 80dd 	beq.w	800849a <_scanf_float+0x416>
 80082e0:	0591      	lsls	r1, r2, #22
 80082e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80082e6:	bf58      	it	pl
 80082e8:	9902      	ldrpl	r1, [sp, #8]
 80082ea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80082ee:	bf58      	it	pl
 80082f0:	eba9 0101 	subpl.w	r1, r9, r1
 80082f4:	6022      	str	r2, [r4, #0]
 80082f6:	f04f 0900 	mov.w	r9, #0
 80082fa:	bf58      	it	pl
 80082fc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008300:	e789      	b.n	8008216 <_scanf_float+0x192>
 8008302:	f04f 0a03 	mov.w	sl, #3
 8008306:	e786      	b.n	8008216 <_scanf_float+0x192>
 8008308:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800830c:	4639      	mov	r1, r7
 800830e:	4640      	mov	r0, r8
 8008310:	4798      	blx	r3
 8008312:	2800      	cmp	r0, #0
 8008314:	f43f aedb 	beq.w	80080ce <_scanf_float+0x4a>
 8008318:	e6e6      	b.n	80080e8 <_scanf_float+0x64>
 800831a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800831e:	463a      	mov	r2, r7
 8008320:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008324:	4640      	mov	r0, r8
 8008326:	4798      	blx	r3
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	3b01      	subs	r3, #1
 800832c:	6123      	str	r3, [r4, #16]
 800832e:	e6e8      	b.n	8008102 <_scanf_float+0x7e>
 8008330:	1e6b      	subs	r3, r5, #1
 8008332:	2b06      	cmp	r3, #6
 8008334:	d824      	bhi.n	8008380 <_scanf_float+0x2fc>
 8008336:	2d02      	cmp	r5, #2
 8008338:	d836      	bhi.n	80083a8 <_scanf_float+0x324>
 800833a:	9b01      	ldr	r3, [sp, #4]
 800833c:	429e      	cmp	r6, r3
 800833e:	f67f aee4 	bls.w	800810a <_scanf_float+0x86>
 8008342:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008346:	463a      	mov	r2, r7
 8008348:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800834c:	4640      	mov	r0, r8
 800834e:	4798      	blx	r3
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	3b01      	subs	r3, #1
 8008354:	6123      	str	r3, [r4, #16]
 8008356:	e7f0      	b.n	800833a <_scanf_float+0x2b6>
 8008358:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800835c:	463a      	mov	r2, r7
 800835e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008362:	4640      	mov	r0, r8
 8008364:	4798      	blx	r3
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	3b01      	subs	r3, #1
 800836a:	6123      	str	r3, [r4, #16]
 800836c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008370:	fa5f fa8a 	uxtb.w	sl, sl
 8008374:	f1ba 0f02 	cmp.w	sl, #2
 8008378:	d1ee      	bne.n	8008358 <_scanf_float+0x2d4>
 800837a:	3d03      	subs	r5, #3
 800837c:	b2ed      	uxtb	r5, r5
 800837e:	1b76      	subs	r6, r6, r5
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	05da      	lsls	r2, r3, #23
 8008384:	d52f      	bpl.n	80083e6 <_scanf_float+0x362>
 8008386:	055b      	lsls	r3, r3, #21
 8008388:	d511      	bpl.n	80083ae <_scanf_float+0x32a>
 800838a:	9b01      	ldr	r3, [sp, #4]
 800838c:	429e      	cmp	r6, r3
 800838e:	f67f aebc 	bls.w	800810a <_scanf_float+0x86>
 8008392:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008396:	463a      	mov	r2, r7
 8008398:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800839c:	4640      	mov	r0, r8
 800839e:	4798      	blx	r3
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	6123      	str	r3, [r4, #16]
 80083a6:	e7f0      	b.n	800838a <_scanf_float+0x306>
 80083a8:	46aa      	mov	sl, r5
 80083aa:	46b3      	mov	fp, r6
 80083ac:	e7de      	b.n	800836c <_scanf_float+0x2e8>
 80083ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083b2:	1e75      	subs	r5, r6, #1
 80083b4:	6923      	ldr	r3, [r4, #16]
 80083b6:	2965      	cmp	r1, #101	@ 0x65
 80083b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80083bc:	6123      	str	r3, [r4, #16]
 80083be:	d00c      	beq.n	80083da <_scanf_float+0x356>
 80083c0:	2945      	cmp	r1, #69	@ 0x45
 80083c2:	d00a      	beq.n	80083da <_scanf_float+0x356>
 80083c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083c8:	463a      	mov	r2, r7
 80083ca:	4640      	mov	r0, r8
 80083cc:	1eb5      	subs	r5, r6, #2
 80083ce:	4798      	blx	r3
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	6123      	str	r3, [r4, #16]
 80083da:	462e      	mov	r6, r5
 80083dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083e0:	463a      	mov	r2, r7
 80083e2:	4640      	mov	r0, r8
 80083e4:	4798      	blx	r3
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	f012 0210 	ands.w	r2, r2, #16
 80083ec:	d001      	beq.n	80083f2 <_scanf_float+0x36e>
 80083ee:	2000      	movs	r0, #0
 80083f0:	e68c      	b.n	800810c <_scanf_float+0x88>
 80083f2:	7032      	strb	r2, [r6, #0]
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80083fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083fe:	d11c      	bne.n	800843a <_scanf_float+0x3b6>
 8008400:	9b02      	ldr	r3, [sp, #8]
 8008402:	454b      	cmp	r3, r9
 8008404:	eba3 0209 	sub.w	r2, r3, r9
 8008408:	d123      	bne.n	8008452 <_scanf_float+0x3ce>
 800840a:	2200      	movs	r2, #0
 800840c:	9901      	ldr	r1, [sp, #4]
 800840e:	4640      	mov	r0, r8
 8008410:	f002 fc4a 	bl	800aca8 <_strtod_r>
 8008414:	6821      	ldr	r1, [r4, #0]
 8008416:	9b03      	ldr	r3, [sp, #12]
 8008418:	f011 0f02 	tst.w	r1, #2
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	ec57 6b10 	vmov	r6, r7, d0
 8008422:	f103 0204 	add.w	r2, r3, #4
 8008426:	d01f      	beq.n	8008468 <_scanf_float+0x3e4>
 8008428:	9903      	ldr	r1, [sp, #12]
 800842a:	600a      	str	r2, [r1, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	e9c3 6700 	strd	r6, r7, [r3]
 8008432:	68e3      	ldr	r3, [r4, #12]
 8008434:	3301      	adds	r3, #1
 8008436:	60e3      	str	r3, [r4, #12]
 8008438:	e7d9      	b.n	80083ee <_scanf_float+0x36a>
 800843a:	9b04      	ldr	r3, [sp, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0e4      	beq.n	800840a <_scanf_float+0x386>
 8008440:	9905      	ldr	r1, [sp, #20]
 8008442:	230a      	movs	r3, #10
 8008444:	4640      	mov	r0, r8
 8008446:	3101      	adds	r1, #1
 8008448:	f002 fcae 	bl	800ada8 <_strtol_r>
 800844c:	9b04      	ldr	r3, [sp, #16]
 800844e:	9e05      	ldr	r6, [sp, #20]
 8008450:	1ac2      	subs	r2, r0, r3
 8008452:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008456:	4912      	ldr	r1, [pc, #72]	@ (80084a0 <_scanf_float+0x41c>)
 8008458:	429e      	cmp	r6, r3
 800845a:	bf28      	it	cs
 800845c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f917 	bl	8008694 <siprintf>
 8008466:	e7d0      	b.n	800840a <_scanf_float+0x386>
 8008468:	f011 0f04 	tst.w	r1, #4
 800846c:	9903      	ldr	r1, [sp, #12]
 800846e:	600a      	str	r2, [r1, #0]
 8008470:	d1dc      	bne.n	800842c <_scanf_float+0x3a8>
 8008472:	681d      	ldr	r5, [r3, #0]
 8008474:	4632      	mov	r2, r6
 8008476:	463b      	mov	r3, r7
 8008478:	4630      	mov	r0, r6
 800847a:	4639      	mov	r1, r7
 800847c:	f7f8 fb5a 	bl	8000b34 <__aeabi_dcmpun>
 8008480:	b128      	cbz	r0, 800848e <_scanf_float+0x40a>
 8008482:	4808      	ldr	r0, [pc, #32]	@ (80084a4 <_scanf_float+0x420>)
 8008484:	f000 f9f8 	bl	8008878 <nanf>
 8008488:	ed85 0a00 	vstr	s0, [r5]
 800848c:	e7d1      	b.n	8008432 <_scanf_float+0x3ae>
 800848e:	4630      	mov	r0, r6
 8008490:	4639      	mov	r1, r7
 8008492:	f7f8 fbad 	bl	8000bf0 <__aeabi_d2f>
 8008496:	6028      	str	r0, [r5, #0]
 8008498:	e7cb      	b.n	8008432 <_scanf_float+0x3ae>
 800849a:	f04f 0900 	mov.w	r9, #0
 800849e:	e62a      	b.n	80080f6 <_scanf_float+0x72>
 80084a0:	0800c0a8 	.word	0x0800c0a8
 80084a4:	0800c43d 	.word	0x0800c43d

080084a8 <std>:
 80084a8:	2300      	movs	r3, #0
 80084aa:	b510      	push	{r4, lr}
 80084ac:	4604      	mov	r4, r0
 80084ae:	6083      	str	r3, [r0, #8]
 80084b0:	8181      	strh	r1, [r0, #12]
 80084b2:	4619      	mov	r1, r3
 80084b4:	6643      	str	r3, [r0, #100]	@ 0x64
 80084b6:	81c2      	strh	r2, [r0, #14]
 80084b8:	2208      	movs	r2, #8
 80084ba:	6183      	str	r3, [r0, #24]
 80084bc:	e9c0 3300 	strd	r3, r3, [r0]
 80084c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084c4:	305c      	adds	r0, #92	@ 0x5c
 80084c6:	f000 f948 	bl	800875a <memset>
 80084ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <std+0x58>)
 80084cc:	6224      	str	r4, [r4, #32]
 80084ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80084d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <std+0x5c>)
 80084d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008508 <std+0x60>)
 80084d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084d8:	4b0c      	ldr	r3, [pc, #48]	@ (800850c <std+0x64>)
 80084da:	6323      	str	r3, [r4, #48]	@ 0x30
 80084dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008510 <std+0x68>)
 80084de:	429c      	cmp	r4, r3
 80084e0:	d006      	beq.n	80084f0 <std+0x48>
 80084e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084e6:	4294      	cmp	r4, r2
 80084e8:	d002      	beq.n	80084f0 <std+0x48>
 80084ea:	33d0      	adds	r3, #208	@ 0xd0
 80084ec:	429c      	cmp	r4, r3
 80084ee:	d105      	bne.n	80084fc <std+0x54>
 80084f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f8:	f000 b9ac 	b.w	8008854 <__retarget_lock_init_recursive>
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	bf00      	nop
 8008500:	080086d5 	.word	0x080086d5
 8008504:	080086f7 	.word	0x080086f7
 8008508:	0800872f 	.word	0x0800872f
 800850c:	08008753 	.word	0x08008753
 8008510:	20000318 	.word	0x20000318

08008514 <stdio_exit_handler>:
 8008514:	4a02      	ldr	r2, [pc, #8]	@ (8008520 <stdio_exit_handler+0xc>)
 8008516:	4903      	ldr	r1, [pc, #12]	@ (8008524 <stdio_exit_handler+0x10>)
 8008518:	4803      	ldr	r0, [pc, #12]	@ (8008528 <stdio_exit_handler+0x14>)
 800851a:	f000 b869 	b.w	80085f0 <_fwalk_sglue>
 800851e:	bf00      	nop
 8008520:	2000000c 	.word	0x2000000c
 8008524:	0800b165 	.word	0x0800b165
 8008528:	2000001c 	.word	0x2000001c

0800852c <cleanup_stdio>:
 800852c:	6841      	ldr	r1, [r0, #4]
 800852e:	4b0c      	ldr	r3, [pc, #48]	@ (8008560 <cleanup_stdio+0x34>)
 8008530:	4299      	cmp	r1, r3
 8008532:	b510      	push	{r4, lr}
 8008534:	4604      	mov	r4, r0
 8008536:	d001      	beq.n	800853c <cleanup_stdio+0x10>
 8008538:	f002 fe14 	bl	800b164 <_fflush_r>
 800853c:	68a1      	ldr	r1, [r4, #8]
 800853e:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <cleanup_stdio+0x38>)
 8008540:	4299      	cmp	r1, r3
 8008542:	d002      	beq.n	800854a <cleanup_stdio+0x1e>
 8008544:	4620      	mov	r0, r4
 8008546:	f002 fe0d 	bl	800b164 <_fflush_r>
 800854a:	68e1      	ldr	r1, [r4, #12]
 800854c:	4b06      	ldr	r3, [pc, #24]	@ (8008568 <cleanup_stdio+0x3c>)
 800854e:	4299      	cmp	r1, r3
 8008550:	d004      	beq.n	800855c <cleanup_stdio+0x30>
 8008552:	4620      	mov	r0, r4
 8008554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008558:	f002 be04 	b.w	800b164 <_fflush_r>
 800855c:	bd10      	pop	{r4, pc}
 800855e:	bf00      	nop
 8008560:	20000318 	.word	0x20000318
 8008564:	20000380 	.word	0x20000380
 8008568:	200003e8 	.word	0x200003e8

0800856c <global_stdio_init.part.0>:
 800856c:	b510      	push	{r4, lr}
 800856e:	4b0b      	ldr	r3, [pc, #44]	@ (800859c <global_stdio_init.part.0+0x30>)
 8008570:	2104      	movs	r1, #4
 8008572:	4c0b      	ldr	r4, [pc, #44]	@ (80085a0 <global_stdio_init.part.0+0x34>)
 8008574:	4a0b      	ldr	r2, [pc, #44]	@ (80085a4 <global_stdio_init.part.0+0x38>)
 8008576:	4620      	mov	r0, r4
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	2200      	movs	r2, #0
 800857c:	f7ff ff94 	bl	80084a8 <std>
 8008580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008584:	2201      	movs	r2, #1
 8008586:	2109      	movs	r1, #9
 8008588:	f7ff ff8e 	bl	80084a8 <std>
 800858c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008590:	2202      	movs	r2, #2
 8008592:	2112      	movs	r1, #18
 8008594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008598:	f7ff bf86 	b.w	80084a8 <std>
 800859c:	20000450 	.word	0x20000450
 80085a0:	20000318 	.word	0x20000318
 80085a4:	08008515 	.word	0x08008515

080085a8 <__sfp_lock_acquire>:
 80085a8:	4801      	ldr	r0, [pc, #4]	@ (80085b0 <__sfp_lock_acquire+0x8>)
 80085aa:	f000 b954 	b.w	8008856 <__retarget_lock_acquire_recursive>
 80085ae:	bf00      	nop
 80085b0:	20000459 	.word	0x20000459

080085b4 <__sfp_lock_release>:
 80085b4:	4801      	ldr	r0, [pc, #4]	@ (80085bc <__sfp_lock_release+0x8>)
 80085b6:	f000 b94f 	b.w	8008858 <__retarget_lock_release_recursive>
 80085ba:	bf00      	nop
 80085bc:	20000459 	.word	0x20000459

080085c0 <__sinit>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	4604      	mov	r4, r0
 80085c4:	f7ff fff0 	bl	80085a8 <__sfp_lock_acquire>
 80085c8:	6a23      	ldr	r3, [r4, #32]
 80085ca:	b11b      	cbz	r3, 80085d4 <__sinit+0x14>
 80085cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d0:	f7ff bff0 	b.w	80085b4 <__sfp_lock_release>
 80085d4:	4b04      	ldr	r3, [pc, #16]	@ (80085e8 <__sinit+0x28>)
 80085d6:	6223      	str	r3, [r4, #32]
 80085d8:	4b04      	ldr	r3, [pc, #16]	@ (80085ec <__sinit+0x2c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f5      	bne.n	80085cc <__sinit+0xc>
 80085e0:	f7ff ffc4 	bl	800856c <global_stdio_init.part.0>
 80085e4:	e7f2      	b.n	80085cc <__sinit+0xc>
 80085e6:	bf00      	nop
 80085e8:	0800852d 	.word	0x0800852d
 80085ec:	20000450 	.word	0x20000450

080085f0 <_fwalk_sglue>:
 80085f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f4:	4607      	mov	r7, r0
 80085f6:	4688      	mov	r8, r1
 80085f8:	4614      	mov	r4, r2
 80085fa:	2600      	movs	r6, #0
 80085fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008600:	f1b9 0901 	subs.w	r9, r9, #1
 8008604:	d505      	bpl.n	8008612 <_fwalk_sglue+0x22>
 8008606:	6824      	ldr	r4, [r4, #0]
 8008608:	2c00      	cmp	r4, #0
 800860a:	d1f7      	bne.n	80085fc <_fwalk_sglue+0xc>
 800860c:	4630      	mov	r0, r6
 800860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008612:	89ab      	ldrh	r3, [r5, #12]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d907      	bls.n	8008628 <_fwalk_sglue+0x38>
 8008618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800861c:	3301      	adds	r3, #1
 800861e:	d003      	beq.n	8008628 <_fwalk_sglue+0x38>
 8008620:	4629      	mov	r1, r5
 8008622:	4638      	mov	r0, r7
 8008624:	47c0      	blx	r8
 8008626:	4306      	orrs	r6, r0
 8008628:	3568      	adds	r5, #104	@ 0x68
 800862a:	e7e9      	b.n	8008600 <_fwalk_sglue+0x10>

0800862c <sniprintf>:
 800862c:	b40c      	push	{r2, r3}
 800862e:	4b18      	ldr	r3, [pc, #96]	@ (8008690 <sniprintf+0x64>)
 8008630:	b530      	push	{r4, r5, lr}
 8008632:	1e0c      	subs	r4, r1, #0
 8008634:	b09d      	sub	sp, #116	@ 0x74
 8008636:	681d      	ldr	r5, [r3, #0]
 8008638:	da08      	bge.n	800864c <sniprintf+0x20>
 800863a:	238b      	movs	r3, #139	@ 0x8b
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	b01d      	add	sp, #116	@ 0x74
 8008644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008648:	b002      	add	sp, #8
 800864a:	4770      	bx	lr
 800864c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008650:	9002      	str	r0, [sp, #8]
 8008652:	9006      	str	r0, [sp, #24]
 8008654:	a902      	add	r1, sp, #8
 8008656:	f8ad 3014 	strh.w	r3, [sp, #20]
 800865a:	bf14      	ite	ne
 800865c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008660:	4623      	moveq	r3, r4
 8008662:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008664:	4628      	mov	r0, r5
 8008666:	9304      	str	r3, [sp, #16]
 8008668:	9307      	str	r3, [sp, #28]
 800866a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800866e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008672:	ab21      	add	r3, sp, #132	@ 0x84
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	f002 fbf5 	bl	800ae64 <_svfiprintf_r>
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	bfbc      	itt	lt
 800867e:	238b      	movlt	r3, #139	@ 0x8b
 8008680:	602b      	strlt	r3, [r5, #0]
 8008682:	2c00      	cmp	r4, #0
 8008684:	d0dd      	beq.n	8008642 <sniprintf+0x16>
 8008686:	9b02      	ldr	r3, [sp, #8]
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e7d9      	b.n	8008642 <sniprintf+0x16>
 800868e:	bf00      	nop
 8008690:	20000018 	.word	0x20000018

08008694 <siprintf>:
 8008694:	b40e      	push	{r1, r2, r3}
 8008696:	b500      	push	{lr}
 8008698:	b09c      	sub	sp, #112	@ 0x70
 800869a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800869e:	ab1d      	add	r3, sp, #116	@ 0x74
 80086a0:	9002      	str	r0, [sp, #8]
 80086a2:	9006      	str	r0, [sp, #24]
 80086a4:	9107      	str	r1, [sp, #28]
 80086a6:	9104      	str	r1, [sp, #16]
 80086a8:	4808      	ldr	r0, [pc, #32]	@ (80086cc <siprintf+0x38>)
 80086aa:	4909      	ldr	r1, [pc, #36]	@ (80086d0 <siprintf+0x3c>)
 80086ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b0:	9105      	str	r1, [sp, #20]
 80086b2:	a902      	add	r1, sp, #8
 80086b4:	6800      	ldr	r0, [r0, #0]
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	f002 fbd4 	bl	800ae64 <_svfiprintf_r>
 80086bc:	9b02      	ldr	r3, [sp, #8]
 80086be:	2200      	movs	r2, #0
 80086c0:	701a      	strb	r2, [r3, #0]
 80086c2:	b01c      	add	sp, #112	@ 0x70
 80086c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086c8:	b003      	add	sp, #12
 80086ca:	4770      	bx	lr
 80086cc:	20000018 	.word	0x20000018
 80086d0:	ffff0208 	.word	0xffff0208

080086d4 <__sread>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	460c      	mov	r4, r1
 80086d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086dc:	f000 f86c 	bl	80087b8 <_read_r>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	bfab      	itete	ge
 80086e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086e6:	89a3      	ldrhlt	r3, [r4, #12]
 80086e8:	181b      	addge	r3, r3, r0
 80086ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086ee:	bfac      	ite	ge
 80086f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086f2:	81a3      	strhlt	r3, [r4, #12]
 80086f4:	bd10      	pop	{r4, pc}

080086f6 <__swrite>:
 80086f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fa:	461f      	mov	r7, r3
 80086fc:	898b      	ldrh	r3, [r1, #12]
 80086fe:	4605      	mov	r5, r0
 8008700:	460c      	mov	r4, r1
 8008702:	05db      	lsls	r3, r3, #23
 8008704:	4616      	mov	r6, r2
 8008706:	d505      	bpl.n	8008714 <__swrite+0x1e>
 8008708:	2302      	movs	r3, #2
 800870a:	2200      	movs	r2, #0
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	f000 f840 	bl	8008794 <_lseek_r>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	4632      	mov	r2, r6
 8008718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800871c:	4628      	mov	r0, r5
 800871e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	463b      	mov	r3, r7
 8008726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800872a:	f000 b857 	b.w	80087dc <_write_r>

0800872e <__sseek>:
 800872e:	b510      	push	{r4, lr}
 8008730:	460c      	mov	r4, r1
 8008732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008736:	f000 f82d 	bl	8008794 <_lseek_r>
 800873a:	1c43      	adds	r3, r0, #1
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	bf15      	itete	ne
 8008740:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008742:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008746:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800874a:	81a3      	strheq	r3, [r4, #12]
 800874c:	bf18      	it	ne
 800874e:	81a3      	strhne	r3, [r4, #12]
 8008750:	bd10      	pop	{r4, pc}

08008752 <__sclose>:
 8008752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008756:	f000 b80d 	b.w	8008774 <_close_r>

0800875a <memset>:
 800875a:	4402      	add	r2, r0
 800875c:	4603      	mov	r3, r0
 800875e:	4293      	cmp	r3, r2
 8008760:	d100      	bne.n	8008764 <memset+0xa>
 8008762:	4770      	bx	lr
 8008764:	f803 1b01 	strb.w	r1, [r3], #1
 8008768:	e7f9      	b.n	800875e <memset+0x4>
	...

0800876c <_localeconv_r>:
 800876c:	4800      	ldr	r0, [pc, #0]	@ (8008770 <_localeconv_r+0x4>)
 800876e:	4770      	bx	lr
 8008770:	20000158 	.word	0x20000158

08008774 <_close_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	2300      	movs	r3, #0
 8008778:	4d05      	ldr	r5, [pc, #20]	@ (8008790 <_close_r+0x1c>)
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	602b      	str	r3, [r5, #0]
 8008780:	f7f8 ff4a 	bl	8001618 <_close>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_close_r+0x1a>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_close_r+0x1a>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20000454 	.word	0x20000454

08008794 <_lseek_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4604      	mov	r4, r0
 8008798:	4d06      	ldr	r5, [pc, #24]	@ (80087b4 <_lseek_r+0x20>)
 800879a:	4608      	mov	r0, r1
 800879c:	4611      	mov	r1, r2
 800879e:	2200      	movs	r2, #0
 80087a0:	602a      	str	r2, [r5, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	f7f8 ff5f 	bl	8001666 <_lseek>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_lseek_r+0x1e>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_lseek_r+0x1e>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20000454 	.word	0x20000454

080087b8 <_read_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4604      	mov	r4, r0
 80087bc:	4d06      	ldr	r5, [pc, #24]	@ (80087d8 <_read_r+0x20>)
 80087be:	4608      	mov	r0, r1
 80087c0:	4611      	mov	r1, r2
 80087c2:	2200      	movs	r2, #0
 80087c4:	602a      	str	r2, [r5, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	f7f8 feed 	bl	80015a6 <_read>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_read_r+0x1e>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_read_r+0x1e>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	20000454 	.word	0x20000454

080087dc <_write_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4604      	mov	r4, r0
 80087e0:	4d06      	ldr	r5, [pc, #24]	@ (80087fc <_write_r+0x20>)
 80087e2:	4608      	mov	r0, r1
 80087e4:	4611      	mov	r1, r2
 80087e6:	2200      	movs	r2, #0
 80087e8:	602a      	str	r2, [r5, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	f7f8 fef8 	bl	80015e0 <_write>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_write_r+0x1e>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_write_r+0x1e>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	20000454 	.word	0x20000454

08008800 <__errno>:
 8008800:	4b01      	ldr	r3, [pc, #4]	@ (8008808 <__errno+0x8>)
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	20000018 	.word	0x20000018

0800880c <__libc_init_array>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4d0d      	ldr	r5, [pc, #52]	@ (8008844 <__libc_init_array+0x38>)
 8008810:	2600      	movs	r6, #0
 8008812:	4c0d      	ldr	r4, [pc, #52]	@ (8008848 <__libc_init_array+0x3c>)
 8008814:	1b64      	subs	r4, r4, r5
 8008816:	10a4      	asrs	r4, r4, #2
 8008818:	42a6      	cmp	r6, r4
 800881a:	d109      	bne.n	8008830 <__libc_init_array+0x24>
 800881c:	4d0b      	ldr	r5, [pc, #44]	@ (800884c <__libc_init_array+0x40>)
 800881e:	2600      	movs	r6, #0
 8008820:	4c0b      	ldr	r4, [pc, #44]	@ (8008850 <__libc_init_array+0x44>)
 8008822:	f003 fb8b 	bl	800bf3c <_init>
 8008826:	1b64      	subs	r4, r4, r5
 8008828:	10a4      	asrs	r4, r4, #2
 800882a:	42a6      	cmp	r6, r4
 800882c:	d105      	bne.n	800883a <__libc_init_array+0x2e>
 800882e:	bd70      	pop	{r4, r5, r6, pc}
 8008830:	f855 3b04 	ldr.w	r3, [r5], #4
 8008834:	3601      	adds	r6, #1
 8008836:	4798      	blx	r3
 8008838:	e7ee      	b.n	8008818 <__libc_init_array+0xc>
 800883a:	f855 3b04 	ldr.w	r3, [r5], #4
 800883e:	3601      	adds	r6, #1
 8008840:	4798      	blx	r3
 8008842:	e7f2      	b.n	800882a <__libc_init_array+0x1e>
 8008844:	0800c4a8 	.word	0x0800c4a8
 8008848:	0800c4a8 	.word	0x0800c4a8
 800884c:	0800c4a8 	.word	0x0800c4a8
 8008850:	0800c4ac 	.word	0x0800c4ac

08008854 <__retarget_lock_init_recursive>:
 8008854:	4770      	bx	lr

08008856 <__retarget_lock_acquire_recursive>:
 8008856:	4770      	bx	lr

08008858 <__retarget_lock_release_recursive>:
 8008858:	4770      	bx	lr

0800885a <memchr>:
 800885a:	b2c9      	uxtb	r1, r1
 800885c:	4603      	mov	r3, r0
 800885e:	4402      	add	r2, r0
 8008860:	b510      	push	{r4, lr}
 8008862:	4293      	cmp	r3, r2
 8008864:	4618      	mov	r0, r3
 8008866:	d101      	bne.n	800886c <memchr+0x12>
 8008868:	2000      	movs	r0, #0
 800886a:	e003      	b.n	8008874 <memchr+0x1a>
 800886c:	7804      	ldrb	r4, [r0, #0]
 800886e:	3301      	adds	r3, #1
 8008870:	428c      	cmp	r4, r1
 8008872:	d1f6      	bne.n	8008862 <memchr+0x8>
 8008874:	bd10      	pop	{r4, pc}
	...

08008878 <nanf>:
 8008878:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008880 <nanf+0x8>
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	7fc00000 	.word	0x7fc00000

08008884 <quorem>:
 8008884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	6903      	ldr	r3, [r0, #16]
 800888a:	4607      	mov	r7, r0
 800888c:	690c      	ldr	r4, [r1, #16]
 800888e:	42a3      	cmp	r3, r4
 8008890:	f2c0 8083 	blt.w	800899a <quorem+0x116>
 8008894:	3c01      	subs	r4, #1
 8008896:	f100 0514 	add.w	r5, r0, #20
 800889a:	f101 0814 	add.w	r8, r1, #20
 800889e:	00a3      	lsls	r3, r4, #2
 80088a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088b4:	3301      	adds	r3, #1
 80088b6:	429a      	cmp	r2, r3
 80088b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80088bc:	d331      	bcc.n	8008922 <quorem+0x9e>
 80088be:	f04f 0a00 	mov.w	sl, #0
 80088c2:	46c4      	mov	ip, r8
 80088c4:	46ae      	mov	lr, r5
 80088c6:	46d3      	mov	fp, sl
 80088c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088cc:	b298      	uxth	r0, r3
 80088ce:	45e1      	cmp	r9, ip
 80088d0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80088d4:	fb06 a000 	mla	r0, r6, r0, sl
 80088d8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80088dc:	b280      	uxth	r0, r0
 80088de:	fb06 2303 	mla	r3, r6, r3, r2
 80088e2:	f8de 2000 	ldr.w	r2, [lr]
 80088e6:	b292      	uxth	r2, r2
 80088e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088ec:	eba2 0200 	sub.w	r2, r2, r0
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f8de 0000 	ldr.w	r0, [lr]
 80088f6:	445a      	add	r2, fp
 80088f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80088fc:	b292      	uxth	r2, r2
 80088fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008902:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008906:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800890a:	f84e 2b04 	str.w	r2, [lr], #4
 800890e:	d2db      	bcs.n	80088c8 <quorem+0x44>
 8008910:	9b00      	ldr	r3, [sp, #0]
 8008912:	58eb      	ldr	r3, [r5, r3]
 8008914:	b92b      	cbnz	r3, 8008922 <quorem+0x9e>
 8008916:	9b01      	ldr	r3, [sp, #4]
 8008918:	3b04      	subs	r3, #4
 800891a:	429d      	cmp	r5, r3
 800891c:	461a      	mov	r2, r3
 800891e:	d330      	bcc.n	8008982 <quorem+0xfe>
 8008920:	613c      	str	r4, [r7, #16]
 8008922:	4638      	mov	r0, r7
 8008924:	f001 f9c6 	bl	8009cb4 <__mcmp>
 8008928:	2800      	cmp	r0, #0
 800892a:	db26      	blt.n	800897a <quorem+0xf6>
 800892c:	4629      	mov	r1, r5
 800892e:	2000      	movs	r0, #0
 8008930:	f858 2b04 	ldr.w	r2, [r8], #4
 8008934:	f8d1 c000 	ldr.w	ip, [r1]
 8008938:	fa1f fe82 	uxth.w	lr, r2
 800893c:	45c1      	cmp	r9, r8
 800893e:	fa1f f38c 	uxth.w	r3, ip
 8008942:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008946:	eba3 030e 	sub.w	r3, r3, lr
 800894a:	4403      	add	r3, r0
 800894c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008950:	b29b      	uxth	r3, r3
 8008952:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800895a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800895e:	f841 3b04 	str.w	r3, [r1], #4
 8008962:	d2e5      	bcs.n	8008930 <quorem+0xac>
 8008964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800896c:	b922      	cbnz	r2, 8008978 <quorem+0xf4>
 800896e:	3b04      	subs	r3, #4
 8008970:	429d      	cmp	r5, r3
 8008972:	461a      	mov	r2, r3
 8008974:	d30b      	bcc.n	800898e <quorem+0x10a>
 8008976:	613c      	str	r4, [r7, #16]
 8008978:	3601      	adds	r6, #1
 800897a:	4630      	mov	r0, r6
 800897c:	b003      	add	sp, #12
 800897e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008982:	6812      	ldr	r2, [r2, #0]
 8008984:	3b04      	subs	r3, #4
 8008986:	2a00      	cmp	r2, #0
 8008988:	d1ca      	bne.n	8008920 <quorem+0x9c>
 800898a:	3c01      	subs	r4, #1
 800898c:	e7c5      	b.n	800891a <quorem+0x96>
 800898e:	6812      	ldr	r2, [r2, #0]
 8008990:	3b04      	subs	r3, #4
 8008992:	2a00      	cmp	r2, #0
 8008994:	d1ef      	bne.n	8008976 <quorem+0xf2>
 8008996:	3c01      	subs	r4, #1
 8008998:	e7ea      	b.n	8008970 <quorem+0xec>
 800899a:	2000      	movs	r0, #0
 800899c:	e7ee      	b.n	800897c <quorem+0xf8>
	...

080089a0 <_dtoa_r>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	69c7      	ldr	r7, [r0, #28]
 80089a6:	b099      	sub	sp, #100	@ 0x64
 80089a8:	4683      	mov	fp, r0
 80089aa:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80089ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80089ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80089b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089b2:	ec55 4b10 	vmov	r4, r5, d0
 80089b6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089ba:	b97f      	cbnz	r7, 80089dc <_dtoa_r+0x3c>
 80089bc:	2010      	movs	r0, #16
 80089be:	f000 fdfd 	bl	80095bc <malloc>
 80089c2:	4602      	mov	r2, r0
 80089c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80089c8:	b920      	cbnz	r0, 80089d4 <_dtoa_r+0x34>
 80089ca:	4ba7      	ldr	r3, [pc, #668]	@ (8008c68 <_dtoa_r+0x2c8>)
 80089cc:	21ef      	movs	r1, #239	@ 0xef
 80089ce:	48a7      	ldr	r0, [pc, #668]	@ (8008c6c <_dtoa_r+0x2cc>)
 80089d0:	f002 fc42 	bl	800b258 <__assert_func>
 80089d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80089d8:	6007      	str	r7, [r0, #0]
 80089da:	60c7      	str	r7, [r0, #12]
 80089dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089e0:	6819      	ldr	r1, [r3, #0]
 80089e2:	b159      	cbz	r1, 80089fc <_dtoa_r+0x5c>
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	2301      	movs	r3, #1
 80089e8:	4658      	mov	r0, fp
 80089ea:	4093      	lsls	r3, r2
 80089ec:	604a      	str	r2, [r1, #4]
 80089ee:	608b      	str	r3, [r1, #8]
 80089f0:	f000 feda 	bl	80097a8 <_Bfree>
 80089f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	1e2b      	subs	r3, r5, #0
 80089fe:	bfb7      	itett	lt
 8008a00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a04:	2300      	movge	r3, #0
 8008a06:	2201      	movlt	r2, #1
 8008a08:	9303      	strlt	r3, [sp, #12]
 8008a0a:	bfa8      	it	ge
 8008a0c:	6033      	strge	r3, [r6, #0]
 8008a0e:	9f03      	ldr	r7, [sp, #12]
 8008a10:	4b97      	ldr	r3, [pc, #604]	@ (8008c70 <_dtoa_r+0x2d0>)
 8008a12:	bfb8      	it	lt
 8008a14:	6032      	strlt	r2, [r6, #0]
 8008a16:	43bb      	bics	r3, r7
 8008a18:	d112      	bne.n	8008a40 <_dtoa_r+0xa0>
 8008a1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a20:	6013      	str	r3, [r2, #0]
 8008a22:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a26:	4323      	orrs	r3, r4
 8008a28:	f000 854c 	beq.w	80094c4 <_dtoa_r+0xb24>
 8008a2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a2e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008c84 <_dtoa_r+0x2e4>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 854e 	beq.w	80094d4 <_dtoa_r+0xb34>
 8008a38:	f10a 0303 	add.w	r3, sl, #3
 8008a3c:	f000 bd48 	b.w	80094d0 <_dtoa_r+0xb30>
 8008a40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	ec51 0b17 	vmov	r0, r1, d7
 8008a4c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008a50:	f7f8 f83e 	bl	8000ad0 <__aeabi_dcmpeq>
 8008a54:	4680      	mov	r8, r0
 8008a56:	b158      	cbz	r0, 8008a70 <_dtoa_r+0xd0>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a60:	b113      	cbz	r3, 8008a68 <_dtoa_r+0xc8>
 8008a62:	4b84      	ldr	r3, [pc, #528]	@ (8008c74 <_dtoa_r+0x2d4>)
 8008a64:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8008c88 <_dtoa_r+0x2e8>
 8008a6c:	f000 bd32 	b.w	80094d4 <_dtoa_r+0xb34>
 8008a70:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008a74:	aa16      	add	r2, sp, #88	@ 0x58
 8008a76:	a917      	add	r1, sp, #92	@ 0x5c
 8008a78:	4658      	mov	r0, fp
 8008a7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008a7e:	f001 fa41 	bl	8009f04 <__d2b>
 8008a82:	4681      	mov	r9, r0
 8008a84:	2e00      	cmp	r6, #0
 8008a86:	d075      	beq.n	8008b74 <_dtoa_r+0x1d4>
 8008a88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a8a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a8e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008a92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a96:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a9e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4b74      	ldr	r3, [pc, #464]	@ (8008c78 <_dtoa_r+0x2d8>)
 8008aa8:	f7f7 fbf2 	bl	8000290 <__aeabi_dsub>
 8008aac:	a368      	add	r3, pc, #416	@ (adr r3, 8008c50 <_dtoa_r+0x2b0>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	f7f7 fda5 	bl	8000600 <__aeabi_dmul>
 8008ab6:	a368      	add	r3, pc, #416	@ (adr r3, 8008c58 <_dtoa_r+0x2b8>)
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f7f7 fbea 	bl	8000294 <__adddf3>
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	460d      	mov	r5, r1
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7f7 fd31 	bl	800052c <__aeabi_i2d>
 8008aca:	a365      	add	r3, pc, #404	@ (adr r3, 8008c60 <_dtoa_r+0x2c0>)
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	f7f7 fd96 	bl	8000600 <__aeabi_dmul>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4620      	mov	r0, r4
 8008ada:	4629      	mov	r1, r5
 8008adc:	f7f7 fbda 	bl	8000294 <__adddf3>
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	f7f8 f83c 	bl	8000b60 <__aeabi_d2iz>
 8008ae8:	2200      	movs	r2, #0
 8008aea:	4607      	mov	r7, r0
 8008aec:	2300      	movs	r3, #0
 8008aee:	4620      	mov	r0, r4
 8008af0:	4629      	mov	r1, r5
 8008af2:	f7f7 fff7 	bl	8000ae4 <__aeabi_dcmplt>
 8008af6:	b140      	cbz	r0, 8008b0a <_dtoa_r+0x16a>
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7f7 fd17 	bl	800052c <__aeabi_i2d>
 8008afe:	4622      	mov	r2, r4
 8008b00:	462b      	mov	r3, r5
 8008b02:	f7f7 ffe5 	bl	8000ad0 <__aeabi_dcmpeq>
 8008b06:	b900      	cbnz	r0, 8008b0a <_dtoa_r+0x16a>
 8008b08:	3f01      	subs	r7, #1
 8008b0a:	2f16      	cmp	r7, #22
 8008b0c:	d851      	bhi.n	8008bb2 <_dtoa_r+0x212>
 8008b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8008c7c <_dtoa_r+0x2dc>)
 8008b10:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 ffe2 	bl	8000ae4 <__aeabi_dcmplt>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d048      	beq.n	8008bb6 <_dtoa_r+0x216>
 8008b24:	3f01      	subs	r7, #1
 8008b26:	2300      	movs	r3, #0
 8008b28:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b2a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b2c:	1b9b      	subs	r3, r3, r6
 8008b2e:	1e5a      	subs	r2, r3, #1
 8008b30:	bf46      	itte	mi
 8008b32:	f1c3 0801 	rsbmi	r8, r3, #1
 8008b36:	2300      	movmi	r3, #0
 8008b38:	f04f 0800 	movpl.w	r8, #0
 8008b3c:	9208      	str	r2, [sp, #32]
 8008b3e:	bf48      	it	mi
 8008b40:	9308      	strmi	r3, [sp, #32]
 8008b42:	2f00      	cmp	r7, #0
 8008b44:	db39      	blt.n	8008bba <_dtoa_r+0x21a>
 8008b46:	9b08      	ldr	r3, [sp, #32]
 8008b48:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008b4a:	443b      	add	r3, r7
 8008b4c:	9308      	str	r3, [sp, #32]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b54:	2b09      	cmp	r3, #9
 8008b56:	d864      	bhi.n	8008c22 <_dtoa_r+0x282>
 8008b58:	2b05      	cmp	r3, #5
 8008b5a:	bfc5      	ittet	gt
 8008b5c:	3b04      	subgt	r3, #4
 8008b5e:	2400      	movgt	r4, #0
 8008b60:	2401      	movle	r4, #1
 8008b62:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b66:	3b02      	subs	r3, #2
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d865      	bhi.n	8008c38 <_dtoa_r+0x298>
 8008b6c:	e8df f003 	tbb	[pc, r3]
 8008b70:	5737392c 	.word	0x5737392c
 8008b74:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008b78:	441e      	add	r6, r3
 8008b7a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	bfc9      	itett	gt
 8008b82:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b86:	f1c3 0320 	rsble	r3, r3, #32
 8008b8a:	409f      	lslgt	r7, r3
 8008b8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b90:	bfd8      	it	le
 8008b92:	fa04 f003 	lslle.w	r0, r4, r3
 8008b96:	f106 36ff 	add.w	r6, r6, #4294967295
 8008b9a:	bfc4      	itt	gt
 8008b9c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ba0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ba4:	f7f7 fcb2 	bl	800050c <__aeabi_ui2d>
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008bae:	9214      	str	r2, [sp, #80]	@ 0x50
 8008bb0:	e777      	b.n	8008aa2 <_dtoa_r+0x102>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e7b8      	b.n	8008b28 <_dtoa_r+0x188>
 8008bb6:	9012      	str	r0, [sp, #72]	@ 0x48
 8008bb8:	e7b7      	b.n	8008b2a <_dtoa_r+0x18a>
 8008bba:	427b      	negs	r3, r7
 8008bbc:	eba8 0807 	sub.w	r8, r8, r7
 8008bc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bc6:	e7c4      	b.n	8008b52 <_dtoa_r+0x1b2>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	dc35      	bgt.n	8008c3e <_dtoa_r+0x29e>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	9307      	str	r3, [sp, #28]
 8008bda:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bdc:	e00b      	b.n	8008bf6 <_dtoa_r+0x256>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e7f3      	b.n	8008bca <_dtoa_r+0x22a>
 8008be2:	2300      	movs	r3, #0
 8008be4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008be6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008be8:	18fb      	adds	r3, r7, r3
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	9307      	str	r3, [sp, #28]
 8008bf2:	bfb8      	it	lt
 8008bf4:	2301      	movlt	r3, #1
 8008bf6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	2204      	movs	r2, #4
 8008bfe:	f102 0514 	add.w	r5, r2, #20
 8008c02:	429d      	cmp	r5, r3
 8008c04:	d91f      	bls.n	8008c46 <_dtoa_r+0x2a6>
 8008c06:	6041      	str	r1, [r0, #4]
 8008c08:	4658      	mov	r0, fp
 8008c0a:	f000 fd8d 	bl	8009728 <_Balloc>
 8008c0e:	4682      	mov	sl, r0
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d13b      	bne.n	8008c8c <_dtoa_r+0x2ec>
 8008c14:	4b1a      	ldr	r3, [pc, #104]	@ (8008c80 <_dtoa_r+0x2e0>)
 8008c16:	4602      	mov	r2, r0
 8008c18:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c1c:	e6d7      	b.n	80089ce <_dtoa_r+0x2e>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e7e0      	b.n	8008be4 <_dtoa_r+0x244>
 8008c22:	2401      	movs	r4, #1
 8008c24:	2300      	movs	r3, #0
 8008c26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2e:	2200      	movs	r2, #0
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	9307      	str	r3, [sp, #28]
 8008c34:	2312      	movs	r3, #18
 8008c36:	e7d0      	b.n	8008bda <_dtoa_r+0x23a>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c3c:	e7f5      	b.n	8008c2a <_dtoa_r+0x28a>
 8008c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	e7d7      	b.n	8008bf6 <_dtoa_r+0x256>
 8008c46:	3101      	adds	r1, #1
 8008c48:	0052      	lsls	r2, r2, #1
 8008c4a:	e7d8      	b.n	8008bfe <_dtoa_r+0x25e>
 8008c4c:	f3af 8000 	nop.w
 8008c50:	636f4361 	.word	0x636f4361
 8008c54:	3fd287a7 	.word	0x3fd287a7
 8008c58:	8b60c8b3 	.word	0x8b60c8b3
 8008c5c:	3fc68a28 	.word	0x3fc68a28
 8008c60:	509f79fb 	.word	0x509f79fb
 8008c64:	3fd34413 	.word	0x3fd34413
 8008c68:	0800c0ba 	.word	0x0800c0ba
 8008c6c:	0800c0d1 	.word	0x0800c0d1
 8008c70:	7ff00000 	.word	0x7ff00000
 8008c74:	0800c085 	.word	0x0800c085
 8008c78:	3ff80000 	.word	0x3ff80000
 8008c7c:	0800c1c8 	.word	0x0800c1c8
 8008c80:	0800c129 	.word	0x0800c129
 8008c84:	0800c0b6 	.word	0x0800c0b6
 8008c88:	0800c084 	.word	0x0800c084
 8008c8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c90:	6018      	str	r0, [r3, #0]
 8008c92:	9b07      	ldr	r3, [sp, #28]
 8008c94:	2b0e      	cmp	r3, #14
 8008c96:	f200 80a4 	bhi.w	8008de2 <_dtoa_r+0x442>
 8008c9a:	2c00      	cmp	r4, #0
 8008c9c:	f000 80a1 	beq.w	8008de2 <_dtoa_r+0x442>
 8008ca0:	2f00      	cmp	r7, #0
 8008ca2:	dd33      	ble.n	8008d0c <_dtoa_r+0x36c>
 8008ca4:	f007 020f 	and.w	r2, r7, #15
 8008ca8:	4bac      	ldr	r3, [pc, #688]	@ (8008f5c <_dtoa_r+0x5bc>)
 8008caa:	05f8      	lsls	r0, r7, #23
 8008cac:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008cb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cb4:	ed93 7b00 	vldr	d7, [r3]
 8008cb8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008cbc:	d516      	bpl.n	8008cec <_dtoa_r+0x34c>
 8008cbe:	4ba8      	ldr	r3, [pc, #672]	@ (8008f60 <_dtoa_r+0x5c0>)
 8008cc0:	f004 040f 	and.w	r4, r4, #15
 8008cc4:	2603      	movs	r6, #3
 8008cc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cce:	f7f7 fdc1 	bl	8000854 <__aeabi_ddiv>
 8008cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd6:	4da2      	ldr	r5, [pc, #648]	@ (8008f60 <_dtoa_r+0x5c0>)
 8008cd8:	b954      	cbnz	r4, 8008cf0 <_dtoa_r+0x350>
 8008cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ce2:	f7f7 fdb7 	bl	8000854 <__aeabi_ddiv>
 8008ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cea:	e028      	b.n	8008d3e <_dtoa_r+0x39e>
 8008cec:	2602      	movs	r6, #2
 8008cee:	e7f2      	b.n	8008cd6 <_dtoa_r+0x336>
 8008cf0:	07e1      	lsls	r1, r4, #31
 8008cf2:	d508      	bpl.n	8008d06 <_dtoa_r+0x366>
 8008cf4:	3601      	adds	r6, #1
 8008cf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cfe:	f7f7 fc7f 	bl	8000600 <__aeabi_dmul>
 8008d02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d06:	1064      	asrs	r4, r4, #1
 8008d08:	3508      	adds	r5, #8
 8008d0a:	e7e5      	b.n	8008cd8 <_dtoa_r+0x338>
 8008d0c:	f000 80d2 	beq.w	8008eb4 <_dtoa_r+0x514>
 8008d10:	427c      	negs	r4, r7
 8008d12:	4b92      	ldr	r3, [pc, #584]	@ (8008f5c <_dtoa_r+0x5bc>)
 8008d14:	4d92      	ldr	r5, [pc, #584]	@ (8008f60 <_dtoa_r+0x5c0>)
 8008d16:	2602      	movs	r6, #2
 8008d18:	f004 020f 	and.w	r2, r4, #15
 8008d1c:	1124      	asrs	r4, r4, #4
 8008d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 fc69 	bl	8000600 <__aeabi_dmul>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d34:	2c00      	cmp	r4, #0
 8008d36:	f040 80b2 	bne.w	8008e9e <_dtoa_r+0x4fe>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1d3      	bne.n	8008ce6 <_dtoa_r+0x346>
 8008d3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 80b7 	beq.w	8008eb8 <_dtoa_r+0x518>
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4b85      	ldr	r3, [pc, #532]	@ (8008f64 <_dtoa_r+0x5c4>)
 8008d4e:	4620      	mov	r0, r4
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f7 fec7 	bl	8000ae4 <__aeabi_dcmplt>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	f000 80ae 	beq.w	8008eb8 <_dtoa_r+0x518>
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 80aa 	beq.w	8008eb8 <_dtoa_r+0x518>
 8008d64:	9b00      	ldr	r3, [sp, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	dd37      	ble.n	8008dda <_dtoa_r+0x43a>
 8008d6a:	1e7b      	subs	r3, r7, #1
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	2200      	movs	r2, #0
 8008d70:	4629      	mov	r1, r5
 8008d72:	9304      	str	r3, [sp, #16]
 8008d74:	3601      	adds	r6, #1
 8008d76:	4b7c      	ldr	r3, [pc, #496]	@ (8008f68 <_dtoa_r+0x5c8>)
 8008d78:	f7f7 fc42 	bl	8000600 <__aeabi_dmul>
 8008d7c:	9c00      	ldr	r4, [sp, #0]
 8008d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7f7 fbd2 	bl	800052c <__aeabi_i2d>
 8008d88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d8c:	f7f7 fc38 	bl	8000600 <__aeabi_dmul>
 8008d90:	2200      	movs	r2, #0
 8008d92:	4b76      	ldr	r3, [pc, #472]	@ (8008f6c <_dtoa_r+0x5cc>)
 8008d94:	f7f7 fa7e 	bl	8000294 <__adddf3>
 8008d98:	4605      	mov	r5, r0
 8008d9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d9e:	2c00      	cmp	r4, #0
 8008da0:	f040 808d 	bne.w	8008ebe <_dtoa_r+0x51e>
 8008da4:	2200      	movs	r2, #0
 8008da6:	4b72      	ldr	r3, [pc, #456]	@ (8008f70 <_dtoa_r+0x5d0>)
 8008da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dac:	f7f7 fa70 	bl	8000290 <__aeabi_dsub>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008db8:	462a      	mov	r2, r5
 8008dba:	4633      	mov	r3, r6
 8008dbc:	f7f7 feb0 	bl	8000b20 <__aeabi_dcmpgt>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	f040 828b 	bne.w	80092dc <_dtoa_r+0x93c>
 8008dc6:	462a      	mov	r2, r5
 8008dc8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dd0:	f7f7 fe88 	bl	8000ae4 <__aeabi_dcmplt>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	f040 8128 	bne.w	800902a <_dtoa_r+0x68a>
 8008dda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008dde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008de2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f2c0 815a 	blt.w	800909e <_dtoa_r+0x6fe>
 8008dea:	2f0e      	cmp	r7, #14
 8008dec:	f300 8157 	bgt.w	800909e <_dtoa_r+0x6fe>
 8008df0:	4b5a      	ldr	r3, [pc, #360]	@ (8008f5c <_dtoa_r+0x5bc>)
 8008df2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008df6:	ed93 7b00 	vldr	d7, [r3]
 8008dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	ed8d 7b00 	vstr	d7, [sp]
 8008e02:	da03      	bge.n	8008e0c <_dtoa_r+0x46c>
 8008e04:	9b07      	ldr	r3, [sp, #28]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f340 8101 	ble.w	800900e <_dtoa_r+0x66e>
 8008e0c:	4656      	mov	r6, sl
 8008e0e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e16:	4620      	mov	r0, r4
 8008e18:	4629      	mov	r1, r5
 8008e1a:	f7f7 fd1b 	bl	8000854 <__aeabi_ddiv>
 8008e1e:	f7f7 fe9f 	bl	8000b60 <__aeabi_d2iz>
 8008e22:	4680      	mov	r8, r0
 8008e24:	f7f7 fb82 	bl	800052c <__aeabi_i2d>
 8008e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e2c:	f7f7 fbe8 	bl	8000600 <__aeabi_dmul>
 8008e30:	4602      	mov	r2, r0
 8008e32:	4620      	mov	r0, r4
 8008e34:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f7f7 fa28 	bl	8000290 <__aeabi_dsub>
 8008e40:	9d07      	ldr	r5, [sp, #28]
 8008e42:	f806 4b01 	strb.w	r4, [r6], #1
 8008e46:	eba6 040a 	sub.w	r4, r6, sl
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	42a5      	cmp	r5, r4
 8008e50:	f040 8117 	bne.w	8009082 <_dtoa_r+0x6e2>
 8008e54:	f7f7 fa1e 	bl	8000294 <__adddf3>
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e60:	f7f7 fe5e 	bl	8000b20 <__aeabi_dcmpgt>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	f040 80f9 	bne.w	800905c <_dtoa_r+0x6bc>
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e72:	f7f7 fe2d 	bl	8000ad0 <__aeabi_dcmpeq>
 8008e76:	b118      	cbz	r0, 8008e80 <_dtoa_r+0x4e0>
 8008e78:	f018 0f01 	tst.w	r8, #1
 8008e7c:	f040 80ee 	bne.w	800905c <_dtoa_r+0x6bc>
 8008e80:	4649      	mov	r1, r9
 8008e82:	4658      	mov	r0, fp
 8008e84:	f000 fc90 	bl	80097a8 <_Bfree>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	3701      	adds	r7, #1
 8008e8c:	7033      	strb	r3, [r6, #0]
 8008e8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e90:	601f      	str	r7, [r3, #0]
 8008e92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 831d 	beq.w	80094d4 <_dtoa_r+0xb34>
 8008e9a:	601e      	str	r6, [r3, #0]
 8008e9c:	e31a      	b.n	80094d4 <_dtoa_r+0xb34>
 8008e9e:	07e2      	lsls	r2, r4, #31
 8008ea0:	d505      	bpl.n	8008eae <_dtoa_r+0x50e>
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ea8:	f7f7 fbaa 	bl	8000600 <__aeabi_dmul>
 8008eac:	2301      	movs	r3, #1
 8008eae:	1064      	asrs	r4, r4, #1
 8008eb0:	3508      	adds	r5, #8
 8008eb2:	e73f      	b.n	8008d34 <_dtoa_r+0x394>
 8008eb4:	2602      	movs	r6, #2
 8008eb6:	e742      	b.n	8008d3e <_dtoa_r+0x39e>
 8008eb8:	9c07      	ldr	r4, [sp, #28]
 8008eba:	9704      	str	r7, [sp, #16]
 8008ebc:	e761      	b.n	8008d82 <_dtoa_r+0x3e2>
 8008ebe:	4b27      	ldr	r3, [pc, #156]	@ (8008f5c <_dtoa_r+0x5bc>)
 8008ec0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ec2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ec6:	4454      	add	r4, sl
 8008ec8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	d053      	beq.n	8008f78 <_dtoa_r+0x5d8>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	4928      	ldr	r1, [pc, #160]	@ (8008f74 <_dtoa_r+0x5d4>)
 8008ed4:	f7f7 fcbe 	bl	8000854 <__aeabi_ddiv>
 8008ed8:	4633      	mov	r3, r6
 8008eda:	4656      	mov	r6, sl
 8008edc:	462a      	mov	r2, r5
 8008ede:	f7f7 f9d7 	bl	8000290 <__aeabi_dsub>
 8008ee2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eea:	f7f7 fe39 	bl	8000b60 <__aeabi_d2iz>
 8008eee:	4605      	mov	r5, r0
 8008ef0:	f7f7 fb1c 	bl	800052c <__aeabi_i2d>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	3530      	adds	r5, #48	@ 0x30
 8008efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008efe:	f7f7 f9c7 	bl	8000290 <__aeabi_dsub>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	f806 5b01 	strb.w	r5, [r6], #1
 8008f0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f12:	f7f7 fde7 	bl	8000ae4 <__aeabi_dcmplt>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d171      	bne.n	8008ffe <_dtoa_r+0x65e>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	4911      	ldr	r1, [pc, #68]	@ (8008f64 <_dtoa_r+0x5c4>)
 8008f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f22:	f7f7 f9b5 	bl	8000290 <__aeabi_dsub>
 8008f26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f2a:	f7f7 fddb 	bl	8000ae4 <__aeabi_dcmplt>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f040 8095 	bne.w	800905e <_dtoa_r+0x6be>
 8008f34:	42a6      	cmp	r6, r4
 8008f36:	f43f af50 	beq.w	8008dda <_dtoa_r+0x43a>
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f68 <_dtoa_r+0x5c8>)
 8008f3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f42:	f7f7 fb5d 	bl	8000600 <__aeabi_dmul>
 8008f46:	2200      	movs	r2, #0
 8008f48:	4b07      	ldr	r3, [pc, #28]	@ (8008f68 <_dtoa_r+0x5c8>)
 8008f4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f52:	f7f7 fb55 	bl	8000600 <__aeabi_dmul>
 8008f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f5a:	e7c4      	b.n	8008ee6 <_dtoa_r+0x546>
 8008f5c:	0800c1c8 	.word	0x0800c1c8
 8008f60:	0800c1a0 	.word	0x0800c1a0
 8008f64:	3ff00000 	.word	0x3ff00000
 8008f68:	40240000 	.word	0x40240000
 8008f6c:	401c0000 	.word	0x401c0000
 8008f70:	40140000 	.word	0x40140000
 8008f74:	3fe00000 	.word	0x3fe00000
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4656      	mov	r6, sl
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f7f7 fb3f 	bl	8000600 <__aeabi_dmul>
 8008f82:	9415      	str	r4, [sp, #84]	@ 0x54
 8008f84:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f8c:	f7f7 fde8 	bl	8000b60 <__aeabi_d2iz>
 8008f90:	4605      	mov	r5, r0
 8008f92:	f7f7 facb 	bl	800052c <__aeabi_i2d>
 8008f96:	4602      	mov	r2, r0
 8008f98:	3530      	adds	r5, #48	@ 0x30
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa0:	f7f7 f976 	bl	8000290 <__aeabi_dsub>
 8008fa4:	f806 5b01 	strb.w	r5, [r6], #1
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	42a6      	cmp	r6, r4
 8008fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fb2:	f04f 0200 	mov.w	r2, #0
 8008fb6:	d124      	bne.n	8009002 <_dtoa_r+0x662>
 8008fb8:	4bac      	ldr	r3, [pc, #688]	@ (800926c <_dtoa_r+0x8cc>)
 8008fba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fbe:	f7f7 f969 	bl	8000294 <__adddf3>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fca:	f7f7 fda9 	bl	8000b20 <__aeabi_dcmpgt>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d145      	bne.n	800905e <_dtoa_r+0x6be>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	49a5      	ldr	r1, [pc, #660]	@ (800926c <_dtoa_r+0x8cc>)
 8008fd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fda:	f7f7 f959 	bl	8000290 <__aeabi_dsub>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fe6:	f7f7 fd7d 	bl	8000ae4 <__aeabi_dcmplt>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	f43f aef5 	beq.w	8008dda <_dtoa_r+0x43a>
 8008ff0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008ff2:	1e73      	subs	r3, r6, #1
 8008ff4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ff6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ffa:	2b30      	cmp	r3, #48	@ 0x30
 8008ffc:	d0f8      	beq.n	8008ff0 <_dtoa_r+0x650>
 8008ffe:	9f04      	ldr	r7, [sp, #16]
 8009000:	e73e      	b.n	8008e80 <_dtoa_r+0x4e0>
 8009002:	4b9b      	ldr	r3, [pc, #620]	@ (8009270 <_dtoa_r+0x8d0>)
 8009004:	f7f7 fafc 	bl	8000600 <__aeabi_dmul>
 8009008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800900c:	e7bc      	b.n	8008f88 <_dtoa_r+0x5e8>
 800900e:	d10c      	bne.n	800902a <_dtoa_r+0x68a>
 8009010:	2200      	movs	r2, #0
 8009012:	4b98      	ldr	r3, [pc, #608]	@ (8009274 <_dtoa_r+0x8d4>)
 8009014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009018:	f7f7 faf2 	bl	8000600 <__aeabi_dmul>
 800901c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009020:	f7f7 fd74 	bl	8000b0c <__aeabi_dcmpge>
 8009024:	2800      	cmp	r0, #0
 8009026:	f000 8157 	beq.w	80092d8 <_dtoa_r+0x938>
 800902a:	2400      	movs	r4, #0
 800902c:	4625      	mov	r5, r4
 800902e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009030:	4656      	mov	r6, sl
 8009032:	43db      	mvns	r3, r3
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	2700      	movs	r7, #0
 8009038:	4621      	mov	r1, r4
 800903a:	4658      	mov	r0, fp
 800903c:	f000 fbb4 	bl	80097a8 <_Bfree>
 8009040:	2d00      	cmp	r5, #0
 8009042:	d0dc      	beq.n	8008ffe <_dtoa_r+0x65e>
 8009044:	b12f      	cbz	r7, 8009052 <_dtoa_r+0x6b2>
 8009046:	42af      	cmp	r7, r5
 8009048:	d003      	beq.n	8009052 <_dtoa_r+0x6b2>
 800904a:	4639      	mov	r1, r7
 800904c:	4658      	mov	r0, fp
 800904e:	f000 fbab 	bl	80097a8 <_Bfree>
 8009052:	4629      	mov	r1, r5
 8009054:	4658      	mov	r0, fp
 8009056:	f000 fba7 	bl	80097a8 <_Bfree>
 800905a:	e7d0      	b.n	8008ffe <_dtoa_r+0x65e>
 800905c:	9704      	str	r7, [sp, #16]
 800905e:	4633      	mov	r3, r6
 8009060:	461e      	mov	r6, r3
 8009062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009066:	2a39      	cmp	r2, #57	@ 0x39
 8009068:	d107      	bne.n	800907a <_dtoa_r+0x6da>
 800906a:	459a      	cmp	sl, r3
 800906c:	d1f8      	bne.n	8009060 <_dtoa_r+0x6c0>
 800906e:	9a04      	ldr	r2, [sp, #16]
 8009070:	3201      	adds	r2, #1
 8009072:	9204      	str	r2, [sp, #16]
 8009074:	2230      	movs	r2, #48	@ 0x30
 8009076:	f88a 2000 	strb.w	r2, [sl]
 800907a:	781a      	ldrb	r2, [r3, #0]
 800907c:	3201      	adds	r2, #1
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	e7bd      	b.n	8008ffe <_dtoa_r+0x65e>
 8009082:	2200      	movs	r2, #0
 8009084:	4b7a      	ldr	r3, [pc, #488]	@ (8009270 <_dtoa_r+0x8d0>)
 8009086:	f7f7 fabb 	bl	8000600 <__aeabi_dmul>
 800908a:	2200      	movs	r2, #0
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	460d      	mov	r5, r1
 8009092:	f7f7 fd1d 	bl	8000ad0 <__aeabi_dcmpeq>
 8009096:	2800      	cmp	r0, #0
 8009098:	f43f aebb 	beq.w	8008e12 <_dtoa_r+0x472>
 800909c:	e6f0      	b.n	8008e80 <_dtoa_r+0x4e0>
 800909e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80090a0:	2a00      	cmp	r2, #0
 80090a2:	f000 80db 	beq.w	800925c <_dtoa_r+0x8bc>
 80090a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090a8:	2a01      	cmp	r2, #1
 80090aa:	f300 80bf 	bgt.w	800922c <_dtoa_r+0x88c>
 80090ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80090b0:	2a00      	cmp	r2, #0
 80090b2:	f000 80b7 	beq.w	8009224 <_dtoa_r+0x884>
 80090b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090bc:	4646      	mov	r6, r8
 80090be:	9a08      	ldr	r2, [sp, #32]
 80090c0:	2101      	movs	r1, #1
 80090c2:	4658      	mov	r0, fp
 80090c4:	4498      	add	r8, r3
 80090c6:	441a      	add	r2, r3
 80090c8:	9208      	str	r2, [sp, #32]
 80090ca:	f000 fc6d 	bl	80099a8 <__i2b>
 80090ce:	4605      	mov	r5, r0
 80090d0:	b15e      	cbz	r6, 80090ea <_dtoa_r+0x74a>
 80090d2:	9b08      	ldr	r3, [sp, #32]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	dd08      	ble.n	80090ea <_dtoa_r+0x74a>
 80090d8:	42b3      	cmp	r3, r6
 80090da:	9a08      	ldr	r2, [sp, #32]
 80090dc:	bfa8      	it	ge
 80090de:	4633      	movge	r3, r6
 80090e0:	eba8 0803 	sub.w	r8, r8, r3
 80090e4:	1af6      	subs	r6, r6, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	9308      	str	r3, [sp, #32]
 80090ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ec:	b1f3      	cbz	r3, 800912c <_dtoa_r+0x78c>
 80090ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 80b7 	beq.w	8009264 <_dtoa_r+0x8c4>
 80090f6:	b18c      	cbz	r4, 800911c <_dtoa_r+0x77c>
 80090f8:	4629      	mov	r1, r5
 80090fa:	4622      	mov	r2, r4
 80090fc:	4658      	mov	r0, fp
 80090fe:	f000 fd13 	bl	8009b28 <__pow5mult>
 8009102:	464a      	mov	r2, r9
 8009104:	4601      	mov	r1, r0
 8009106:	4605      	mov	r5, r0
 8009108:	4658      	mov	r0, fp
 800910a:	f000 fc63 	bl	80099d4 <__multiply>
 800910e:	4649      	mov	r1, r9
 8009110:	9004      	str	r0, [sp, #16]
 8009112:	4658      	mov	r0, fp
 8009114:	f000 fb48 	bl	80097a8 <_Bfree>
 8009118:	9b04      	ldr	r3, [sp, #16]
 800911a:	4699      	mov	r9, r3
 800911c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800911e:	1b1a      	subs	r2, r3, r4
 8009120:	d004      	beq.n	800912c <_dtoa_r+0x78c>
 8009122:	4649      	mov	r1, r9
 8009124:	4658      	mov	r0, fp
 8009126:	f000 fcff 	bl	8009b28 <__pow5mult>
 800912a:	4681      	mov	r9, r0
 800912c:	2101      	movs	r1, #1
 800912e:	4658      	mov	r0, fp
 8009130:	f000 fc3a 	bl	80099a8 <__i2b>
 8009134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009136:	4604      	mov	r4, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 81cf 	beq.w	80094dc <_dtoa_r+0xb3c>
 800913e:	461a      	mov	r2, r3
 8009140:	4601      	mov	r1, r0
 8009142:	4658      	mov	r0, fp
 8009144:	f000 fcf0 	bl	8009b28 <__pow5mult>
 8009148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914a:	4604      	mov	r4, r0
 800914c:	2b01      	cmp	r3, #1
 800914e:	f300 8095 	bgt.w	800927c <_dtoa_r+0x8dc>
 8009152:	9b02      	ldr	r3, [sp, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f040 8087 	bne.w	8009268 <_dtoa_r+0x8c8>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009160:	2b00      	cmp	r3, #0
 8009162:	f040 8089 	bne.w	8009278 <_dtoa_r+0x8d8>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800916c:	0d1b      	lsrs	r3, r3, #20
 800916e:	051b      	lsls	r3, r3, #20
 8009170:	b12b      	cbz	r3, 800917e <_dtoa_r+0x7de>
 8009172:	9b08      	ldr	r3, [sp, #32]
 8009174:	f108 0801 	add.w	r8, r8, #1
 8009178:	3301      	adds	r3, #1
 800917a:	9308      	str	r3, [sp, #32]
 800917c:	2301      	movs	r3, #1
 800917e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 81b0 	beq.w	80094e8 <_dtoa_r+0xb48>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800918e:	6918      	ldr	r0, [r3, #16]
 8009190:	f000 fbbe 	bl	8009910 <__hi0bits>
 8009194:	f1c0 0020 	rsb	r0, r0, #32
 8009198:	9b08      	ldr	r3, [sp, #32]
 800919a:	4418      	add	r0, r3
 800919c:	f010 001f 	ands.w	r0, r0, #31
 80091a0:	d077      	beq.n	8009292 <_dtoa_r+0x8f2>
 80091a2:	f1c0 0320 	rsb	r3, r0, #32
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	dd6b      	ble.n	8009282 <_dtoa_r+0x8e2>
 80091aa:	f1c0 001c 	rsb	r0, r0, #28
 80091ae:	9b08      	ldr	r3, [sp, #32]
 80091b0:	4480      	add	r8, r0
 80091b2:	4403      	add	r3, r0
 80091b4:	4406      	add	r6, r0
 80091b6:	9308      	str	r3, [sp, #32]
 80091b8:	f1b8 0f00 	cmp.w	r8, #0
 80091bc:	dd05      	ble.n	80091ca <_dtoa_r+0x82a>
 80091be:	4649      	mov	r1, r9
 80091c0:	4642      	mov	r2, r8
 80091c2:	4658      	mov	r0, fp
 80091c4:	f000 fd0a 	bl	8009bdc <__lshift>
 80091c8:	4681      	mov	r9, r0
 80091ca:	9b08      	ldr	r3, [sp, #32]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd05      	ble.n	80091dc <_dtoa_r+0x83c>
 80091d0:	4621      	mov	r1, r4
 80091d2:	461a      	mov	r2, r3
 80091d4:	4658      	mov	r0, fp
 80091d6:	f000 fd01 	bl	8009bdc <__lshift>
 80091da:	4604      	mov	r4, r0
 80091dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d059      	beq.n	8009296 <_dtoa_r+0x8f6>
 80091e2:	4621      	mov	r1, r4
 80091e4:	4648      	mov	r0, r9
 80091e6:	f000 fd65 	bl	8009cb4 <__mcmp>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	da53      	bge.n	8009296 <_dtoa_r+0x8f6>
 80091ee:	1e7b      	subs	r3, r7, #1
 80091f0:	4649      	mov	r1, r9
 80091f2:	220a      	movs	r2, #10
 80091f4:	4658      	mov	r0, fp
 80091f6:	9304      	str	r3, [sp, #16]
 80091f8:	2300      	movs	r3, #0
 80091fa:	f000 faf7 	bl	80097ec <__multadd>
 80091fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009200:	4681      	mov	r9, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8172 	beq.w	80094ec <_dtoa_r+0xb4c>
 8009208:	2300      	movs	r3, #0
 800920a:	4629      	mov	r1, r5
 800920c:	220a      	movs	r2, #10
 800920e:	4658      	mov	r0, fp
 8009210:	f000 faec 	bl	80097ec <__multadd>
 8009214:	9b00      	ldr	r3, [sp, #0]
 8009216:	4605      	mov	r5, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	dc67      	bgt.n	80092ec <_dtoa_r+0x94c>
 800921c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921e:	2b02      	cmp	r3, #2
 8009220:	dc41      	bgt.n	80092a6 <_dtoa_r+0x906>
 8009222:	e063      	b.n	80092ec <_dtoa_r+0x94c>
 8009224:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009226:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800922a:	e746      	b.n	80090ba <_dtoa_r+0x71a>
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	1e5c      	subs	r4, r3, #1
 8009230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009232:	42a3      	cmp	r3, r4
 8009234:	bfb7      	itett	lt
 8009236:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009238:	1b1c      	subge	r4, r3, r4
 800923a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800923c:	1ae3      	sublt	r3, r4, r3
 800923e:	bfbe      	ittt	lt
 8009240:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009242:	2400      	movlt	r4, #0
 8009244:	18d2      	addlt	r2, r2, r3
 8009246:	9b07      	ldr	r3, [sp, #28]
 8009248:	bfb8      	it	lt
 800924a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800924c:	2b00      	cmp	r3, #0
 800924e:	bfb5      	itete	lt
 8009250:	eba8 0603 	sublt.w	r6, r8, r3
 8009254:	4646      	movge	r6, r8
 8009256:	2300      	movlt	r3, #0
 8009258:	9b07      	ldrge	r3, [sp, #28]
 800925a:	e730      	b.n	80090be <_dtoa_r+0x71e>
 800925c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800925e:	4646      	mov	r6, r8
 8009260:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009262:	e735      	b.n	80090d0 <_dtoa_r+0x730>
 8009264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009266:	e75c      	b.n	8009122 <_dtoa_r+0x782>
 8009268:	2300      	movs	r3, #0
 800926a:	e788      	b.n	800917e <_dtoa_r+0x7de>
 800926c:	3fe00000 	.word	0x3fe00000
 8009270:	40240000 	.word	0x40240000
 8009274:	40140000 	.word	0x40140000
 8009278:	9b02      	ldr	r3, [sp, #8]
 800927a:	e780      	b.n	800917e <_dtoa_r+0x7de>
 800927c:	2300      	movs	r3, #0
 800927e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009280:	e782      	b.n	8009188 <_dtoa_r+0x7e8>
 8009282:	d099      	beq.n	80091b8 <_dtoa_r+0x818>
 8009284:	331c      	adds	r3, #28
 8009286:	9a08      	ldr	r2, [sp, #32]
 8009288:	441a      	add	r2, r3
 800928a:	4498      	add	r8, r3
 800928c:	441e      	add	r6, r3
 800928e:	9208      	str	r2, [sp, #32]
 8009290:	e792      	b.n	80091b8 <_dtoa_r+0x818>
 8009292:	4603      	mov	r3, r0
 8009294:	e7f6      	b.n	8009284 <_dtoa_r+0x8e4>
 8009296:	9b07      	ldr	r3, [sp, #28]
 8009298:	9704      	str	r7, [sp, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	dc20      	bgt.n	80092e0 <_dtoa_r+0x940>
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	dd1e      	ble.n	80092e4 <_dtoa_r+0x944>
 80092a6:	9b00      	ldr	r3, [sp, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f47f aec0 	bne.w	800902e <_dtoa_r+0x68e>
 80092ae:	4621      	mov	r1, r4
 80092b0:	2205      	movs	r2, #5
 80092b2:	4658      	mov	r0, fp
 80092b4:	f000 fa9a 	bl	80097ec <__multadd>
 80092b8:	4601      	mov	r1, r0
 80092ba:	4604      	mov	r4, r0
 80092bc:	4648      	mov	r0, r9
 80092be:	f000 fcf9 	bl	8009cb4 <__mcmp>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	f77f aeb3 	ble.w	800902e <_dtoa_r+0x68e>
 80092c8:	2331      	movs	r3, #49	@ 0x31
 80092ca:	4656      	mov	r6, sl
 80092cc:	f806 3b01 	strb.w	r3, [r6], #1
 80092d0:	9b04      	ldr	r3, [sp, #16]
 80092d2:	3301      	adds	r3, #1
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	e6ae      	b.n	8009036 <_dtoa_r+0x696>
 80092d8:	9c07      	ldr	r4, [sp, #28]
 80092da:	9704      	str	r7, [sp, #16]
 80092dc:	4625      	mov	r5, r4
 80092de:	e7f3      	b.n	80092c8 <_dtoa_r+0x928>
 80092e0:	9b07      	ldr	r3, [sp, #28]
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f000 8104 	beq.w	80094f4 <_dtoa_r+0xb54>
 80092ec:	2e00      	cmp	r6, #0
 80092ee:	dd05      	ble.n	80092fc <_dtoa_r+0x95c>
 80092f0:	4629      	mov	r1, r5
 80092f2:	4632      	mov	r2, r6
 80092f4:	4658      	mov	r0, fp
 80092f6:	f000 fc71 	bl	8009bdc <__lshift>
 80092fa:	4605      	mov	r5, r0
 80092fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d05a      	beq.n	80093b8 <_dtoa_r+0xa18>
 8009302:	6869      	ldr	r1, [r5, #4]
 8009304:	4658      	mov	r0, fp
 8009306:	f000 fa0f 	bl	8009728 <_Balloc>
 800930a:	4606      	mov	r6, r0
 800930c:	b928      	cbnz	r0, 800931a <_dtoa_r+0x97a>
 800930e:	4b84      	ldr	r3, [pc, #528]	@ (8009520 <_dtoa_r+0xb80>)
 8009310:	4602      	mov	r2, r0
 8009312:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009316:	f7ff bb5a 	b.w	80089ce <_dtoa_r+0x2e>
 800931a:	692a      	ldr	r2, [r5, #16]
 800931c:	f105 010c 	add.w	r1, r5, #12
 8009320:	300c      	adds	r0, #12
 8009322:	3202      	adds	r2, #2
 8009324:	0092      	lsls	r2, r2, #2
 8009326:	f001 ff81 	bl	800b22c <memcpy>
 800932a:	2201      	movs	r2, #1
 800932c:	4631      	mov	r1, r6
 800932e:	4658      	mov	r0, fp
 8009330:	f000 fc54 	bl	8009bdc <__lshift>
 8009334:	f10a 0301 	add.w	r3, sl, #1
 8009338:	462f      	mov	r7, r5
 800933a:	4605      	mov	r5, r0
 800933c:	9307      	str	r3, [sp, #28]
 800933e:	9b00      	ldr	r3, [sp, #0]
 8009340:	4453      	add	r3, sl
 8009342:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009344:	9b02      	ldr	r3, [sp, #8]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	930a      	str	r3, [sp, #40]	@ 0x28
 800934c:	9b07      	ldr	r3, [sp, #28]
 800934e:	4621      	mov	r1, r4
 8009350:	4648      	mov	r0, r9
 8009352:	3b01      	subs	r3, #1
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	f7ff fa95 	bl	8008884 <quorem>
 800935a:	4639      	mov	r1, r7
 800935c:	9002      	str	r0, [sp, #8]
 800935e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009362:	4648      	mov	r0, r9
 8009364:	f000 fca6 	bl	8009cb4 <__mcmp>
 8009368:	462a      	mov	r2, r5
 800936a:	9008      	str	r0, [sp, #32]
 800936c:	4621      	mov	r1, r4
 800936e:	4658      	mov	r0, fp
 8009370:	f000 fcbc 	bl	8009cec <__mdiff>
 8009374:	68c2      	ldr	r2, [r0, #12]
 8009376:	4606      	mov	r6, r0
 8009378:	bb02      	cbnz	r2, 80093bc <_dtoa_r+0xa1c>
 800937a:	4601      	mov	r1, r0
 800937c:	4648      	mov	r0, r9
 800937e:	f000 fc99 	bl	8009cb4 <__mcmp>
 8009382:	4602      	mov	r2, r0
 8009384:	4631      	mov	r1, r6
 8009386:	4658      	mov	r0, fp
 8009388:	920e      	str	r2, [sp, #56]	@ 0x38
 800938a:	f000 fa0d 	bl	80097a8 <_Bfree>
 800938e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009390:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009392:	9e07      	ldr	r6, [sp, #28]
 8009394:	ea43 0102 	orr.w	r1, r3, r2
 8009398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800939a:	4319      	orrs	r1, r3
 800939c:	d110      	bne.n	80093c0 <_dtoa_r+0xa20>
 800939e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093a2:	d029      	beq.n	80093f8 <_dtoa_r+0xa58>
 80093a4:	9b08      	ldr	r3, [sp, #32]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	dd02      	ble.n	80093b0 <_dtoa_r+0xa10>
 80093aa:	9b02      	ldr	r3, [sp, #8]
 80093ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80093b0:	9b00      	ldr	r3, [sp, #0]
 80093b2:	f883 8000 	strb.w	r8, [r3]
 80093b6:	e63f      	b.n	8009038 <_dtoa_r+0x698>
 80093b8:	4628      	mov	r0, r5
 80093ba:	e7bb      	b.n	8009334 <_dtoa_r+0x994>
 80093bc:	2201      	movs	r2, #1
 80093be:	e7e1      	b.n	8009384 <_dtoa_r+0x9e4>
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	db04      	blt.n	80093d0 <_dtoa_r+0xa30>
 80093c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093c8:	430b      	orrs	r3, r1
 80093ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093cc:	430b      	orrs	r3, r1
 80093ce:	d120      	bne.n	8009412 <_dtoa_r+0xa72>
 80093d0:	2a00      	cmp	r2, #0
 80093d2:	dded      	ble.n	80093b0 <_dtoa_r+0xa10>
 80093d4:	4649      	mov	r1, r9
 80093d6:	2201      	movs	r2, #1
 80093d8:	4658      	mov	r0, fp
 80093da:	f000 fbff 	bl	8009bdc <__lshift>
 80093de:	4621      	mov	r1, r4
 80093e0:	4681      	mov	r9, r0
 80093e2:	f000 fc67 	bl	8009cb4 <__mcmp>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	dc03      	bgt.n	80093f2 <_dtoa_r+0xa52>
 80093ea:	d1e1      	bne.n	80093b0 <_dtoa_r+0xa10>
 80093ec:	f018 0f01 	tst.w	r8, #1
 80093f0:	d0de      	beq.n	80093b0 <_dtoa_r+0xa10>
 80093f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093f6:	d1d8      	bne.n	80093aa <_dtoa_r+0xa0a>
 80093f8:	2339      	movs	r3, #57	@ 0x39
 80093fa:	9a00      	ldr	r2, [sp, #0]
 80093fc:	7013      	strb	r3, [r2, #0]
 80093fe:	4633      	mov	r3, r6
 8009400:	461e      	mov	r6, r3
 8009402:	3b01      	subs	r3, #1
 8009404:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009408:	2a39      	cmp	r2, #57	@ 0x39
 800940a:	d052      	beq.n	80094b2 <_dtoa_r+0xb12>
 800940c:	3201      	adds	r2, #1
 800940e:	701a      	strb	r2, [r3, #0]
 8009410:	e612      	b.n	8009038 <_dtoa_r+0x698>
 8009412:	2a00      	cmp	r2, #0
 8009414:	dd07      	ble.n	8009426 <_dtoa_r+0xa86>
 8009416:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800941a:	d0ed      	beq.n	80093f8 <_dtoa_r+0xa58>
 800941c:	f108 0301 	add.w	r3, r8, #1
 8009420:	9a00      	ldr	r2, [sp, #0]
 8009422:	7013      	strb	r3, [r2, #0]
 8009424:	e608      	b.n	8009038 <_dtoa_r+0x698>
 8009426:	9b07      	ldr	r3, [sp, #28]
 8009428:	9a07      	ldr	r2, [sp, #28]
 800942a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800942e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009430:	4293      	cmp	r3, r2
 8009432:	d028      	beq.n	8009486 <_dtoa_r+0xae6>
 8009434:	4649      	mov	r1, r9
 8009436:	2300      	movs	r3, #0
 8009438:	220a      	movs	r2, #10
 800943a:	4658      	mov	r0, fp
 800943c:	f000 f9d6 	bl	80097ec <__multadd>
 8009440:	42af      	cmp	r7, r5
 8009442:	4681      	mov	r9, r0
 8009444:	f04f 0300 	mov.w	r3, #0
 8009448:	f04f 020a 	mov.w	r2, #10
 800944c:	4639      	mov	r1, r7
 800944e:	4658      	mov	r0, fp
 8009450:	d107      	bne.n	8009462 <_dtoa_r+0xac2>
 8009452:	f000 f9cb 	bl	80097ec <__multadd>
 8009456:	4607      	mov	r7, r0
 8009458:	4605      	mov	r5, r0
 800945a:	9b07      	ldr	r3, [sp, #28]
 800945c:	3301      	adds	r3, #1
 800945e:	9307      	str	r3, [sp, #28]
 8009460:	e774      	b.n	800934c <_dtoa_r+0x9ac>
 8009462:	f000 f9c3 	bl	80097ec <__multadd>
 8009466:	4629      	mov	r1, r5
 8009468:	4607      	mov	r7, r0
 800946a:	2300      	movs	r3, #0
 800946c:	220a      	movs	r2, #10
 800946e:	4658      	mov	r0, fp
 8009470:	f000 f9bc 	bl	80097ec <__multadd>
 8009474:	4605      	mov	r5, r0
 8009476:	e7f0      	b.n	800945a <_dtoa_r+0xaba>
 8009478:	9b00      	ldr	r3, [sp, #0]
 800947a:	2700      	movs	r7, #0
 800947c:	2b00      	cmp	r3, #0
 800947e:	bfcc      	ite	gt
 8009480:	461e      	movgt	r6, r3
 8009482:	2601      	movle	r6, #1
 8009484:	4456      	add	r6, sl
 8009486:	4649      	mov	r1, r9
 8009488:	2201      	movs	r2, #1
 800948a:	4658      	mov	r0, fp
 800948c:	f000 fba6 	bl	8009bdc <__lshift>
 8009490:	4621      	mov	r1, r4
 8009492:	4681      	mov	r9, r0
 8009494:	f000 fc0e 	bl	8009cb4 <__mcmp>
 8009498:	2800      	cmp	r0, #0
 800949a:	dcb0      	bgt.n	80093fe <_dtoa_r+0xa5e>
 800949c:	d102      	bne.n	80094a4 <_dtoa_r+0xb04>
 800949e:	f018 0f01 	tst.w	r8, #1
 80094a2:	d1ac      	bne.n	80093fe <_dtoa_r+0xa5e>
 80094a4:	4633      	mov	r3, r6
 80094a6:	461e      	mov	r6, r3
 80094a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094ac:	2a30      	cmp	r2, #48	@ 0x30
 80094ae:	d0fa      	beq.n	80094a6 <_dtoa_r+0xb06>
 80094b0:	e5c2      	b.n	8009038 <_dtoa_r+0x698>
 80094b2:	459a      	cmp	sl, r3
 80094b4:	d1a4      	bne.n	8009400 <_dtoa_r+0xa60>
 80094b6:	9b04      	ldr	r3, [sp, #16]
 80094b8:	3301      	adds	r3, #1
 80094ba:	9304      	str	r3, [sp, #16]
 80094bc:	2331      	movs	r3, #49	@ 0x31
 80094be:	f88a 3000 	strb.w	r3, [sl]
 80094c2:	e5b9      	b.n	8009038 <_dtoa_r+0x698>
 80094c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009524 <_dtoa_r+0xb84>
 80094ca:	b11b      	cbz	r3, 80094d4 <_dtoa_r+0xb34>
 80094cc:	f10a 0308 	add.w	r3, sl, #8
 80094d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	4650      	mov	r0, sl
 80094d6:	b019      	add	sp, #100	@ 0x64
 80094d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094de:	2b01      	cmp	r3, #1
 80094e0:	f77f ae37 	ble.w	8009152 <_dtoa_r+0x7b2>
 80094e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80094e8:	2001      	movs	r0, #1
 80094ea:	e655      	b.n	8009198 <_dtoa_r+0x7f8>
 80094ec:	9b00      	ldr	r3, [sp, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f77f aed6 	ble.w	80092a0 <_dtoa_r+0x900>
 80094f4:	4656      	mov	r6, sl
 80094f6:	4621      	mov	r1, r4
 80094f8:	4648      	mov	r0, r9
 80094fa:	f7ff f9c3 	bl	8008884 <quorem>
 80094fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009502:	9b00      	ldr	r3, [sp, #0]
 8009504:	f806 8b01 	strb.w	r8, [r6], #1
 8009508:	eba6 020a 	sub.w	r2, r6, sl
 800950c:	4293      	cmp	r3, r2
 800950e:	ddb3      	ble.n	8009478 <_dtoa_r+0xad8>
 8009510:	4649      	mov	r1, r9
 8009512:	2300      	movs	r3, #0
 8009514:	220a      	movs	r2, #10
 8009516:	4658      	mov	r0, fp
 8009518:	f000 f968 	bl	80097ec <__multadd>
 800951c:	4681      	mov	r9, r0
 800951e:	e7ea      	b.n	80094f6 <_dtoa_r+0xb56>
 8009520:	0800c129 	.word	0x0800c129
 8009524:	0800c0ad 	.word	0x0800c0ad

08009528 <_free_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4605      	mov	r5, r0
 800952c:	2900      	cmp	r1, #0
 800952e:	d041      	beq.n	80095b4 <_free_r+0x8c>
 8009530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009534:	1f0c      	subs	r4, r1, #4
 8009536:	2b00      	cmp	r3, #0
 8009538:	bfb8      	it	lt
 800953a:	18e4      	addlt	r4, r4, r3
 800953c:	f000 f8e8 	bl	8009710 <__malloc_lock>
 8009540:	4a1d      	ldr	r2, [pc, #116]	@ (80095b8 <_free_r+0x90>)
 8009542:	6813      	ldr	r3, [r2, #0]
 8009544:	b933      	cbnz	r3, 8009554 <_free_r+0x2c>
 8009546:	6063      	str	r3, [r4, #4]
 8009548:	6014      	str	r4, [r2, #0]
 800954a:	4628      	mov	r0, r5
 800954c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009550:	f000 b8e4 	b.w	800971c <__malloc_unlock>
 8009554:	42a3      	cmp	r3, r4
 8009556:	d908      	bls.n	800956a <_free_r+0x42>
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	1821      	adds	r1, r4, r0
 800955c:	428b      	cmp	r3, r1
 800955e:	bf01      	itttt	eq
 8009560:	6819      	ldreq	r1, [r3, #0]
 8009562:	685b      	ldreq	r3, [r3, #4]
 8009564:	1809      	addeq	r1, r1, r0
 8009566:	6021      	streq	r1, [r4, #0]
 8009568:	e7ed      	b.n	8009546 <_free_r+0x1e>
 800956a:	461a      	mov	r2, r3
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	b10b      	cbz	r3, 8009574 <_free_r+0x4c>
 8009570:	42a3      	cmp	r3, r4
 8009572:	d9fa      	bls.n	800956a <_free_r+0x42>
 8009574:	6811      	ldr	r1, [r2, #0]
 8009576:	1850      	adds	r0, r2, r1
 8009578:	42a0      	cmp	r0, r4
 800957a:	d10b      	bne.n	8009594 <_free_r+0x6c>
 800957c:	6820      	ldr	r0, [r4, #0]
 800957e:	4401      	add	r1, r0
 8009580:	1850      	adds	r0, r2, r1
 8009582:	6011      	str	r1, [r2, #0]
 8009584:	4283      	cmp	r3, r0
 8009586:	d1e0      	bne.n	800954a <_free_r+0x22>
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	4408      	add	r0, r1
 800958e:	6053      	str	r3, [r2, #4]
 8009590:	6010      	str	r0, [r2, #0]
 8009592:	e7da      	b.n	800954a <_free_r+0x22>
 8009594:	d902      	bls.n	800959c <_free_r+0x74>
 8009596:	230c      	movs	r3, #12
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	e7d6      	b.n	800954a <_free_r+0x22>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	1821      	adds	r1, r4, r0
 80095a0:	428b      	cmp	r3, r1
 80095a2:	bf02      	ittt	eq
 80095a4:	6819      	ldreq	r1, [r3, #0]
 80095a6:	685b      	ldreq	r3, [r3, #4]
 80095a8:	1809      	addeq	r1, r1, r0
 80095aa:	6063      	str	r3, [r4, #4]
 80095ac:	bf08      	it	eq
 80095ae:	6021      	streq	r1, [r4, #0]
 80095b0:	6054      	str	r4, [r2, #4]
 80095b2:	e7ca      	b.n	800954a <_free_r+0x22>
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	20000460 	.word	0x20000460

080095bc <malloc>:
 80095bc:	4b02      	ldr	r3, [pc, #8]	@ (80095c8 <malloc+0xc>)
 80095be:	4601      	mov	r1, r0
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	f000 b825 	b.w	8009610 <_malloc_r>
 80095c6:	bf00      	nop
 80095c8:	20000018 	.word	0x20000018

080095cc <sbrk_aligned>:
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	4e0f      	ldr	r6, [pc, #60]	@ (800960c <sbrk_aligned+0x40>)
 80095d0:	460c      	mov	r4, r1
 80095d2:	4605      	mov	r5, r0
 80095d4:	6831      	ldr	r1, [r6, #0]
 80095d6:	b911      	cbnz	r1, 80095de <sbrk_aligned+0x12>
 80095d8:	f001 fe18 	bl	800b20c <_sbrk_r>
 80095dc:	6030      	str	r0, [r6, #0]
 80095de:	4621      	mov	r1, r4
 80095e0:	4628      	mov	r0, r5
 80095e2:	f001 fe13 	bl	800b20c <_sbrk_r>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d103      	bne.n	80095f2 <sbrk_aligned+0x26>
 80095ea:	f04f 34ff 	mov.w	r4, #4294967295
 80095ee:	4620      	mov	r0, r4
 80095f0:	bd70      	pop	{r4, r5, r6, pc}
 80095f2:	1cc4      	adds	r4, r0, #3
 80095f4:	f024 0403 	bic.w	r4, r4, #3
 80095f8:	42a0      	cmp	r0, r4
 80095fa:	d0f8      	beq.n	80095ee <sbrk_aligned+0x22>
 80095fc:	1a21      	subs	r1, r4, r0
 80095fe:	4628      	mov	r0, r5
 8009600:	f001 fe04 	bl	800b20c <_sbrk_r>
 8009604:	3001      	adds	r0, #1
 8009606:	d1f2      	bne.n	80095ee <sbrk_aligned+0x22>
 8009608:	e7ef      	b.n	80095ea <sbrk_aligned+0x1e>
 800960a:	bf00      	nop
 800960c:	2000045c 	.word	0x2000045c

08009610 <_malloc_r>:
 8009610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009614:	1ccd      	adds	r5, r1, #3
 8009616:	4606      	mov	r6, r0
 8009618:	f025 0503 	bic.w	r5, r5, #3
 800961c:	3508      	adds	r5, #8
 800961e:	2d0c      	cmp	r5, #12
 8009620:	bf38      	it	cc
 8009622:	250c      	movcc	r5, #12
 8009624:	2d00      	cmp	r5, #0
 8009626:	db01      	blt.n	800962c <_malloc_r+0x1c>
 8009628:	42a9      	cmp	r1, r5
 800962a:	d904      	bls.n	8009636 <_malloc_r+0x26>
 800962c:	230c      	movs	r3, #12
 800962e:	6033      	str	r3, [r6, #0]
 8009630:	2000      	movs	r0, #0
 8009632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800970c <_malloc_r+0xfc>
 800963a:	f000 f869 	bl	8009710 <__malloc_lock>
 800963e:	f8d8 3000 	ldr.w	r3, [r8]
 8009642:	461c      	mov	r4, r3
 8009644:	bb44      	cbnz	r4, 8009698 <_malloc_r+0x88>
 8009646:	4629      	mov	r1, r5
 8009648:	4630      	mov	r0, r6
 800964a:	f7ff ffbf 	bl	80095cc <sbrk_aligned>
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	4604      	mov	r4, r0
 8009652:	d158      	bne.n	8009706 <_malloc_r+0xf6>
 8009654:	f8d8 4000 	ldr.w	r4, [r8]
 8009658:	4627      	mov	r7, r4
 800965a:	2f00      	cmp	r7, #0
 800965c:	d143      	bne.n	80096e6 <_malloc_r+0xd6>
 800965e:	2c00      	cmp	r4, #0
 8009660:	d04b      	beq.n	80096fa <_malloc_r+0xea>
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	4639      	mov	r1, r7
 8009666:	4630      	mov	r0, r6
 8009668:	eb04 0903 	add.w	r9, r4, r3
 800966c:	f001 fdce 	bl	800b20c <_sbrk_r>
 8009670:	4581      	cmp	r9, r0
 8009672:	d142      	bne.n	80096fa <_malloc_r+0xea>
 8009674:	6821      	ldr	r1, [r4, #0]
 8009676:	4630      	mov	r0, r6
 8009678:	1a6d      	subs	r5, r5, r1
 800967a:	4629      	mov	r1, r5
 800967c:	f7ff ffa6 	bl	80095cc <sbrk_aligned>
 8009680:	3001      	adds	r0, #1
 8009682:	d03a      	beq.n	80096fa <_malloc_r+0xea>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	442b      	add	r3, r5
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	f8d8 3000 	ldr.w	r3, [r8]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	bb62      	cbnz	r2, 80096ec <_malloc_r+0xdc>
 8009692:	f8c8 7000 	str.w	r7, [r8]
 8009696:	e00f      	b.n	80096b8 <_malloc_r+0xa8>
 8009698:	6822      	ldr	r2, [r4, #0]
 800969a:	1b52      	subs	r2, r2, r5
 800969c:	d420      	bmi.n	80096e0 <_malloc_r+0xd0>
 800969e:	2a0b      	cmp	r2, #11
 80096a0:	d917      	bls.n	80096d2 <_malloc_r+0xc2>
 80096a2:	1961      	adds	r1, r4, r5
 80096a4:	42a3      	cmp	r3, r4
 80096a6:	6025      	str	r5, [r4, #0]
 80096a8:	bf18      	it	ne
 80096aa:	6059      	strne	r1, [r3, #4]
 80096ac:	6863      	ldr	r3, [r4, #4]
 80096ae:	bf08      	it	eq
 80096b0:	f8c8 1000 	streq.w	r1, [r8]
 80096b4:	5162      	str	r2, [r4, r5]
 80096b6:	604b      	str	r3, [r1, #4]
 80096b8:	4630      	mov	r0, r6
 80096ba:	f000 f82f 	bl	800971c <__malloc_unlock>
 80096be:	f104 000b 	add.w	r0, r4, #11
 80096c2:	1d23      	adds	r3, r4, #4
 80096c4:	f020 0007 	bic.w	r0, r0, #7
 80096c8:	1ac2      	subs	r2, r0, r3
 80096ca:	bf1c      	itt	ne
 80096cc:	1a1b      	subne	r3, r3, r0
 80096ce:	50a3      	strne	r3, [r4, r2]
 80096d0:	e7af      	b.n	8009632 <_malloc_r+0x22>
 80096d2:	6862      	ldr	r2, [r4, #4]
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	bf0c      	ite	eq
 80096d8:	f8c8 2000 	streq.w	r2, [r8]
 80096dc:	605a      	strne	r2, [r3, #4]
 80096de:	e7eb      	b.n	80096b8 <_malloc_r+0xa8>
 80096e0:	4623      	mov	r3, r4
 80096e2:	6864      	ldr	r4, [r4, #4]
 80096e4:	e7ae      	b.n	8009644 <_malloc_r+0x34>
 80096e6:	463c      	mov	r4, r7
 80096e8:	687f      	ldr	r7, [r7, #4]
 80096ea:	e7b6      	b.n	800965a <_malloc_r+0x4a>
 80096ec:	461a      	mov	r2, r3
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	d1fb      	bne.n	80096ec <_malloc_r+0xdc>
 80096f4:	2300      	movs	r3, #0
 80096f6:	6053      	str	r3, [r2, #4]
 80096f8:	e7de      	b.n	80096b8 <_malloc_r+0xa8>
 80096fa:	230c      	movs	r3, #12
 80096fc:	4630      	mov	r0, r6
 80096fe:	6033      	str	r3, [r6, #0]
 8009700:	f000 f80c 	bl	800971c <__malloc_unlock>
 8009704:	e794      	b.n	8009630 <_malloc_r+0x20>
 8009706:	6005      	str	r5, [r0, #0]
 8009708:	e7d6      	b.n	80096b8 <_malloc_r+0xa8>
 800970a:	bf00      	nop
 800970c:	20000460 	.word	0x20000460

08009710 <__malloc_lock>:
 8009710:	4801      	ldr	r0, [pc, #4]	@ (8009718 <__malloc_lock+0x8>)
 8009712:	f7ff b8a0 	b.w	8008856 <__retarget_lock_acquire_recursive>
 8009716:	bf00      	nop
 8009718:	20000458 	.word	0x20000458

0800971c <__malloc_unlock>:
 800971c:	4801      	ldr	r0, [pc, #4]	@ (8009724 <__malloc_unlock+0x8>)
 800971e:	f7ff b89b 	b.w	8008858 <__retarget_lock_release_recursive>
 8009722:	bf00      	nop
 8009724:	20000458 	.word	0x20000458

08009728 <_Balloc>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	69c6      	ldr	r6, [r0, #28]
 800972c:	4604      	mov	r4, r0
 800972e:	460d      	mov	r5, r1
 8009730:	b976      	cbnz	r6, 8009750 <_Balloc+0x28>
 8009732:	2010      	movs	r0, #16
 8009734:	f7ff ff42 	bl	80095bc <malloc>
 8009738:	4602      	mov	r2, r0
 800973a:	61e0      	str	r0, [r4, #28]
 800973c:	b920      	cbnz	r0, 8009748 <_Balloc+0x20>
 800973e:	4b18      	ldr	r3, [pc, #96]	@ (80097a0 <_Balloc+0x78>)
 8009740:	216b      	movs	r1, #107	@ 0x6b
 8009742:	4818      	ldr	r0, [pc, #96]	@ (80097a4 <_Balloc+0x7c>)
 8009744:	f001 fd88 	bl	800b258 <__assert_func>
 8009748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800974c:	6006      	str	r6, [r0, #0]
 800974e:	60c6      	str	r6, [r0, #12]
 8009750:	69e6      	ldr	r6, [r4, #28]
 8009752:	68f3      	ldr	r3, [r6, #12]
 8009754:	b183      	cbz	r3, 8009778 <_Balloc+0x50>
 8009756:	69e3      	ldr	r3, [r4, #28]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800975e:	b9b8      	cbnz	r0, 8009790 <_Balloc+0x68>
 8009760:	2101      	movs	r1, #1
 8009762:	4620      	mov	r0, r4
 8009764:	fa01 f605 	lsl.w	r6, r1, r5
 8009768:	1d72      	adds	r2, r6, #5
 800976a:	0092      	lsls	r2, r2, #2
 800976c:	f001 fd92 	bl	800b294 <_calloc_r>
 8009770:	b160      	cbz	r0, 800978c <_Balloc+0x64>
 8009772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009776:	e00e      	b.n	8009796 <_Balloc+0x6e>
 8009778:	2221      	movs	r2, #33	@ 0x21
 800977a:	2104      	movs	r1, #4
 800977c:	4620      	mov	r0, r4
 800977e:	f001 fd89 	bl	800b294 <_calloc_r>
 8009782:	69e3      	ldr	r3, [r4, #28]
 8009784:	60f0      	str	r0, [r6, #12]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1e4      	bne.n	8009756 <_Balloc+0x2e>
 800978c:	2000      	movs	r0, #0
 800978e:	bd70      	pop	{r4, r5, r6, pc}
 8009790:	6802      	ldr	r2, [r0, #0]
 8009792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009796:	2300      	movs	r3, #0
 8009798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800979c:	e7f7      	b.n	800978e <_Balloc+0x66>
 800979e:	bf00      	nop
 80097a0:	0800c0ba 	.word	0x0800c0ba
 80097a4:	0800c13a 	.word	0x0800c13a

080097a8 <_Bfree>:
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	69c6      	ldr	r6, [r0, #28]
 80097ac:	4605      	mov	r5, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	b976      	cbnz	r6, 80097d0 <_Bfree+0x28>
 80097b2:	2010      	movs	r0, #16
 80097b4:	f7ff ff02 	bl	80095bc <malloc>
 80097b8:	4602      	mov	r2, r0
 80097ba:	61e8      	str	r0, [r5, #28]
 80097bc:	b920      	cbnz	r0, 80097c8 <_Bfree+0x20>
 80097be:	4b09      	ldr	r3, [pc, #36]	@ (80097e4 <_Bfree+0x3c>)
 80097c0:	218f      	movs	r1, #143	@ 0x8f
 80097c2:	4809      	ldr	r0, [pc, #36]	@ (80097e8 <_Bfree+0x40>)
 80097c4:	f001 fd48 	bl	800b258 <__assert_func>
 80097c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097cc:	6006      	str	r6, [r0, #0]
 80097ce:	60c6      	str	r6, [r0, #12]
 80097d0:	b13c      	cbz	r4, 80097e2 <_Bfree+0x3a>
 80097d2:	69eb      	ldr	r3, [r5, #28]
 80097d4:	6862      	ldr	r2, [r4, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097dc:	6021      	str	r1, [r4, #0]
 80097de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	0800c0ba 	.word	0x0800c0ba
 80097e8:	0800c13a 	.word	0x0800c13a

080097ec <__multadd>:
 80097ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f0:	f101 0c14 	add.w	ip, r1, #20
 80097f4:	4607      	mov	r7, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	461e      	mov	r6, r3
 80097fa:	690d      	ldr	r5, [r1, #16]
 80097fc:	2000      	movs	r0, #0
 80097fe:	f8dc 3000 	ldr.w	r3, [ip]
 8009802:	3001      	adds	r0, #1
 8009804:	b299      	uxth	r1, r3
 8009806:	4285      	cmp	r5, r0
 8009808:	fb02 6101 	mla	r1, r2, r1, r6
 800980c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009810:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8009814:	b289      	uxth	r1, r1
 8009816:	fb02 3306 	mla	r3, r2, r6, r3
 800981a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800981e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009822:	f84c 1b04 	str.w	r1, [ip], #4
 8009826:	dcea      	bgt.n	80097fe <__multadd+0x12>
 8009828:	b30e      	cbz	r6, 800986e <__multadd+0x82>
 800982a:	68a3      	ldr	r3, [r4, #8]
 800982c:	42ab      	cmp	r3, r5
 800982e:	dc19      	bgt.n	8009864 <__multadd+0x78>
 8009830:	6861      	ldr	r1, [r4, #4]
 8009832:	4638      	mov	r0, r7
 8009834:	3101      	adds	r1, #1
 8009836:	f7ff ff77 	bl	8009728 <_Balloc>
 800983a:	4680      	mov	r8, r0
 800983c:	b928      	cbnz	r0, 800984a <__multadd+0x5e>
 800983e:	4602      	mov	r2, r0
 8009840:	4b0c      	ldr	r3, [pc, #48]	@ (8009874 <__multadd+0x88>)
 8009842:	21ba      	movs	r1, #186	@ 0xba
 8009844:	480c      	ldr	r0, [pc, #48]	@ (8009878 <__multadd+0x8c>)
 8009846:	f001 fd07 	bl	800b258 <__assert_func>
 800984a:	6922      	ldr	r2, [r4, #16]
 800984c:	f104 010c 	add.w	r1, r4, #12
 8009850:	300c      	adds	r0, #12
 8009852:	3202      	adds	r2, #2
 8009854:	0092      	lsls	r2, r2, #2
 8009856:	f001 fce9 	bl	800b22c <memcpy>
 800985a:	4621      	mov	r1, r4
 800985c:	4644      	mov	r4, r8
 800985e:	4638      	mov	r0, r7
 8009860:	f7ff ffa2 	bl	80097a8 <_Bfree>
 8009864:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009868:	3501      	adds	r5, #1
 800986a:	615e      	str	r6, [r3, #20]
 800986c:	6125      	str	r5, [r4, #16]
 800986e:	4620      	mov	r0, r4
 8009870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009874:	0800c129 	.word	0x0800c129
 8009878:	0800c13a 	.word	0x0800c13a

0800987c <__s2b>:
 800987c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009880:	4615      	mov	r5, r2
 8009882:	461f      	mov	r7, r3
 8009884:	2209      	movs	r2, #9
 8009886:	3308      	adds	r3, #8
 8009888:	460c      	mov	r4, r1
 800988a:	4606      	mov	r6, r0
 800988c:	2100      	movs	r1, #0
 800988e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009892:	2201      	movs	r2, #1
 8009894:	429a      	cmp	r2, r3
 8009896:	db09      	blt.n	80098ac <__s2b+0x30>
 8009898:	4630      	mov	r0, r6
 800989a:	f7ff ff45 	bl	8009728 <_Balloc>
 800989e:	b940      	cbnz	r0, 80098b2 <__s2b+0x36>
 80098a0:	4602      	mov	r2, r0
 80098a2:	4b19      	ldr	r3, [pc, #100]	@ (8009908 <__s2b+0x8c>)
 80098a4:	21d3      	movs	r1, #211	@ 0xd3
 80098a6:	4819      	ldr	r0, [pc, #100]	@ (800990c <__s2b+0x90>)
 80098a8:	f001 fcd6 	bl	800b258 <__assert_func>
 80098ac:	0052      	lsls	r2, r2, #1
 80098ae:	3101      	adds	r1, #1
 80098b0:	e7f0      	b.n	8009894 <__s2b+0x18>
 80098b2:	9b08      	ldr	r3, [sp, #32]
 80098b4:	2d09      	cmp	r5, #9
 80098b6:	6143      	str	r3, [r0, #20]
 80098b8:	f04f 0301 	mov.w	r3, #1
 80098bc:	6103      	str	r3, [r0, #16]
 80098be:	dd16      	ble.n	80098ee <__s2b+0x72>
 80098c0:	f104 0909 	add.w	r9, r4, #9
 80098c4:	442c      	add	r4, r5
 80098c6:	46c8      	mov	r8, r9
 80098c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098cc:	4601      	mov	r1, r0
 80098ce:	220a      	movs	r2, #10
 80098d0:	4630      	mov	r0, r6
 80098d2:	3b30      	subs	r3, #48	@ 0x30
 80098d4:	f7ff ff8a 	bl	80097ec <__multadd>
 80098d8:	45a0      	cmp	r8, r4
 80098da:	d1f5      	bne.n	80098c8 <__s2b+0x4c>
 80098dc:	f1a5 0408 	sub.w	r4, r5, #8
 80098e0:	444c      	add	r4, r9
 80098e2:	1b2d      	subs	r5, r5, r4
 80098e4:	1963      	adds	r3, r4, r5
 80098e6:	42bb      	cmp	r3, r7
 80098e8:	db04      	blt.n	80098f4 <__s2b+0x78>
 80098ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ee:	340a      	adds	r4, #10
 80098f0:	2509      	movs	r5, #9
 80098f2:	e7f6      	b.n	80098e2 <__s2b+0x66>
 80098f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098f8:	4601      	mov	r1, r0
 80098fa:	220a      	movs	r2, #10
 80098fc:	4630      	mov	r0, r6
 80098fe:	3b30      	subs	r3, #48	@ 0x30
 8009900:	f7ff ff74 	bl	80097ec <__multadd>
 8009904:	e7ee      	b.n	80098e4 <__s2b+0x68>
 8009906:	bf00      	nop
 8009908:	0800c129 	.word	0x0800c129
 800990c:	0800c13a 	.word	0x0800c13a

08009910 <__hi0bits>:
 8009910:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009914:	4603      	mov	r3, r0
 8009916:	bf36      	itet	cc
 8009918:	0403      	lslcc	r3, r0, #16
 800991a:	2000      	movcs	r0, #0
 800991c:	2010      	movcc	r0, #16
 800991e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009922:	bf3c      	itt	cc
 8009924:	021b      	lslcc	r3, r3, #8
 8009926:	3008      	addcc	r0, #8
 8009928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800992c:	bf3c      	itt	cc
 800992e:	011b      	lslcc	r3, r3, #4
 8009930:	3004      	addcc	r0, #4
 8009932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009936:	bf3c      	itt	cc
 8009938:	009b      	lslcc	r3, r3, #2
 800993a:	3002      	addcc	r0, #2
 800993c:	2b00      	cmp	r3, #0
 800993e:	db05      	blt.n	800994c <__hi0bits+0x3c>
 8009940:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009944:	f100 0001 	add.w	r0, r0, #1
 8009948:	bf08      	it	eq
 800994a:	2020      	moveq	r0, #32
 800994c:	4770      	bx	lr

0800994e <__lo0bits>:
 800994e:	6803      	ldr	r3, [r0, #0]
 8009950:	4602      	mov	r2, r0
 8009952:	f013 0007 	ands.w	r0, r3, #7
 8009956:	d00b      	beq.n	8009970 <__lo0bits+0x22>
 8009958:	07d9      	lsls	r1, r3, #31
 800995a:	d421      	bmi.n	80099a0 <__lo0bits+0x52>
 800995c:	0798      	lsls	r0, r3, #30
 800995e:	bf47      	ittee	mi
 8009960:	085b      	lsrmi	r3, r3, #1
 8009962:	2001      	movmi	r0, #1
 8009964:	089b      	lsrpl	r3, r3, #2
 8009966:	2002      	movpl	r0, #2
 8009968:	bf4c      	ite	mi
 800996a:	6013      	strmi	r3, [r2, #0]
 800996c:	6013      	strpl	r3, [r2, #0]
 800996e:	4770      	bx	lr
 8009970:	b299      	uxth	r1, r3
 8009972:	b909      	cbnz	r1, 8009978 <__lo0bits+0x2a>
 8009974:	0c1b      	lsrs	r3, r3, #16
 8009976:	2010      	movs	r0, #16
 8009978:	b2d9      	uxtb	r1, r3
 800997a:	b909      	cbnz	r1, 8009980 <__lo0bits+0x32>
 800997c:	3008      	adds	r0, #8
 800997e:	0a1b      	lsrs	r3, r3, #8
 8009980:	0719      	lsls	r1, r3, #28
 8009982:	bf04      	itt	eq
 8009984:	091b      	lsreq	r3, r3, #4
 8009986:	3004      	addeq	r0, #4
 8009988:	0799      	lsls	r1, r3, #30
 800998a:	bf04      	itt	eq
 800998c:	089b      	lsreq	r3, r3, #2
 800998e:	3002      	addeq	r0, #2
 8009990:	07d9      	lsls	r1, r3, #31
 8009992:	d403      	bmi.n	800999c <__lo0bits+0x4e>
 8009994:	085b      	lsrs	r3, r3, #1
 8009996:	f100 0001 	add.w	r0, r0, #1
 800999a:	d003      	beq.n	80099a4 <__lo0bits+0x56>
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	4770      	bx	lr
 80099a0:	2000      	movs	r0, #0
 80099a2:	4770      	bx	lr
 80099a4:	2020      	movs	r0, #32
 80099a6:	4770      	bx	lr

080099a8 <__i2b>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	460c      	mov	r4, r1
 80099ac:	2101      	movs	r1, #1
 80099ae:	f7ff febb 	bl	8009728 <_Balloc>
 80099b2:	4602      	mov	r2, r0
 80099b4:	b928      	cbnz	r0, 80099c2 <__i2b+0x1a>
 80099b6:	4b05      	ldr	r3, [pc, #20]	@ (80099cc <__i2b+0x24>)
 80099b8:	f240 1145 	movw	r1, #325	@ 0x145
 80099bc:	4804      	ldr	r0, [pc, #16]	@ (80099d0 <__i2b+0x28>)
 80099be:	f001 fc4b 	bl	800b258 <__assert_func>
 80099c2:	2301      	movs	r3, #1
 80099c4:	6144      	str	r4, [r0, #20]
 80099c6:	6103      	str	r3, [r0, #16]
 80099c8:	bd10      	pop	{r4, pc}
 80099ca:	bf00      	nop
 80099cc:	0800c129 	.word	0x0800c129
 80099d0:	0800c13a 	.word	0x0800c13a

080099d4 <__multiply>:
 80099d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	4614      	mov	r4, r2
 80099da:	690a      	ldr	r2, [r1, #16]
 80099dc:	460f      	mov	r7, r1
 80099de:	b085      	sub	sp, #20
 80099e0:	6923      	ldr	r3, [r4, #16]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	bfa2      	ittt	ge
 80099e6:	4623      	movge	r3, r4
 80099e8:	460c      	movge	r4, r1
 80099ea:	461f      	movge	r7, r3
 80099ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80099f0:	68a3      	ldr	r3, [r4, #8]
 80099f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80099f6:	6861      	ldr	r1, [r4, #4]
 80099f8:	eb0a 0609 	add.w	r6, sl, r9
 80099fc:	42b3      	cmp	r3, r6
 80099fe:	bfb8      	it	lt
 8009a00:	3101      	addlt	r1, #1
 8009a02:	f7ff fe91 	bl	8009728 <_Balloc>
 8009a06:	b930      	cbnz	r0, 8009a16 <__multiply+0x42>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	4b45      	ldr	r3, [pc, #276]	@ (8009b20 <__multiply+0x14c>)
 8009a0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a10:	4844      	ldr	r0, [pc, #272]	@ (8009b24 <__multiply+0x150>)
 8009a12:	f001 fc21 	bl	800b258 <__assert_func>
 8009a16:	f100 0514 	add.w	r5, r0, #20
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a20:	462b      	mov	r3, r5
 8009a22:	4543      	cmp	r3, r8
 8009a24:	d321      	bcc.n	8009a6a <__multiply+0x96>
 8009a26:	f107 0114 	add.w	r1, r7, #20
 8009a2a:	f104 0214 	add.w	r2, r4, #20
 8009a2e:	f104 0715 	add.w	r7, r4, #21
 8009a32:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009a36:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009a3a:	9302      	str	r3, [sp, #8]
 8009a3c:	1b13      	subs	r3, r2, r4
 8009a3e:	3b15      	subs	r3, #21
 8009a40:	f023 0303 	bic.w	r3, r3, #3
 8009a44:	3304      	adds	r3, #4
 8009a46:	42ba      	cmp	r2, r7
 8009a48:	bf38      	it	cc
 8009a4a:	2304      	movcc	r3, #4
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	9b02      	ldr	r3, [sp, #8]
 8009a50:	9103      	str	r1, [sp, #12]
 8009a52:	428b      	cmp	r3, r1
 8009a54:	d80c      	bhi.n	8009a70 <__multiply+0x9c>
 8009a56:	2e00      	cmp	r6, #0
 8009a58:	dd03      	ble.n	8009a62 <__multiply+0x8e>
 8009a5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d05b      	beq.n	8009b1a <__multiply+0x146>
 8009a62:	6106      	str	r6, [r0, #16]
 8009a64:	b005      	add	sp, #20
 8009a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6a:	f843 2b04 	str.w	r2, [r3], #4
 8009a6e:	e7d8      	b.n	8009a22 <__multiply+0x4e>
 8009a70:	f8b1 a000 	ldrh.w	sl, [r1]
 8009a74:	f1ba 0f00 	cmp.w	sl, #0
 8009a78:	d024      	beq.n	8009ac4 <__multiply+0xf0>
 8009a7a:	f104 0e14 	add.w	lr, r4, #20
 8009a7e:	46a9      	mov	r9, r5
 8009a80:	f04f 0c00 	mov.w	ip, #0
 8009a84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a88:	f8d9 3000 	ldr.w	r3, [r9]
 8009a8c:	fa1f fb87 	uxth.w	fp, r7
 8009a90:	4572      	cmp	r2, lr
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	fb0a 330b 	mla	r3, sl, fp, r3
 8009a98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009a9c:	f8d9 7000 	ldr.w	r7, [r9]
 8009aa0:	4463      	add	r3, ip
 8009aa2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009aa6:	fb0a c70b 	mla	r7, sl, fp, ip
 8009aaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ab4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ab8:	f849 3b04 	str.w	r3, [r9], #4
 8009abc:	d8e2      	bhi.n	8009a84 <__multiply+0xb0>
 8009abe:	9b01      	ldr	r3, [sp, #4]
 8009ac0:	f845 c003 	str.w	ip, [r5, r3]
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	3104      	adds	r1, #4
 8009ac8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009acc:	f1b9 0f00 	cmp.w	r9, #0
 8009ad0:	d021      	beq.n	8009b16 <__multiply+0x142>
 8009ad2:	682b      	ldr	r3, [r5, #0]
 8009ad4:	f104 0c14 	add.w	ip, r4, #20
 8009ad8:	46ae      	mov	lr, r5
 8009ada:	f04f 0a00 	mov.w	sl, #0
 8009ade:	f8bc b000 	ldrh.w	fp, [ip]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009ae8:	fb09 770b 	mla	r7, r9, fp, r7
 8009aec:	4457      	add	r7, sl
 8009aee:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009af2:	f84e 3b04 	str.w	r3, [lr], #4
 8009af6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009afa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009afe:	f8be 3000 	ldrh.w	r3, [lr]
 8009b02:	4562      	cmp	r2, ip
 8009b04:	fb09 330a 	mla	r3, r9, sl, r3
 8009b08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b10:	d8e5      	bhi.n	8009ade <__multiply+0x10a>
 8009b12:	9f01      	ldr	r7, [sp, #4]
 8009b14:	51eb      	str	r3, [r5, r7]
 8009b16:	3504      	adds	r5, #4
 8009b18:	e799      	b.n	8009a4e <__multiply+0x7a>
 8009b1a:	3e01      	subs	r6, #1
 8009b1c:	e79b      	b.n	8009a56 <__multiply+0x82>
 8009b1e:	bf00      	nop
 8009b20:	0800c129 	.word	0x0800c129
 8009b24:	0800c13a 	.word	0x0800c13a

08009b28 <__pow5mult>:
 8009b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b2c:	4615      	mov	r5, r2
 8009b2e:	f012 0203 	ands.w	r2, r2, #3
 8009b32:	4607      	mov	r7, r0
 8009b34:	460e      	mov	r6, r1
 8009b36:	d007      	beq.n	8009b48 <__pow5mult+0x20>
 8009b38:	3a01      	subs	r2, #1
 8009b3a:	4c25      	ldr	r4, [pc, #148]	@ (8009bd0 <__pow5mult+0xa8>)
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b42:	f7ff fe53 	bl	80097ec <__multadd>
 8009b46:	4606      	mov	r6, r0
 8009b48:	10ad      	asrs	r5, r5, #2
 8009b4a:	d03d      	beq.n	8009bc8 <__pow5mult+0xa0>
 8009b4c:	69fc      	ldr	r4, [r7, #28]
 8009b4e:	b97c      	cbnz	r4, 8009b70 <__pow5mult+0x48>
 8009b50:	2010      	movs	r0, #16
 8009b52:	f7ff fd33 	bl	80095bc <malloc>
 8009b56:	4602      	mov	r2, r0
 8009b58:	61f8      	str	r0, [r7, #28]
 8009b5a:	b928      	cbnz	r0, 8009b68 <__pow5mult+0x40>
 8009b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009bd4 <__pow5mult+0xac>)
 8009b5e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b62:	481d      	ldr	r0, [pc, #116]	@ (8009bd8 <__pow5mult+0xb0>)
 8009b64:	f001 fb78 	bl	800b258 <__assert_func>
 8009b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b6c:	6004      	str	r4, [r0, #0]
 8009b6e:	60c4      	str	r4, [r0, #12]
 8009b70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b78:	b94c      	cbnz	r4, 8009b8e <__pow5mult+0x66>
 8009b7a:	f240 2171 	movw	r1, #625	@ 0x271
 8009b7e:	4638      	mov	r0, r7
 8009b80:	f7ff ff12 	bl	80099a8 <__i2b>
 8009b84:	2300      	movs	r3, #0
 8009b86:	4604      	mov	r4, r0
 8009b88:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b8c:	6003      	str	r3, [r0, #0]
 8009b8e:	f04f 0900 	mov.w	r9, #0
 8009b92:	07eb      	lsls	r3, r5, #31
 8009b94:	d50a      	bpl.n	8009bac <__pow5mult+0x84>
 8009b96:	4631      	mov	r1, r6
 8009b98:	4622      	mov	r2, r4
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f7ff ff1a 	bl	80099d4 <__multiply>
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	4646      	mov	r6, r8
 8009ba8:	f7ff fdfe 	bl	80097a8 <_Bfree>
 8009bac:	106d      	asrs	r5, r5, #1
 8009bae:	d00b      	beq.n	8009bc8 <__pow5mult+0xa0>
 8009bb0:	6820      	ldr	r0, [r4, #0]
 8009bb2:	b938      	cbnz	r0, 8009bc4 <__pow5mult+0x9c>
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f7ff ff0b 	bl	80099d4 <__multiply>
 8009bbe:	6020      	str	r0, [r4, #0]
 8009bc0:	f8c0 9000 	str.w	r9, [r0]
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	e7e4      	b.n	8009b92 <__pow5mult+0x6a>
 8009bc8:	4630      	mov	r0, r6
 8009bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bce:	bf00      	nop
 8009bd0:	0800c194 	.word	0x0800c194
 8009bd4:	0800c0ba 	.word	0x0800c0ba
 8009bd8:	0800c13a 	.word	0x0800c13a

08009bdc <__lshift>:
 8009bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	460c      	mov	r4, r1
 8009be2:	4607      	mov	r7, r0
 8009be4:	4691      	mov	r9, r2
 8009be6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	6849      	ldr	r1, [r1, #4]
 8009bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bf2:	68a3      	ldr	r3, [r4, #8]
 8009bf4:	f108 0601 	add.w	r6, r8, #1
 8009bf8:	42b3      	cmp	r3, r6
 8009bfa:	db0b      	blt.n	8009c14 <__lshift+0x38>
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7ff fd93 	bl	8009728 <_Balloc>
 8009c02:	4605      	mov	r5, r0
 8009c04:	b948      	cbnz	r0, 8009c1a <__lshift+0x3e>
 8009c06:	4602      	mov	r2, r0
 8009c08:	4b28      	ldr	r3, [pc, #160]	@ (8009cac <__lshift+0xd0>)
 8009c0a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c0e:	4828      	ldr	r0, [pc, #160]	@ (8009cb0 <__lshift+0xd4>)
 8009c10:	f001 fb22 	bl	800b258 <__assert_func>
 8009c14:	3101      	adds	r1, #1
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	e7ee      	b.n	8009bf8 <__lshift+0x1c>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f100 0114 	add.w	r1, r0, #20
 8009c20:	f100 0210 	add.w	r2, r0, #16
 8009c24:	4618      	mov	r0, r3
 8009c26:	4553      	cmp	r3, sl
 8009c28:	db33      	blt.n	8009c92 <__lshift+0xb6>
 8009c2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c2e:	f104 0314 	add.w	r3, r4, #20
 8009c32:	6920      	ldr	r0, [r4, #16]
 8009c34:	f019 091f 	ands.w	r9, r9, #31
 8009c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c40:	d02b      	beq.n	8009c9a <__lshift+0xbe>
 8009c42:	f1c9 0e20 	rsb	lr, r9, #32
 8009c46:	468a      	mov	sl, r1
 8009c48:	2200      	movs	r2, #0
 8009c4a:	6818      	ldr	r0, [r3, #0]
 8009c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8009c50:	4310      	orrs	r0, r2
 8009c52:	f84a 0b04 	str.w	r0, [sl], #4
 8009c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c5a:	459c      	cmp	ip, r3
 8009c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c60:	d8f3      	bhi.n	8009c4a <__lshift+0x6e>
 8009c62:	ebac 0304 	sub.w	r3, ip, r4
 8009c66:	f104 0015 	add.w	r0, r4, #21
 8009c6a:	3b15      	subs	r3, #21
 8009c6c:	f023 0303 	bic.w	r3, r3, #3
 8009c70:	3304      	adds	r3, #4
 8009c72:	4584      	cmp	ip, r0
 8009c74:	bf38      	it	cc
 8009c76:	2304      	movcc	r3, #4
 8009c78:	50ca      	str	r2, [r1, r3]
 8009c7a:	b10a      	cbz	r2, 8009c80 <__lshift+0xa4>
 8009c7c:	f108 0602 	add.w	r6, r8, #2
 8009c80:	3e01      	subs	r6, #1
 8009c82:	4638      	mov	r0, r7
 8009c84:	4621      	mov	r1, r4
 8009c86:	612e      	str	r6, [r5, #16]
 8009c88:	f7ff fd8e 	bl	80097a8 <_Bfree>
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c92:	3301      	adds	r3, #1
 8009c94:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c98:	e7c5      	b.n	8009c26 <__lshift+0x4a>
 8009c9a:	3904      	subs	r1, #4
 8009c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca0:	459c      	cmp	ip, r3
 8009ca2:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ca6:	d8f9      	bhi.n	8009c9c <__lshift+0xc0>
 8009ca8:	e7ea      	b.n	8009c80 <__lshift+0xa4>
 8009caa:	bf00      	nop
 8009cac:	0800c129 	.word	0x0800c129
 8009cb0:	0800c13a 	.word	0x0800c13a

08009cb4 <__mcmp>:
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	690a      	ldr	r2, [r1, #16]
 8009cb8:	6900      	ldr	r0, [r0, #16]
 8009cba:	1a80      	subs	r0, r0, r2
 8009cbc:	b530      	push	{r4, r5, lr}
 8009cbe:	d10e      	bne.n	8009cde <__mcmp+0x2a>
 8009cc0:	3314      	adds	r3, #20
 8009cc2:	3114      	adds	r1, #20
 8009cc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ccc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009cd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009cd4:	4295      	cmp	r5, r2
 8009cd6:	d003      	beq.n	8009ce0 <__mcmp+0x2c>
 8009cd8:	d205      	bcs.n	8009ce6 <__mcmp+0x32>
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295
 8009cde:	bd30      	pop	{r4, r5, pc}
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	d3f3      	bcc.n	8009ccc <__mcmp+0x18>
 8009ce4:	e7fb      	b.n	8009cde <__mcmp+0x2a>
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e7f9      	b.n	8009cde <__mcmp+0x2a>
	...

08009cec <__mdiff>:
 8009cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	4689      	mov	r9, r1
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4614      	mov	r4, r2
 8009cf8:	4648      	mov	r0, r9
 8009cfa:	f7ff ffdb 	bl	8009cb4 <__mcmp>
 8009cfe:	1e05      	subs	r5, r0, #0
 8009d00:	d112      	bne.n	8009d28 <__mdiff+0x3c>
 8009d02:	4629      	mov	r1, r5
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7ff fd0f 	bl	8009728 <_Balloc>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	b928      	cbnz	r0, 8009d1a <__mdiff+0x2e>
 8009d0e:	4b41      	ldr	r3, [pc, #260]	@ (8009e14 <__mdiff+0x128>)
 8009d10:	f240 2137 	movw	r1, #567	@ 0x237
 8009d14:	4840      	ldr	r0, [pc, #256]	@ (8009e18 <__mdiff+0x12c>)
 8009d16:	f001 fa9f 	bl	800b258 <__assert_func>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d20:	4610      	mov	r0, r2
 8009d22:	b003      	add	sp, #12
 8009d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d28:	bfbc      	itt	lt
 8009d2a:	464b      	movlt	r3, r9
 8009d2c:	46a1      	movlt	r9, r4
 8009d2e:	4630      	mov	r0, r6
 8009d30:	bfb8      	it	lt
 8009d32:	2501      	movlt	r5, #1
 8009d34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d38:	bfb4      	ite	lt
 8009d3a:	461c      	movlt	r4, r3
 8009d3c:	2500      	movge	r5, #0
 8009d3e:	f7ff fcf3 	bl	8009728 <_Balloc>
 8009d42:	4602      	mov	r2, r0
 8009d44:	b918      	cbnz	r0, 8009d4e <__mdiff+0x62>
 8009d46:	4b33      	ldr	r3, [pc, #204]	@ (8009e14 <__mdiff+0x128>)
 8009d48:	f240 2145 	movw	r1, #581	@ 0x245
 8009d4c:	e7e2      	b.n	8009d14 <__mdiff+0x28>
 8009d4e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d52:	f104 0e14 	add.w	lr, r4, #20
 8009d56:	6926      	ldr	r6, [r4, #16]
 8009d58:	f100 0b14 	add.w	fp, r0, #20
 8009d5c:	60c5      	str	r5, [r0, #12]
 8009d5e:	f109 0514 	add.w	r5, r9, #20
 8009d62:	f109 0310 	add.w	r3, r9, #16
 8009d66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d6e:	46d9      	mov	r9, fp
 8009d70:	f04f 0c00 	mov.w	ip, #0
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	9b01      	ldr	r3, [sp, #4]
 8009d78:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009d7c:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009d80:	4576      	cmp	r6, lr
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	fa1f f38a 	uxth.w	r3, sl
 8009d88:	4619      	mov	r1, r3
 8009d8a:	b283      	uxth	r3, r0
 8009d8c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8009d90:	eba1 0303 	sub.w	r3, r1, r3
 8009d94:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009d98:	4463      	add	r3, ip
 8009d9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009da4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009da8:	f849 3b04 	str.w	r3, [r9], #4
 8009dac:	d8e3      	bhi.n	8009d76 <__mdiff+0x8a>
 8009dae:	1b33      	subs	r3, r6, r4
 8009db0:	3415      	adds	r4, #21
 8009db2:	3b15      	subs	r3, #21
 8009db4:	f023 0303 	bic.w	r3, r3, #3
 8009db8:	3304      	adds	r3, #4
 8009dba:	42a6      	cmp	r6, r4
 8009dbc:	bf38      	it	cc
 8009dbe:	2304      	movcc	r3, #4
 8009dc0:	441d      	add	r5, r3
 8009dc2:	445b      	add	r3, fp
 8009dc4:	462c      	mov	r4, r5
 8009dc6:	461e      	mov	r6, r3
 8009dc8:	4544      	cmp	r4, r8
 8009dca:	d30e      	bcc.n	8009dea <__mdiff+0xfe>
 8009dcc:	f108 0103 	add.w	r1, r8, #3
 8009dd0:	1b49      	subs	r1, r1, r5
 8009dd2:	3d03      	subs	r5, #3
 8009dd4:	f021 0103 	bic.w	r1, r1, #3
 8009dd8:	45a8      	cmp	r8, r5
 8009dda:	bf38      	it	cc
 8009ddc:	2100      	movcc	r1, #0
 8009dde:	440b      	add	r3, r1
 8009de0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009de4:	b199      	cbz	r1, 8009e0e <__mdiff+0x122>
 8009de6:	6117      	str	r7, [r2, #16]
 8009de8:	e79a      	b.n	8009d20 <__mdiff+0x34>
 8009dea:	f854 1b04 	ldr.w	r1, [r4], #4
 8009dee:	46e6      	mov	lr, ip
 8009df0:	fa1f fc81 	uxth.w	ip, r1
 8009df4:	0c08      	lsrs	r0, r1, #16
 8009df6:	4471      	add	r1, lr
 8009df8:	44f4      	add	ip, lr
 8009dfa:	b289      	uxth	r1, r1
 8009dfc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e08:	f846 1b04 	str.w	r1, [r6], #4
 8009e0c:	e7dc      	b.n	8009dc8 <__mdiff+0xdc>
 8009e0e:	3f01      	subs	r7, #1
 8009e10:	e7e6      	b.n	8009de0 <__mdiff+0xf4>
 8009e12:	bf00      	nop
 8009e14:	0800c129 	.word	0x0800c129
 8009e18:	0800c13a 	.word	0x0800c13a

08009e1c <__ulp>:
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	4b11      	ldr	r3, [pc, #68]	@ (8009e64 <__ulp+0x48>)
 8009e20:	ed8d 0b00 	vstr	d0, [sp]
 8009e24:	9a01      	ldr	r2, [sp, #4]
 8009e26:	4013      	ands	r3, r2
 8009e28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dc08      	bgt.n	8009e42 <__ulp+0x26>
 8009e30:	425b      	negs	r3, r3
 8009e32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009e36:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e3a:	da04      	bge.n	8009e46 <__ulp+0x2a>
 8009e3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009e40:	4113      	asrs	r3, r2
 8009e42:	2200      	movs	r2, #0
 8009e44:	e008      	b.n	8009e58 <__ulp+0x3c>
 8009e46:	f1a2 0314 	sub.w	r3, r2, #20
 8009e4a:	2b1e      	cmp	r3, #30
 8009e4c:	bfd6      	itet	le
 8009e4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009e52:	2201      	movgt	r2, #1
 8009e54:	40da      	lsrle	r2, r3
 8009e56:	2300      	movs	r3, #0
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	ec41 0b10 	vmov	d0, r0, r1
 8009e60:	b002      	add	sp, #8
 8009e62:	4770      	bx	lr
 8009e64:	7ff00000 	.word	0x7ff00000

08009e68 <__b2d>:
 8009e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	6906      	ldr	r6, [r0, #16]
 8009e6e:	f100 0814 	add.w	r8, r0, #20
 8009e72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009e76:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e7a:	1f37      	subs	r7, r6, #4
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	f7ff fd47 	bl	8009910 <__hi0bits>
 8009e82:	f1c0 0320 	rsb	r3, r0, #32
 8009e86:	280a      	cmp	r0, #10
 8009e88:	600b      	str	r3, [r1, #0]
 8009e8a:	491d      	ldr	r1, [pc, #116]	@ (8009f00 <__b2d+0x98>)
 8009e8c:	dc16      	bgt.n	8009ebc <__b2d+0x54>
 8009e8e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e92:	45b8      	cmp	r8, r7
 8009e94:	f100 0015 	add.w	r0, r0, #21
 8009e98:	fa22 f30c 	lsr.w	r3, r2, ip
 8009e9c:	fa02 f000 	lsl.w	r0, r2, r0
 8009ea0:	ea43 0501 	orr.w	r5, r3, r1
 8009ea4:	bf34      	ite	cc
 8009ea6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009eaa:	2300      	movcs	r3, #0
 8009eac:	fa23 f30c 	lsr.w	r3, r3, ip
 8009eb0:	4303      	orrs	r3, r0
 8009eb2:	461c      	mov	r4, r3
 8009eb4:	ec45 4b10 	vmov	d0, r4, r5
 8009eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ebc:	45b8      	cmp	r8, r7
 8009ebe:	bf3a      	itte	cc
 8009ec0:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ec4:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ec8:	2300      	movcs	r3, #0
 8009eca:	380b      	subs	r0, #11
 8009ecc:	d014      	beq.n	8009ef8 <__b2d+0x90>
 8009ece:	f1c0 0120 	rsb	r1, r0, #32
 8009ed2:	4082      	lsls	r2, r0
 8009ed4:	4547      	cmp	r7, r8
 8009ed6:	fa23 f401 	lsr.w	r4, r3, r1
 8009eda:	fa03 f300 	lsl.w	r3, r3, r0
 8009ede:	ea42 0204 	orr.w	r2, r2, r4
 8009ee2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009ee6:	bf8c      	ite	hi
 8009ee8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009eec:	2200      	movls	r2, #0
 8009eee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009ef2:	40ca      	lsrs	r2, r1
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	e7dc      	b.n	8009eb2 <__b2d+0x4a>
 8009ef8:	ea42 0501 	orr.w	r5, r2, r1
 8009efc:	e7d9      	b.n	8009eb2 <__b2d+0x4a>
 8009efe:	bf00      	nop
 8009f00:	3ff00000 	.word	0x3ff00000

08009f04 <__d2b>:
 8009f04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f08:	460f      	mov	r7, r1
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	4616      	mov	r6, r2
 8009f0e:	ec59 8b10 	vmov	r8, r9, d0
 8009f12:	f7ff fc09 	bl	8009728 <_Balloc>
 8009f16:	4604      	mov	r4, r0
 8009f18:	b930      	cbnz	r0, 8009f28 <__d2b+0x24>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	4b23      	ldr	r3, [pc, #140]	@ (8009fac <__d2b+0xa8>)
 8009f1e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f22:	4823      	ldr	r0, [pc, #140]	@ (8009fb0 <__d2b+0xac>)
 8009f24:	f001 f998 	bl	800b258 <__assert_func>
 8009f28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f30:	b10d      	cbz	r5, 8009f36 <__d2b+0x32>
 8009f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	f1b8 0300 	subs.w	r3, r8, #0
 8009f3c:	d023      	beq.n	8009f86 <__d2b+0x82>
 8009f3e:	4668      	mov	r0, sp
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	f7ff fd04 	bl	800994e <__lo0bits>
 8009f46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f4a:	b1d0      	cbz	r0, 8009f82 <__d2b+0x7e>
 8009f4c:	f1c0 0320 	rsb	r3, r0, #32
 8009f50:	fa02 f303 	lsl.w	r3, r2, r3
 8009f54:	40c2      	lsrs	r2, r0
 8009f56:	430b      	orrs	r3, r1
 8009f58:	9201      	str	r2, [sp, #4]
 8009f5a:	6163      	str	r3, [r4, #20]
 8009f5c:	9b01      	ldr	r3, [sp, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	61a3      	str	r3, [r4, #24]
 8009f62:	bf0c      	ite	eq
 8009f64:	2201      	moveq	r2, #1
 8009f66:	2202      	movne	r2, #2
 8009f68:	6122      	str	r2, [r4, #16]
 8009f6a:	b1a5      	cbz	r5, 8009f96 <__d2b+0x92>
 8009f6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f70:	4405      	add	r5, r0
 8009f72:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f76:	603d      	str	r5, [r7, #0]
 8009f78:	6030      	str	r0, [r6, #0]
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	b003      	add	sp, #12
 8009f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f82:	6161      	str	r1, [r4, #20]
 8009f84:	e7ea      	b.n	8009f5c <__d2b+0x58>
 8009f86:	a801      	add	r0, sp, #4
 8009f88:	f7ff fce1 	bl	800994e <__lo0bits>
 8009f8c:	9b01      	ldr	r3, [sp, #4]
 8009f8e:	3020      	adds	r0, #32
 8009f90:	2201      	movs	r2, #1
 8009f92:	6163      	str	r3, [r4, #20]
 8009f94:	e7e8      	b.n	8009f68 <__d2b+0x64>
 8009f96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009f9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f9e:	6038      	str	r0, [r7, #0]
 8009fa0:	6918      	ldr	r0, [r3, #16]
 8009fa2:	f7ff fcb5 	bl	8009910 <__hi0bits>
 8009fa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009faa:	e7e5      	b.n	8009f78 <__d2b+0x74>
 8009fac:	0800c129 	.word	0x0800c129
 8009fb0:	0800c13a 	.word	0x0800c13a

08009fb4 <__ratio>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	e9cd 1000 	strd	r1, r0, [sp]
 8009fbe:	a902      	add	r1, sp, #8
 8009fc0:	f7ff ff52 	bl	8009e68 <__b2d>
 8009fc4:	a903      	add	r1, sp, #12
 8009fc6:	9800      	ldr	r0, [sp, #0]
 8009fc8:	ec55 4b10 	vmov	r4, r5, d0
 8009fcc:	f7ff ff4c 	bl	8009e68 <__b2d>
 8009fd0:	9b01      	ldr	r3, [sp, #4]
 8009fd2:	462f      	mov	r7, r5
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	6919      	ldr	r1, [r3, #16]
 8009fd8:	9b00      	ldr	r3, [sp, #0]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	1ac9      	subs	r1, r1, r3
 8009fde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009fe2:	ec5b ab10 	vmov	sl, fp, d0
 8009fe6:	1a9b      	subs	r3, r3, r2
 8009fe8:	46d9      	mov	r9, fp
 8009fea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfcd      	iteet	gt
 8009ff2:	462a      	movgt	r2, r5
 8009ff4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ff8:	465a      	movle	r2, fp
 8009ffa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ffe:	bfd8      	it	le
 800a000:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a004:	4652      	mov	r2, sl
 800a006:	4639      	mov	r1, r7
 800a008:	464b      	mov	r3, r9
 800a00a:	f7f6 fc23 	bl	8000854 <__aeabi_ddiv>
 800a00e:	ec41 0b10 	vmov	d0, r0, r1
 800a012:	b005      	add	sp, #20
 800a014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a018 <__copybits>:
 800a018:	3901      	subs	r1, #1
 800a01a:	f102 0314 	add.w	r3, r2, #20
 800a01e:	1149      	asrs	r1, r1, #5
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	3101      	adds	r1, #1
 800a024:	6914      	ldr	r4, [r2, #16]
 800a026:	1f05      	subs	r5, r0, #4
 800a028:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a02c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a030:	42a3      	cmp	r3, r4
 800a032:	d30c      	bcc.n	800a04e <__copybits+0x36>
 800a034:	1aa3      	subs	r3, r4, r2
 800a036:	3211      	adds	r2, #17
 800a038:	3b11      	subs	r3, #17
 800a03a:	f023 0303 	bic.w	r3, r3, #3
 800a03e:	42a2      	cmp	r2, r4
 800a040:	bf88      	it	hi
 800a042:	2300      	movhi	r3, #0
 800a044:	4418      	add	r0, r3
 800a046:	2300      	movs	r3, #0
 800a048:	4288      	cmp	r0, r1
 800a04a:	d305      	bcc.n	800a058 <__copybits+0x40>
 800a04c:	bd70      	pop	{r4, r5, r6, pc}
 800a04e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a052:	f845 6f04 	str.w	r6, [r5, #4]!
 800a056:	e7eb      	b.n	800a030 <__copybits+0x18>
 800a058:	f840 3b04 	str.w	r3, [r0], #4
 800a05c:	e7f4      	b.n	800a048 <__copybits+0x30>

0800a05e <__any_on>:
 800a05e:	f100 0214 	add.w	r2, r0, #20
 800a062:	114b      	asrs	r3, r1, #5
 800a064:	6900      	ldr	r0, [r0, #16]
 800a066:	4298      	cmp	r0, r3
 800a068:	b510      	push	{r4, lr}
 800a06a:	db11      	blt.n	800a090 <__any_on+0x32>
 800a06c:	dd0a      	ble.n	800a084 <__any_on+0x26>
 800a06e:	f011 011f 	ands.w	r1, r1, #31
 800a072:	d007      	beq.n	800a084 <__any_on+0x26>
 800a074:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a078:	fa24 f001 	lsr.w	r0, r4, r1
 800a07c:	fa00 f101 	lsl.w	r1, r0, r1
 800a080:	428c      	cmp	r4, r1
 800a082:	d10b      	bne.n	800a09c <__any_on+0x3e>
 800a084:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a088:	4293      	cmp	r3, r2
 800a08a:	d803      	bhi.n	800a094 <__any_on+0x36>
 800a08c:	2000      	movs	r0, #0
 800a08e:	bd10      	pop	{r4, pc}
 800a090:	4603      	mov	r3, r0
 800a092:	e7f7      	b.n	800a084 <__any_on+0x26>
 800a094:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a098:	2900      	cmp	r1, #0
 800a09a:	d0f5      	beq.n	800a088 <__any_on+0x2a>
 800a09c:	2001      	movs	r0, #1
 800a09e:	e7f6      	b.n	800a08e <__any_on+0x30>

0800a0a0 <sulp>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	4616      	mov	r6, r2
 800a0a8:	ec45 4b10 	vmov	d0, r4, r5
 800a0ac:	f7ff feb6 	bl	8009e1c <__ulp>
 800a0b0:	ec51 0b10 	vmov	r0, r1, d0
 800a0b4:	b17e      	cbz	r6, 800a0d6 <sulp+0x36>
 800a0b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a0ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	dd09      	ble.n	800a0d6 <sulp+0x36>
 800a0c2:	051b      	lsls	r3, r3, #20
 800a0c4:	2400      	movs	r4, #0
 800a0c6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a0ca:	4622      	mov	r2, r4
 800a0cc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a0d0:	462b      	mov	r3, r5
 800a0d2:	f7f6 fa95 	bl	8000600 <__aeabi_dmul>
 800a0d6:	ec41 0b10 	vmov	d0, r0, r1
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	0000      	movs	r0, r0
	...

0800a0e0 <_strtod_l>:
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	b09f      	sub	sp, #124	@ 0x7c
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	f04f 0a00 	mov.w	sl, #0
 800a0ec:	f04f 0b00 	mov.w	fp, #0
 800a0f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	9005      	str	r0, [sp, #20]
 800a0f6:	921a      	str	r2, [sp, #104]	@ 0x68
 800a0f8:	460a      	mov	r2, r1
 800a0fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0fc:	7811      	ldrb	r1, [r2, #0]
 800a0fe:	292b      	cmp	r1, #43	@ 0x2b
 800a100:	d04a      	beq.n	800a198 <_strtod_l+0xb8>
 800a102:	d838      	bhi.n	800a176 <_strtod_l+0x96>
 800a104:	290d      	cmp	r1, #13
 800a106:	d832      	bhi.n	800a16e <_strtod_l+0x8e>
 800a108:	2908      	cmp	r1, #8
 800a10a:	d832      	bhi.n	800a172 <_strtod_l+0x92>
 800a10c:	2900      	cmp	r1, #0
 800a10e:	d03b      	beq.n	800a188 <_strtod_l+0xa8>
 800a110:	2200      	movs	r2, #0
 800a112:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a114:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a116:	782a      	ldrb	r2, [r5, #0]
 800a118:	2a30      	cmp	r2, #48	@ 0x30
 800a11a:	f040 80b3 	bne.w	800a284 <_strtod_l+0x1a4>
 800a11e:	786a      	ldrb	r2, [r5, #1]
 800a120:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a124:	2a58      	cmp	r2, #88	@ 0x58
 800a126:	d16e      	bne.n	800a206 <_strtod_l+0x126>
 800a128:	9302      	str	r3, [sp, #8]
 800a12a:	a919      	add	r1, sp, #100	@ 0x64
 800a12c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a12e:	4a90      	ldr	r2, [pc, #576]	@ (800a370 <_strtod_l+0x290>)
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	ab1a      	add	r3, sp, #104	@ 0x68
 800a134:	9805      	ldr	r0, [sp, #20]
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a13a:	f001 f925 	bl	800b388 <__gethex>
 800a13e:	f010 060f 	ands.w	r6, r0, #15
 800a142:	4604      	mov	r4, r0
 800a144:	d005      	beq.n	800a152 <_strtod_l+0x72>
 800a146:	2e06      	cmp	r6, #6
 800a148:	d128      	bne.n	800a19c <_strtod_l+0xbc>
 800a14a:	3501      	adds	r5, #1
 800a14c:	2300      	movs	r3, #0
 800a14e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a150:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a154:	2b00      	cmp	r3, #0
 800a156:	f040 858e 	bne.w	800ac76 <_strtod_l+0xb96>
 800a15a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a15c:	b1cb      	cbz	r3, 800a192 <_strtod_l+0xb2>
 800a15e:	4652      	mov	r2, sl
 800a160:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a164:	ec43 2b10 	vmov	d0, r2, r3
 800a168:	b01f      	add	sp, #124	@ 0x7c
 800a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16e:	2920      	cmp	r1, #32
 800a170:	d1ce      	bne.n	800a110 <_strtod_l+0x30>
 800a172:	3201      	adds	r2, #1
 800a174:	e7c1      	b.n	800a0fa <_strtod_l+0x1a>
 800a176:	292d      	cmp	r1, #45	@ 0x2d
 800a178:	d1ca      	bne.n	800a110 <_strtod_l+0x30>
 800a17a:	2101      	movs	r1, #1
 800a17c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a17e:	1c51      	adds	r1, r2, #1
 800a180:	9119      	str	r1, [sp, #100]	@ 0x64
 800a182:	7852      	ldrb	r2, [r2, #1]
 800a184:	2a00      	cmp	r2, #0
 800a186:	d1c5      	bne.n	800a114 <_strtod_l+0x34>
 800a188:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a18a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f040 8570 	bne.w	800ac72 <_strtod_l+0xb92>
 800a192:	4652      	mov	r2, sl
 800a194:	465b      	mov	r3, fp
 800a196:	e7e5      	b.n	800a164 <_strtod_l+0x84>
 800a198:	2100      	movs	r1, #0
 800a19a:	e7ef      	b.n	800a17c <_strtod_l+0x9c>
 800a19c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a19e:	b13a      	cbz	r2, 800a1b0 <_strtod_l+0xd0>
 800a1a0:	2135      	movs	r1, #53	@ 0x35
 800a1a2:	a81c      	add	r0, sp, #112	@ 0x70
 800a1a4:	f7ff ff38 	bl	800a018 <__copybits>
 800a1a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1aa:	9805      	ldr	r0, [sp, #20]
 800a1ac:	f7ff fafc 	bl	80097a8 <_Bfree>
 800a1b0:	3e01      	subs	r6, #1
 800a1b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a1b4:	2e04      	cmp	r6, #4
 800a1b6:	d806      	bhi.n	800a1c6 <_strtod_l+0xe6>
 800a1b8:	e8df f006 	tbb	[pc, r6]
 800a1bc:	201d0314 	.word	0x201d0314
 800a1c0:	14          	.byte	0x14
 800a1c1:	00          	.byte	0x00
 800a1c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a1c6:	05e1      	lsls	r1, r4, #23
 800a1c8:	bf48      	it	mi
 800a1ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a1ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1d2:	0d1b      	lsrs	r3, r3, #20
 800a1d4:	051b      	lsls	r3, r3, #20
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1bb      	bne.n	800a152 <_strtod_l+0x72>
 800a1da:	f7fe fb11 	bl	8008800 <__errno>
 800a1de:	2322      	movs	r3, #34	@ 0x22
 800a1e0:	6003      	str	r3, [r0, #0]
 800a1e2:	e7b6      	b.n	800a152 <_strtod_l+0x72>
 800a1e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a1e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a1ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a1f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a1f4:	e7e7      	b.n	800a1c6 <_strtod_l+0xe6>
 800a1f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a378 <_strtod_l+0x298>
 800a1fa:	e7e4      	b.n	800a1c6 <_strtod_l+0xe6>
 800a1fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a200:	f04f 3aff 	mov.w	sl, #4294967295
 800a204:	e7df      	b.n	800a1c6 <_strtod_l+0xe6>
 800a206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a20c:	785b      	ldrb	r3, [r3, #1]
 800a20e:	2b30      	cmp	r3, #48	@ 0x30
 800a210:	d0f9      	beq.n	800a206 <_strtod_l+0x126>
 800a212:	2b00      	cmp	r3, #0
 800a214:	d09d      	beq.n	800a152 <_strtod_l+0x72>
 800a216:	2301      	movs	r3, #1
 800a218:	9309      	str	r3, [sp, #36]	@ 0x24
 800a21a:	220a      	movs	r2, #10
 800a21c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a21e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a220:	2300      	movs	r3, #0
 800a222:	461f      	mov	r7, r3
 800a224:	9308      	str	r3, [sp, #32]
 800a226:	930a      	str	r3, [sp, #40]	@ 0x28
 800a228:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a22a:	7805      	ldrb	r5, [r0, #0]
 800a22c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a230:	b2d9      	uxtb	r1, r3
 800a232:	2909      	cmp	r1, #9
 800a234:	d928      	bls.n	800a288 <_strtod_l+0x1a8>
 800a236:	2201      	movs	r2, #1
 800a238:	494e      	ldr	r1, [pc, #312]	@ (800a374 <_strtod_l+0x294>)
 800a23a:	f000 ffd5 	bl	800b1e8 <strncmp>
 800a23e:	2800      	cmp	r0, #0
 800a240:	d033      	beq.n	800a2aa <_strtod_l+0x1ca>
 800a242:	2000      	movs	r0, #0
 800a244:	462a      	mov	r2, r5
 800a246:	463d      	mov	r5, r7
 800a248:	4681      	mov	r9, r0
 800a24a:	4603      	mov	r3, r0
 800a24c:	2a65      	cmp	r2, #101	@ 0x65
 800a24e:	d001      	beq.n	800a254 <_strtod_l+0x174>
 800a250:	2a45      	cmp	r2, #69	@ 0x45
 800a252:	d114      	bne.n	800a27e <_strtod_l+0x19e>
 800a254:	b91d      	cbnz	r5, 800a25e <_strtod_l+0x17e>
 800a256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a258:	4302      	orrs	r2, r0
 800a25a:	d095      	beq.n	800a188 <_strtod_l+0xa8>
 800a25c:	2500      	movs	r5, #0
 800a25e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a260:	1c62      	adds	r2, r4, #1
 800a262:	9219      	str	r2, [sp, #100]	@ 0x64
 800a264:	7862      	ldrb	r2, [r4, #1]
 800a266:	2a2b      	cmp	r2, #43	@ 0x2b
 800a268:	d078      	beq.n	800a35c <_strtod_l+0x27c>
 800a26a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a26c:	d07c      	beq.n	800a368 <_strtod_l+0x288>
 800a26e:	f04f 0c00 	mov.w	ip, #0
 800a272:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a276:	2909      	cmp	r1, #9
 800a278:	f240 8084 	bls.w	800a384 <_strtod_l+0x2a4>
 800a27c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a27e:	f04f 0800 	mov.w	r8, #0
 800a282:	e0a4      	b.n	800a3ce <_strtod_l+0x2ee>
 800a284:	2300      	movs	r3, #0
 800a286:	e7c7      	b.n	800a218 <_strtod_l+0x138>
 800a288:	2f08      	cmp	r7, #8
 800a28a:	f100 0001 	add.w	r0, r0, #1
 800a28e:	f107 0701 	add.w	r7, r7, #1
 800a292:	bfd5      	itete	le
 800a294:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a296:	9908      	ldrgt	r1, [sp, #32]
 800a298:	fb02 3301 	mlale	r3, r2, r1, r3
 800a29c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a2a0:	bfd4      	ite	le
 800a2a2:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a2a4:	9308      	strgt	r3, [sp, #32]
 800a2a6:	9019      	str	r0, [sp, #100]	@ 0x64
 800a2a8:	e7be      	b.n	800a228 <_strtod_l+0x148>
 800a2aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2b0:	785a      	ldrb	r2, [r3, #1]
 800a2b2:	b37f      	cbz	r7, 800a314 <_strtod_l+0x234>
 800a2b4:	4681      	mov	r9, r0
 800a2b6:	463d      	mov	r5, r7
 800a2b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a2bc:	2b09      	cmp	r3, #9
 800a2be:	d912      	bls.n	800a2e6 <_strtod_l+0x206>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e7c3      	b.n	800a24c <_strtod_l+0x16c>
 800a2c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2cc:	785a      	ldrb	r2, [r3, #1]
 800a2ce:	2a30      	cmp	r2, #48	@ 0x30
 800a2d0:	d0f8      	beq.n	800a2c4 <_strtod_l+0x1e4>
 800a2d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a2d6:	2b08      	cmp	r3, #8
 800a2d8:	f200 84d2 	bhi.w	800ac80 <_strtod_l+0xba0>
 800a2dc:	4681      	mov	r9, r0
 800a2de:	2000      	movs	r0, #0
 800a2e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2e2:	4605      	mov	r5, r0
 800a2e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2e6:	3a30      	subs	r2, #48	@ 0x30
 800a2e8:	f100 0301 	add.w	r3, r0, #1
 800a2ec:	d02a      	beq.n	800a344 <_strtod_l+0x264>
 800a2ee:	4499      	add	r9, r3
 800a2f0:	eb00 0c05 	add.w	ip, r0, r5
 800a2f4:	462b      	mov	r3, r5
 800a2f6:	210a      	movs	r1, #10
 800a2f8:	4563      	cmp	r3, ip
 800a2fa:	d10d      	bne.n	800a318 <_strtod_l+0x238>
 800a2fc:	1c69      	adds	r1, r5, #1
 800a2fe:	4401      	add	r1, r0
 800a300:	4428      	add	r0, r5
 800a302:	2808      	cmp	r0, #8
 800a304:	dc16      	bgt.n	800a334 <_strtod_l+0x254>
 800a306:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a308:	230a      	movs	r3, #10
 800a30a:	fb03 2300 	mla	r3, r3, r0, r2
 800a30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a310:	2300      	movs	r3, #0
 800a312:	e018      	b.n	800a346 <_strtod_l+0x266>
 800a314:	4638      	mov	r0, r7
 800a316:	e7da      	b.n	800a2ce <_strtod_l+0x1ee>
 800a318:	2b08      	cmp	r3, #8
 800a31a:	f103 0301 	add.w	r3, r3, #1
 800a31e:	dc03      	bgt.n	800a328 <_strtod_l+0x248>
 800a320:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a322:	434e      	muls	r6, r1
 800a324:	960a      	str	r6, [sp, #40]	@ 0x28
 800a326:	e7e7      	b.n	800a2f8 <_strtod_l+0x218>
 800a328:	2b10      	cmp	r3, #16
 800a32a:	bfde      	ittt	le
 800a32c:	9e08      	ldrle	r6, [sp, #32]
 800a32e:	434e      	mulle	r6, r1
 800a330:	9608      	strle	r6, [sp, #32]
 800a332:	e7e1      	b.n	800a2f8 <_strtod_l+0x218>
 800a334:	280f      	cmp	r0, #15
 800a336:	dceb      	bgt.n	800a310 <_strtod_l+0x230>
 800a338:	9808      	ldr	r0, [sp, #32]
 800a33a:	230a      	movs	r3, #10
 800a33c:	fb03 2300 	mla	r3, r3, r0, r2
 800a340:	9308      	str	r3, [sp, #32]
 800a342:	e7e5      	b.n	800a310 <_strtod_l+0x230>
 800a344:	4629      	mov	r1, r5
 800a346:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a348:	460d      	mov	r5, r1
 800a34a:	1c50      	adds	r0, r2, #1
 800a34c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a34e:	4618      	mov	r0, r3
 800a350:	7852      	ldrb	r2, [r2, #1]
 800a352:	e7b1      	b.n	800a2b8 <_strtod_l+0x1d8>
 800a354:	f04f 0900 	mov.w	r9, #0
 800a358:	2301      	movs	r3, #1
 800a35a:	e77c      	b.n	800a256 <_strtod_l+0x176>
 800a35c:	f04f 0c00 	mov.w	ip, #0
 800a360:	1ca2      	adds	r2, r4, #2
 800a362:	9219      	str	r2, [sp, #100]	@ 0x64
 800a364:	78a2      	ldrb	r2, [r4, #2]
 800a366:	e784      	b.n	800a272 <_strtod_l+0x192>
 800a368:	f04f 0c01 	mov.w	ip, #1
 800a36c:	e7f8      	b.n	800a360 <_strtod_l+0x280>
 800a36e:	bf00      	nop
 800a370:	0800c2a8 	.word	0x0800c2a8
 800a374:	0800c290 	.word	0x0800c290
 800a378:	7ff00000 	.word	0x7ff00000
 800a37c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a37e:	1c51      	adds	r1, r2, #1
 800a380:	9119      	str	r1, [sp, #100]	@ 0x64
 800a382:	7852      	ldrb	r2, [r2, #1]
 800a384:	2a30      	cmp	r2, #48	@ 0x30
 800a386:	d0f9      	beq.n	800a37c <_strtod_l+0x29c>
 800a388:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a38c:	2908      	cmp	r1, #8
 800a38e:	f63f af76 	bhi.w	800a27e <_strtod_l+0x19e>
 800a392:	3a30      	subs	r2, #48	@ 0x30
 800a394:	f04f 080a 	mov.w	r8, #10
 800a398:	920e      	str	r2, [sp, #56]	@ 0x38
 800a39a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a39c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a39e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3a0:	1c56      	adds	r6, r2, #1
 800a3a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800a3a4:	7852      	ldrb	r2, [r2, #1]
 800a3a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a3aa:	f1be 0f09 	cmp.w	lr, #9
 800a3ae:	d939      	bls.n	800a424 <_strtod_l+0x344>
 800a3b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a3b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a3b6:	1a76      	subs	r6, r6, r1
 800a3b8:	2e08      	cmp	r6, #8
 800a3ba:	dc03      	bgt.n	800a3c4 <_strtod_l+0x2e4>
 800a3bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a3be:	4588      	cmp	r8, r1
 800a3c0:	bfa8      	it	ge
 800a3c2:	4688      	movge	r8, r1
 800a3c4:	f1bc 0f00 	cmp.w	ip, #0
 800a3c8:	d001      	beq.n	800a3ce <_strtod_l+0x2ee>
 800a3ca:	f1c8 0800 	rsb	r8, r8, #0
 800a3ce:	2d00      	cmp	r5, #0
 800a3d0:	d14e      	bne.n	800a470 <_strtod_l+0x390>
 800a3d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3d4:	4308      	orrs	r0, r1
 800a3d6:	f47f aebc 	bne.w	800a152 <_strtod_l+0x72>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f47f aed4 	bne.w	800a188 <_strtod_l+0xa8>
 800a3e0:	2a69      	cmp	r2, #105	@ 0x69
 800a3e2:	d028      	beq.n	800a436 <_strtod_l+0x356>
 800a3e4:	dc25      	bgt.n	800a432 <_strtod_l+0x352>
 800a3e6:	2a49      	cmp	r2, #73	@ 0x49
 800a3e8:	d025      	beq.n	800a436 <_strtod_l+0x356>
 800a3ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800a3ec:	f47f aecc 	bne.w	800a188 <_strtod_l+0xa8>
 800a3f0:	499b      	ldr	r1, [pc, #620]	@ (800a660 <_strtod_l+0x580>)
 800a3f2:	a819      	add	r0, sp, #100	@ 0x64
 800a3f4:	f001 f9e8 	bl	800b7c8 <__match>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	f43f aec5 	beq.w	800a188 <_strtod_l+0xa8>
 800a3fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b28      	cmp	r3, #40	@ 0x28
 800a404:	d12e      	bne.n	800a464 <_strtod_l+0x384>
 800a406:	aa1c      	add	r2, sp, #112	@ 0x70
 800a408:	4996      	ldr	r1, [pc, #600]	@ (800a664 <_strtod_l+0x584>)
 800a40a:	a819      	add	r0, sp, #100	@ 0x64
 800a40c:	f001 f9f0 	bl	800b7f0 <__hexnan>
 800a410:	2805      	cmp	r0, #5
 800a412:	d127      	bne.n	800a464 <_strtod_l+0x384>
 800a414:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a416:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a41a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a41e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a422:	e696      	b.n	800a152 <_strtod_l+0x72>
 800a424:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a426:	fb08 2101 	mla	r1, r8, r1, r2
 800a42a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a42e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a430:	e7b5      	b.n	800a39e <_strtod_l+0x2be>
 800a432:	2a6e      	cmp	r2, #110	@ 0x6e
 800a434:	e7da      	b.n	800a3ec <_strtod_l+0x30c>
 800a436:	498c      	ldr	r1, [pc, #560]	@ (800a668 <_strtod_l+0x588>)
 800a438:	a819      	add	r0, sp, #100	@ 0x64
 800a43a:	f001 f9c5 	bl	800b7c8 <__match>
 800a43e:	2800      	cmp	r0, #0
 800a440:	f43f aea2 	beq.w	800a188 <_strtod_l+0xa8>
 800a444:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a446:	a819      	add	r0, sp, #100	@ 0x64
 800a448:	4988      	ldr	r1, [pc, #544]	@ (800a66c <_strtod_l+0x58c>)
 800a44a:	3b01      	subs	r3, #1
 800a44c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a44e:	f001 f9bb 	bl	800b7c8 <__match>
 800a452:	b910      	cbnz	r0, 800a45a <_strtod_l+0x37a>
 800a454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a456:	3301      	adds	r3, #1
 800a458:	9319      	str	r3, [sp, #100]	@ 0x64
 800a45a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a67c <_strtod_l+0x59c>
 800a45e:	f04f 0a00 	mov.w	sl, #0
 800a462:	e676      	b.n	800a152 <_strtod_l+0x72>
 800a464:	4882      	ldr	r0, [pc, #520]	@ (800a670 <_strtod_l+0x590>)
 800a466:	f000 feef 	bl	800b248 <nan>
 800a46a:	ec5b ab10 	vmov	sl, fp, d0
 800a46e:	e670      	b.n	800a152 <_strtod_l+0x72>
 800a470:	eba8 0309 	sub.w	r3, r8, r9
 800a474:	2f00      	cmp	r7, #0
 800a476:	bf08      	it	eq
 800a478:	462f      	moveq	r7, r5
 800a47a:	2d10      	cmp	r5, #16
 800a47c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a47e:	462c      	mov	r4, r5
 800a480:	9309      	str	r3, [sp, #36]	@ 0x24
 800a482:	bfa8      	it	ge
 800a484:	2410      	movge	r4, #16
 800a486:	f7f6 f841 	bl	800050c <__aeabi_ui2d>
 800a48a:	2d09      	cmp	r5, #9
 800a48c:	4682      	mov	sl, r0
 800a48e:	468b      	mov	fp, r1
 800a490:	dc13      	bgt.n	800a4ba <_strtod_l+0x3da>
 800a492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a494:	2b00      	cmp	r3, #0
 800a496:	f43f ae5c 	beq.w	800a152 <_strtod_l+0x72>
 800a49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a49c:	dd78      	ble.n	800a590 <_strtod_l+0x4b0>
 800a49e:	2b16      	cmp	r3, #22
 800a4a0:	dc5f      	bgt.n	800a562 <_strtod_l+0x482>
 800a4a2:	4974      	ldr	r1, [pc, #464]	@ (800a674 <_strtod_l+0x594>)
 800a4a4:	4652      	mov	r2, sl
 800a4a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4aa:	465b      	mov	r3, fp
 800a4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4b0:	f7f6 f8a6 	bl	8000600 <__aeabi_dmul>
 800a4b4:	4682      	mov	sl, r0
 800a4b6:	468b      	mov	fp, r1
 800a4b8:	e64b      	b.n	800a152 <_strtod_l+0x72>
 800a4ba:	4b6e      	ldr	r3, [pc, #440]	@ (800a674 <_strtod_l+0x594>)
 800a4bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a4c4:	f7f6 f89c 	bl	8000600 <__aeabi_dmul>
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	468b      	mov	fp, r1
 800a4cc:	9808      	ldr	r0, [sp, #32]
 800a4ce:	f7f6 f81d 	bl	800050c <__aeabi_ui2d>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4650      	mov	r0, sl
 800a4d8:	4659      	mov	r1, fp
 800a4da:	f7f5 fedb 	bl	8000294 <__adddf3>
 800a4de:	2d0f      	cmp	r5, #15
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	468b      	mov	fp, r1
 800a4e4:	ddd5      	ble.n	800a492 <_strtod_l+0x3b2>
 800a4e6:	1b2c      	subs	r4, r5, r4
 800a4e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ea:	441c      	add	r4, r3
 800a4ec:	2c00      	cmp	r4, #0
 800a4ee:	f340 8096 	ble.w	800a61e <_strtod_l+0x53e>
 800a4f2:	f014 030f 	ands.w	r3, r4, #15
 800a4f6:	d00a      	beq.n	800a50e <_strtod_l+0x42e>
 800a4f8:	495e      	ldr	r1, [pc, #376]	@ (800a674 <_strtod_l+0x594>)
 800a4fa:	4652      	mov	r2, sl
 800a4fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a500:	465b      	mov	r3, fp
 800a502:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a506:	f7f6 f87b 	bl	8000600 <__aeabi_dmul>
 800a50a:	4682      	mov	sl, r0
 800a50c:	468b      	mov	fp, r1
 800a50e:	f034 040f 	bics.w	r4, r4, #15
 800a512:	d073      	beq.n	800a5fc <_strtod_l+0x51c>
 800a514:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a518:	dd48      	ble.n	800a5ac <_strtod_l+0x4cc>
 800a51a:	2400      	movs	r4, #0
 800a51c:	46a0      	mov	r8, r4
 800a51e:	46a1      	mov	r9, r4
 800a520:	940a      	str	r4, [sp, #40]	@ 0x28
 800a522:	2322      	movs	r3, #34	@ 0x22
 800a524:	9a05      	ldr	r2, [sp, #20]
 800a526:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a67c <_strtod_l+0x59c>
 800a52a:	f04f 0a00 	mov.w	sl, #0
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a532:	2b00      	cmp	r3, #0
 800a534:	f43f ae0d 	beq.w	800a152 <_strtod_l+0x72>
 800a538:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a53a:	9805      	ldr	r0, [sp, #20]
 800a53c:	f7ff f934 	bl	80097a8 <_Bfree>
 800a540:	4649      	mov	r1, r9
 800a542:	9805      	ldr	r0, [sp, #20]
 800a544:	f7ff f930 	bl	80097a8 <_Bfree>
 800a548:	4641      	mov	r1, r8
 800a54a:	9805      	ldr	r0, [sp, #20]
 800a54c:	f7ff f92c 	bl	80097a8 <_Bfree>
 800a550:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a552:	9805      	ldr	r0, [sp, #20]
 800a554:	f7ff f928 	bl	80097a8 <_Bfree>
 800a558:	4621      	mov	r1, r4
 800a55a:	9805      	ldr	r0, [sp, #20]
 800a55c:	f7ff f924 	bl	80097a8 <_Bfree>
 800a560:	e5f7      	b.n	800a152 <_strtod_l+0x72>
 800a562:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a568:	4293      	cmp	r3, r2
 800a56a:	dbbc      	blt.n	800a4e6 <_strtod_l+0x406>
 800a56c:	f1c5 050f 	rsb	r5, r5, #15
 800a570:	4c40      	ldr	r4, [pc, #256]	@ (800a674 <_strtod_l+0x594>)
 800a572:	4652      	mov	r2, sl
 800a574:	465b      	mov	r3, fp
 800a576:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a57a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a57e:	f7f6 f83f 	bl	8000600 <__aeabi_dmul>
 800a582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a584:	1b5d      	subs	r5, r3, r5
 800a586:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a58a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a58e:	e78f      	b.n	800a4b0 <_strtod_l+0x3d0>
 800a590:	3316      	adds	r3, #22
 800a592:	dba8      	blt.n	800a4e6 <_strtod_l+0x406>
 800a594:	eba9 0808 	sub.w	r8, r9, r8
 800a598:	4b36      	ldr	r3, [pc, #216]	@ (800a674 <_strtod_l+0x594>)
 800a59a:	4650      	mov	r0, sl
 800a59c:	4659      	mov	r1, fp
 800a59e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a5a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a5a6:	f7f6 f955 	bl	8000854 <__aeabi_ddiv>
 800a5aa:	e783      	b.n	800a4b4 <_strtod_l+0x3d4>
 800a5ac:	4b32      	ldr	r3, [pc, #200]	@ (800a678 <_strtod_l+0x598>)
 800a5ae:	1124      	asrs	r4, r4, #4
 800a5b0:	4650      	mov	r0, sl
 800a5b2:	4659      	mov	r1, fp
 800a5b4:	9308      	str	r3, [sp, #32]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	461e      	mov	r6, r3
 800a5ba:	2c01      	cmp	r4, #1
 800a5bc:	dc21      	bgt.n	800a602 <_strtod_l+0x522>
 800a5be:	b10b      	cbz	r3, 800a5c4 <_strtod_l+0x4e4>
 800a5c0:	4682      	mov	sl, r0
 800a5c2:	468b      	mov	fp, r1
 800a5c4:	492c      	ldr	r1, [pc, #176]	@ (800a678 <_strtod_l+0x598>)
 800a5c6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a5ca:	4652      	mov	r2, sl
 800a5cc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a5d0:	465b      	mov	r3, fp
 800a5d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5d6:	f7f6 f813 	bl	8000600 <__aeabi_dmul>
 800a5da:	4b28      	ldr	r3, [pc, #160]	@ (800a67c <_strtod_l+0x59c>)
 800a5dc:	460a      	mov	r2, r1
 800a5de:	4682      	mov	sl, r0
 800a5e0:	400b      	ands	r3, r1
 800a5e2:	4927      	ldr	r1, [pc, #156]	@ (800a680 <_strtod_l+0x5a0>)
 800a5e4:	428b      	cmp	r3, r1
 800a5e6:	d898      	bhi.n	800a51a <_strtod_l+0x43a>
 800a5e8:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a5ec:	428b      	cmp	r3, r1
 800a5ee:	bf86      	itte	hi
 800a5f0:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a684 <_strtod_l+0x5a4>
 800a5f4:	f04f 3aff 	movhi.w	sl, #4294967295
 800a5f8:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9308      	str	r3, [sp, #32]
 800a600:	e07a      	b.n	800a6f8 <_strtod_l+0x618>
 800a602:	07e2      	lsls	r2, r4, #31
 800a604:	d505      	bpl.n	800a612 <_strtod_l+0x532>
 800a606:	9b08      	ldr	r3, [sp, #32]
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f7f5 fff8 	bl	8000600 <__aeabi_dmul>
 800a610:	2301      	movs	r3, #1
 800a612:	9a08      	ldr	r2, [sp, #32]
 800a614:	3601      	adds	r6, #1
 800a616:	1064      	asrs	r4, r4, #1
 800a618:	3208      	adds	r2, #8
 800a61a:	9208      	str	r2, [sp, #32]
 800a61c:	e7cd      	b.n	800a5ba <_strtod_l+0x4da>
 800a61e:	d0ed      	beq.n	800a5fc <_strtod_l+0x51c>
 800a620:	4264      	negs	r4, r4
 800a622:	f014 020f 	ands.w	r2, r4, #15
 800a626:	d00a      	beq.n	800a63e <_strtod_l+0x55e>
 800a628:	4b12      	ldr	r3, [pc, #72]	@ (800a674 <_strtod_l+0x594>)
 800a62a:	4650      	mov	r0, sl
 800a62c:	4659      	mov	r1, fp
 800a62e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	f7f6 f90d 	bl	8000854 <__aeabi_ddiv>
 800a63a:	4682      	mov	sl, r0
 800a63c:	468b      	mov	fp, r1
 800a63e:	1124      	asrs	r4, r4, #4
 800a640:	d0dc      	beq.n	800a5fc <_strtod_l+0x51c>
 800a642:	2c1f      	cmp	r4, #31
 800a644:	dd20      	ble.n	800a688 <_strtod_l+0x5a8>
 800a646:	2400      	movs	r4, #0
 800a648:	46a0      	mov	r8, r4
 800a64a:	46a1      	mov	r9, r4
 800a64c:	940a      	str	r4, [sp, #40]	@ 0x28
 800a64e:	2322      	movs	r3, #34	@ 0x22
 800a650:	9a05      	ldr	r2, [sp, #20]
 800a652:	f04f 0a00 	mov.w	sl, #0
 800a656:	f04f 0b00 	mov.w	fp, #0
 800a65a:	6013      	str	r3, [r2, #0]
 800a65c:	e768      	b.n	800a530 <_strtod_l+0x450>
 800a65e:	bf00      	nop
 800a660:	0800c081 	.word	0x0800c081
 800a664:	0800c294 	.word	0x0800c294
 800a668:	0800c079 	.word	0x0800c079
 800a66c:	0800c0b0 	.word	0x0800c0b0
 800a670:	0800c43d 	.word	0x0800c43d
 800a674:	0800c1c8 	.word	0x0800c1c8
 800a678:	0800c1a0 	.word	0x0800c1a0
 800a67c:	7ff00000 	.word	0x7ff00000
 800a680:	7ca00000 	.word	0x7ca00000
 800a684:	7fefffff 	.word	0x7fefffff
 800a688:	f014 0310 	ands.w	r3, r4, #16
 800a68c:	4650      	mov	r0, sl
 800a68e:	4659      	mov	r1, fp
 800a690:	4ea9      	ldr	r6, [pc, #676]	@ (800a938 <_strtod_l+0x858>)
 800a692:	bf18      	it	ne
 800a694:	236a      	movne	r3, #106	@ 0x6a
 800a696:	9308      	str	r3, [sp, #32]
 800a698:	2300      	movs	r3, #0
 800a69a:	07e2      	lsls	r2, r4, #31
 800a69c:	d504      	bpl.n	800a6a8 <_strtod_l+0x5c8>
 800a69e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6a2:	f7f5 ffad 	bl	8000600 <__aeabi_dmul>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	1064      	asrs	r4, r4, #1
 800a6aa:	f106 0608 	add.w	r6, r6, #8
 800a6ae:	d1f4      	bne.n	800a69a <_strtod_l+0x5ba>
 800a6b0:	b10b      	cbz	r3, 800a6b6 <_strtod_l+0x5d6>
 800a6b2:	4682      	mov	sl, r0
 800a6b4:	468b      	mov	fp, r1
 800a6b6:	9b08      	ldr	r3, [sp, #32]
 800a6b8:	b1b3      	cbz	r3, 800a6e8 <_strtod_l+0x608>
 800a6ba:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a6be:	4659      	mov	r1, fp
 800a6c0:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dd0f      	ble.n	800a6e8 <_strtod_l+0x608>
 800a6c8:	2b1f      	cmp	r3, #31
 800a6ca:	dd55      	ble.n	800a778 <_strtod_l+0x698>
 800a6cc:	2b34      	cmp	r3, #52	@ 0x34
 800a6ce:	f04f 0a00 	mov.w	sl, #0
 800a6d2:	bfdb      	ittet	le
 800a6d4:	f04f 33ff 	movle.w	r3, #4294967295
 800a6d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a6dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a6e0:	4093      	lslle	r3, r2
 800a6e2:	bfd8      	it	le
 800a6e4:	ea03 0b01 	andle.w	fp, r3, r1
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	4650      	mov	r0, sl
 800a6ee:	4659      	mov	r1, fp
 800a6f0:	f7f6 f9ee 	bl	8000ad0 <__aeabi_dcmpeq>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d1a6      	bne.n	800a646 <_strtod_l+0x566>
 800a6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6fa:	463a      	mov	r2, r7
 800a6fc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	462b      	mov	r3, r5
 800a702:	9805      	ldr	r0, [sp, #20]
 800a704:	f7ff f8ba 	bl	800987c <__s2b>
 800a708:	900a      	str	r0, [sp, #40]	@ 0x28
 800a70a:	2800      	cmp	r0, #0
 800a70c:	f43f af05 	beq.w	800a51a <_strtod_l+0x43a>
 800a710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a712:	eba9 0308 	sub.w	r3, r9, r8
 800a716:	2400      	movs	r4, #0
 800a718:	2a00      	cmp	r2, #0
 800a71a:	46a0      	mov	r8, r4
 800a71c:	bfa8      	it	ge
 800a71e:	2300      	movge	r3, #0
 800a720:	9312      	str	r3, [sp, #72]	@ 0x48
 800a722:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a726:	9316      	str	r3, [sp, #88]	@ 0x58
 800a728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a72a:	9805      	ldr	r0, [sp, #20]
 800a72c:	6859      	ldr	r1, [r3, #4]
 800a72e:	f7fe fffb 	bl	8009728 <_Balloc>
 800a732:	4681      	mov	r9, r0
 800a734:	2800      	cmp	r0, #0
 800a736:	f43f aef4 	beq.w	800a522 <_strtod_l+0x442>
 800a73a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a73c:	300c      	adds	r0, #12
 800a73e:	691a      	ldr	r2, [r3, #16]
 800a740:	f103 010c 	add.w	r1, r3, #12
 800a744:	3202      	adds	r2, #2
 800a746:	0092      	lsls	r2, r2, #2
 800a748:	f000 fd70 	bl	800b22c <memcpy>
 800a74c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a74e:	a91b      	add	r1, sp, #108	@ 0x6c
 800a750:	9805      	ldr	r0, [sp, #20]
 800a752:	ec4b ab10 	vmov	d0, sl, fp
 800a756:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a75a:	f7ff fbd3 	bl	8009f04 <__d2b>
 800a75e:	901a      	str	r0, [sp, #104]	@ 0x68
 800a760:	2800      	cmp	r0, #0
 800a762:	f43f aede 	beq.w	800a522 <_strtod_l+0x442>
 800a766:	2101      	movs	r1, #1
 800a768:	9805      	ldr	r0, [sp, #20]
 800a76a:	f7ff f91d 	bl	80099a8 <__i2b>
 800a76e:	4680      	mov	r8, r0
 800a770:	b948      	cbnz	r0, 800a786 <_strtod_l+0x6a6>
 800a772:	f04f 0800 	mov.w	r8, #0
 800a776:	e6d4      	b.n	800a522 <_strtod_l+0x442>
 800a778:	f04f 32ff 	mov.w	r2, #4294967295
 800a77c:	fa02 f303 	lsl.w	r3, r2, r3
 800a780:	ea03 0a0a 	and.w	sl, r3, sl
 800a784:	e7b0      	b.n	800a6e8 <_strtod_l+0x608>
 800a786:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a788:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a78a:	2d00      	cmp	r5, #0
 800a78c:	bfa9      	itett	ge
 800a78e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a790:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a792:	18ef      	addge	r7, r5, r3
 800a794:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a796:	bfb8      	it	lt
 800a798:	1b5e      	sublt	r6, r3, r5
 800a79a:	9b08      	ldr	r3, [sp, #32]
 800a79c:	bfb8      	it	lt
 800a79e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a7a0:	1aed      	subs	r5, r5, r3
 800a7a2:	4b66      	ldr	r3, [pc, #408]	@ (800a93c <_strtod_l+0x85c>)
 800a7a4:	4415      	add	r5, r2
 800a7a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a7aa:	3d01      	subs	r5, #1
 800a7ac:	429d      	cmp	r5, r3
 800a7ae:	da4f      	bge.n	800a850 <_strtod_l+0x770>
 800a7b0:	1b5b      	subs	r3, r3, r5
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	2b1f      	cmp	r3, #31
 800a7b6:	eba2 0203 	sub.w	r2, r2, r3
 800a7ba:	dc3d      	bgt.n	800a838 <_strtod_l+0x758>
 800a7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7c6:	18bd      	adds	r5, r7, r2
 800a7c8:	9b08      	ldr	r3, [sp, #32]
 800a7ca:	4416      	add	r6, r2
 800a7cc:	42af      	cmp	r7, r5
 800a7ce:	441e      	add	r6, r3
 800a7d0:	463b      	mov	r3, r7
 800a7d2:	bfa8      	it	ge
 800a7d4:	462b      	movge	r3, r5
 800a7d6:	42b3      	cmp	r3, r6
 800a7d8:	bfa8      	it	ge
 800a7da:	4633      	movge	r3, r6
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	bfc2      	ittt	gt
 800a7e0:	1aed      	subgt	r5, r5, r3
 800a7e2:	1af6      	subgt	r6, r6, r3
 800a7e4:	1aff      	subgt	r7, r7, r3
 800a7e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dd16      	ble.n	800a81a <_strtod_l+0x73a>
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	9805      	ldr	r0, [sp, #20]
 800a7f2:	f7ff f999 	bl	8009b28 <__pow5mult>
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d0ba      	beq.n	800a772 <_strtod_l+0x692>
 800a7fc:	4601      	mov	r1, r0
 800a7fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a800:	9805      	ldr	r0, [sp, #20]
 800a802:	f7ff f8e7 	bl	80099d4 <__multiply>
 800a806:	900e      	str	r0, [sp, #56]	@ 0x38
 800a808:	2800      	cmp	r0, #0
 800a80a:	f43f ae8a 	beq.w	800a522 <_strtod_l+0x442>
 800a80e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a810:	9805      	ldr	r0, [sp, #20]
 800a812:	f7fe ffc9 	bl	80097a8 <_Bfree>
 800a816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a818:	931a      	str	r3, [sp, #104]	@ 0x68
 800a81a:	2d00      	cmp	r5, #0
 800a81c:	dc1d      	bgt.n	800a85a <_strtod_l+0x77a>
 800a81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a820:	2b00      	cmp	r3, #0
 800a822:	dd23      	ble.n	800a86c <_strtod_l+0x78c>
 800a824:	4649      	mov	r1, r9
 800a826:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a828:	9805      	ldr	r0, [sp, #20]
 800a82a:	f7ff f97d 	bl	8009b28 <__pow5mult>
 800a82e:	4681      	mov	r9, r0
 800a830:	b9e0      	cbnz	r0, 800a86c <_strtod_l+0x78c>
 800a832:	f04f 0900 	mov.w	r9, #0
 800a836:	e674      	b.n	800a522 <_strtod_l+0x442>
 800a838:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a83c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a83e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a842:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a846:	35e2      	adds	r5, #226	@ 0xe2
 800a848:	fa01 f305 	lsl.w	r3, r1, r5
 800a84c:	9310      	str	r3, [sp, #64]	@ 0x40
 800a84e:	e7ba      	b.n	800a7c6 <_strtod_l+0x6e6>
 800a850:	2300      	movs	r3, #0
 800a852:	9310      	str	r3, [sp, #64]	@ 0x40
 800a854:	2301      	movs	r3, #1
 800a856:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a858:	e7b5      	b.n	800a7c6 <_strtod_l+0x6e6>
 800a85a:	462a      	mov	r2, r5
 800a85c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a85e:	9805      	ldr	r0, [sp, #20]
 800a860:	f7ff f9bc 	bl	8009bdc <__lshift>
 800a864:	901a      	str	r0, [sp, #104]	@ 0x68
 800a866:	2800      	cmp	r0, #0
 800a868:	d1d9      	bne.n	800a81e <_strtod_l+0x73e>
 800a86a:	e65a      	b.n	800a522 <_strtod_l+0x442>
 800a86c:	2e00      	cmp	r6, #0
 800a86e:	dd07      	ble.n	800a880 <_strtod_l+0x7a0>
 800a870:	4649      	mov	r1, r9
 800a872:	4632      	mov	r2, r6
 800a874:	9805      	ldr	r0, [sp, #20]
 800a876:	f7ff f9b1 	bl	8009bdc <__lshift>
 800a87a:	4681      	mov	r9, r0
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d0d8      	beq.n	800a832 <_strtod_l+0x752>
 800a880:	2f00      	cmp	r7, #0
 800a882:	dd08      	ble.n	800a896 <_strtod_l+0x7b6>
 800a884:	4641      	mov	r1, r8
 800a886:	463a      	mov	r2, r7
 800a888:	9805      	ldr	r0, [sp, #20]
 800a88a:	f7ff f9a7 	bl	8009bdc <__lshift>
 800a88e:	4680      	mov	r8, r0
 800a890:	2800      	cmp	r0, #0
 800a892:	f43f ae46 	beq.w	800a522 <_strtod_l+0x442>
 800a896:	464a      	mov	r2, r9
 800a898:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a89a:	9805      	ldr	r0, [sp, #20]
 800a89c:	f7ff fa26 	bl	8009cec <__mdiff>
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	f43f ae3d 	beq.w	800a522 <_strtod_l+0x442>
 800a8a8:	68c3      	ldr	r3, [r0, #12]
 800a8aa:	4641      	mov	r1, r8
 800a8ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60c3      	str	r3, [r0, #12]
 800a8b2:	f7ff f9ff 	bl	8009cb4 <__mcmp>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	da46      	bge.n	800a948 <_strtod_l+0x868>
 800a8ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8bc:	ea53 030a 	orrs.w	r3, r3, sl
 800a8c0:	d16c      	bne.n	800a99c <_strtod_l+0x8bc>
 800a8c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d168      	bne.n	800a99c <_strtod_l+0x8bc>
 800a8ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8ce:	0d1b      	lsrs	r3, r3, #20
 800a8d0:	051b      	lsls	r3, r3, #20
 800a8d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8d6:	d961      	bls.n	800a99c <_strtod_l+0x8bc>
 800a8d8:	6963      	ldr	r3, [r4, #20]
 800a8da:	b913      	cbnz	r3, 800a8e2 <_strtod_l+0x802>
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	dd5c      	ble.n	800a99c <_strtod_l+0x8bc>
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	9805      	ldr	r0, [sp, #20]
 800a8e8:	f7ff f978 	bl	8009bdc <__lshift>
 800a8ec:	4641      	mov	r1, r8
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	f7ff f9e0 	bl	8009cb4 <__mcmp>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	dd51      	ble.n	800a99c <_strtod_l+0x8bc>
 800a8f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8fc:	9a08      	ldr	r2, [sp, #32]
 800a8fe:	0d1b      	lsrs	r3, r3, #20
 800a900:	051b      	lsls	r3, r3, #20
 800a902:	2a00      	cmp	r2, #0
 800a904:	d06b      	beq.n	800a9de <_strtod_l+0x8fe>
 800a906:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a90a:	d868      	bhi.n	800a9de <_strtod_l+0x8fe>
 800a90c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a910:	f67f ae9d 	bls.w	800a64e <_strtod_l+0x56e>
 800a914:	4b0a      	ldr	r3, [pc, #40]	@ (800a940 <_strtod_l+0x860>)
 800a916:	4650      	mov	r0, sl
 800a918:	4659      	mov	r1, fp
 800a91a:	2200      	movs	r2, #0
 800a91c:	f7f5 fe70 	bl	8000600 <__aeabi_dmul>
 800a920:	4b08      	ldr	r3, [pc, #32]	@ (800a944 <_strtod_l+0x864>)
 800a922:	4682      	mov	sl, r0
 800a924:	468b      	mov	fp, r1
 800a926:	400b      	ands	r3, r1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f47f ae05 	bne.w	800a538 <_strtod_l+0x458>
 800a92e:	2322      	movs	r3, #34	@ 0x22
 800a930:	9a05      	ldr	r2, [sp, #20]
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	e600      	b.n	800a538 <_strtod_l+0x458>
 800a936:	bf00      	nop
 800a938:	0800c2c0 	.word	0x0800c2c0
 800a93c:	fffffc02 	.word	0xfffffc02
 800a940:	39500000 	.word	0x39500000
 800a944:	7ff00000 	.word	0x7ff00000
 800a948:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a94c:	d165      	bne.n	800aa1a <_strtod_l+0x93a>
 800a94e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a950:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a954:	b35a      	cbz	r2, 800a9ae <_strtod_l+0x8ce>
 800a956:	4a9e      	ldr	r2, [pc, #632]	@ (800abd0 <_strtod_l+0xaf0>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d12b      	bne.n	800a9b4 <_strtod_l+0x8d4>
 800a95c:	9b08      	ldr	r3, [sp, #32]
 800a95e:	4651      	mov	r1, sl
 800a960:	b303      	cbz	r3, 800a9a4 <_strtod_l+0x8c4>
 800a962:	465a      	mov	r2, fp
 800a964:	4b9b      	ldr	r3, [pc, #620]	@ (800abd4 <_strtod_l+0xaf4>)
 800a966:	4013      	ands	r3, r2
 800a968:	f04f 32ff 	mov.w	r2, #4294967295
 800a96c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a970:	d81b      	bhi.n	800a9aa <_strtod_l+0x8ca>
 800a972:	0d1b      	lsrs	r3, r3, #20
 800a974:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a978:	fa02 f303 	lsl.w	r3, r2, r3
 800a97c:	4299      	cmp	r1, r3
 800a97e:	d119      	bne.n	800a9b4 <_strtod_l+0x8d4>
 800a980:	4b95      	ldr	r3, [pc, #596]	@ (800abd8 <_strtod_l+0xaf8>)
 800a982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a984:	429a      	cmp	r2, r3
 800a986:	d102      	bne.n	800a98e <_strtod_l+0x8ae>
 800a988:	3101      	adds	r1, #1
 800a98a:	f43f adca 	beq.w	800a522 <_strtod_l+0x442>
 800a98e:	4b91      	ldr	r3, [pc, #580]	@ (800abd4 <_strtod_l+0xaf4>)
 800a990:	f04f 0a00 	mov.w	sl, #0
 800a994:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a996:	401a      	ands	r2, r3
 800a998:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a99c:	9b08      	ldr	r3, [sp, #32]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1b8      	bne.n	800a914 <_strtod_l+0x834>
 800a9a2:	e5c9      	b.n	800a538 <_strtod_l+0x458>
 800a9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a8:	e7e8      	b.n	800a97c <_strtod_l+0x89c>
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	e7e6      	b.n	800a97c <_strtod_l+0x89c>
 800a9ae:	ea53 030a 	orrs.w	r3, r3, sl
 800a9b2:	d0a1      	beq.n	800a8f8 <_strtod_l+0x818>
 800a9b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a9b6:	b1db      	cbz	r3, 800a9f0 <_strtod_l+0x910>
 800a9b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9ba:	4213      	tst	r3, r2
 800a9bc:	d0ee      	beq.n	800a99c <_strtod_l+0x8bc>
 800a9be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	9a08      	ldr	r2, [sp, #32]
 800a9c4:	4659      	mov	r1, fp
 800a9c6:	b1bb      	cbz	r3, 800a9f8 <_strtod_l+0x918>
 800a9c8:	f7ff fb6a 	bl	800a0a0 <sulp>
 800a9cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9d0:	ec53 2b10 	vmov	r2, r3, d0
 800a9d4:	f7f5 fc5e 	bl	8000294 <__adddf3>
 800a9d8:	4682      	mov	sl, r0
 800a9da:	468b      	mov	fp, r1
 800a9dc:	e7de      	b.n	800a99c <_strtod_l+0x8bc>
 800a9de:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a9e2:	f04f 3aff 	mov.w	sl, #4294967295
 800a9e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a9ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a9ee:	e7d5      	b.n	800a99c <_strtod_l+0x8bc>
 800a9f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a9f2:	ea13 0f0a 	tst.w	r3, sl
 800a9f6:	e7e1      	b.n	800a9bc <_strtod_l+0x8dc>
 800a9f8:	f7ff fb52 	bl	800a0a0 <sulp>
 800a9fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa00:	ec53 2b10 	vmov	r2, r3, d0
 800aa04:	f7f5 fc44 	bl	8000290 <__aeabi_dsub>
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	4682      	mov	sl, r0
 800aa0e:	468b      	mov	fp, r1
 800aa10:	f7f6 f85e 	bl	8000ad0 <__aeabi_dcmpeq>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d0c1      	beq.n	800a99c <_strtod_l+0x8bc>
 800aa18:	e619      	b.n	800a64e <_strtod_l+0x56e>
 800aa1a:	4641      	mov	r1, r8
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7ff fac9 	bl	8009fb4 <__ratio>
 800aa22:	2200      	movs	r2, #0
 800aa24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa28:	ec57 6b10 	vmov	r6, r7, d0
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	4639      	mov	r1, r7
 800aa30:	f7f6 f862 	bl	8000af8 <__aeabi_dcmple>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d06f      	beq.n	800ab18 <_strtod_l+0xa38>
 800aa38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d17a      	bne.n	800ab34 <_strtod_l+0xa54>
 800aa3e:	f1ba 0f00 	cmp.w	sl, #0
 800aa42:	d158      	bne.n	800aaf6 <_strtod_l+0xa16>
 800aa44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d15a      	bne.n	800ab04 <_strtod_l+0xa24>
 800aa4e:	2200      	movs	r2, #0
 800aa50:	4b62      	ldr	r3, [pc, #392]	@ (800abdc <_strtod_l+0xafc>)
 800aa52:	4630      	mov	r0, r6
 800aa54:	4639      	mov	r1, r7
 800aa56:	f7f6 f845 	bl	8000ae4 <__aeabi_dcmplt>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d159      	bne.n	800ab12 <_strtod_l+0xa32>
 800aa5e:	4630      	mov	r0, r6
 800aa60:	4639      	mov	r1, r7
 800aa62:	2200      	movs	r2, #0
 800aa64:	4b5e      	ldr	r3, [pc, #376]	@ (800abe0 <_strtod_l+0xb00>)
 800aa66:	f7f5 fdcb 	bl	8000600 <__aeabi_dmul>
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aa72:	9606      	str	r6, [sp, #24]
 800aa74:	9307      	str	r3, [sp, #28]
 800aa76:	4d57      	ldr	r5, [pc, #348]	@ (800abd4 <_strtod_l+0xaf4>)
 800aa78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa82:	401d      	ands	r5, r3
 800aa84:	4b57      	ldr	r3, [pc, #348]	@ (800abe4 <_strtod_l+0xb04>)
 800aa86:	429d      	cmp	r5, r3
 800aa88:	f040 80b0 	bne.w	800abec <_strtod_l+0xb0c>
 800aa8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa8e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aa92:	ec4b ab10 	vmov	d0, sl, fp
 800aa96:	f7ff f9c1 	bl	8009e1c <__ulp>
 800aa9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa9e:	ec51 0b10 	vmov	r0, r1, d0
 800aaa2:	f7f5 fdad 	bl	8000600 <__aeabi_dmul>
 800aaa6:	4652      	mov	r2, sl
 800aaa8:	465b      	mov	r3, fp
 800aaaa:	f7f5 fbf3 	bl	8000294 <__adddf3>
 800aaae:	460b      	mov	r3, r1
 800aab0:	4948      	ldr	r1, [pc, #288]	@ (800abd4 <_strtod_l+0xaf4>)
 800aab2:	4682      	mov	sl, r0
 800aab4:	4a4c      	ldr	r2, [pc, #304]	@ (800abe8 <_strtod_l+0xb08>)
 800aab6:	4019      	ands	r1, r3
 800aab8:	4291      	cmp	r1, r2
 800aaba:	d942      	bls.n	800ab42 <_strtod_l+0xa62>
 800aabc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aabe:	4b46      	ldr	r3, [pc, #280]	@ (800abd8 <_strtod_l+0xaf8>)
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d103      	bne.n	800aacc <_strtod_l+0x9ec>
 800aac4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aac6:	3301      	adds	r3, #1
 800aac8:	f43f ad2b 	beq.w	800a522 <_strtod_l+0x442>
 800aacc:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800abd8 <_strtod_l+0xaf8>
 800aad0:	f04f 3aff 	mov.w	sl, #4294967295
 800aad4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aad6:	9805      	ldr	r0, [sp, #20]
 800aad8:	f7fe fe66 	bl	80097a8 <_Bfree>
 800aadc:	4649      	mov	r1, r9
 800aade:	9805      	ldr	r0, [sp, #20]
 800aae0:	f7fe fe62 	bl	80097a8 <_Bfree>
 800aae4:	4641      	mov	r1, r8
 800aae6:	9805      	ldr	r0, [sp, #20]
 800aae8:	f7fe fe5e 	bl	80097a8 <_Bfree>
 800aaec:	4621      	mov	r1, r4
 800aaee:	9805      	ldr	r0, [sp, #20]
 800aaf0:	f7fe fe5a 	bl	80097a8 <_Bfree>
 800aaf4:	e618      	b.n	800a728 <_strtod_l+0x648>
 800aaf6:	f1ba 0f01 	cmp.w	sl, #1
 800aafa:	d103      	bne.n	800ab04 <_strtod_l+0xa24>
 800aafc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f43f ada5 	beq.w	800a64e <_strtod_l+0x56e>
 800ab04:	2600      	movs	r6, #0
 800ab06:	4f35      	ldr	r7, [pc, #212]	@ (800abdc <_strtod_l+0xafc>)
 800ab08:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800abb0 <_strtod_l+0xad0>
 800ab0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab10:	e7b1      	b.n	800aa76 <_strtod_l+0x996>
 800ab12:	2600      	movs	r6, #0
 800ab14:	4f32      	ldr	r7, [pc, #200]	@ (800abe0 <_strtod_l+0xb00>)
 800ab16:	e7aa      	b.n	800aa6e <_strtod_l+0x98e>
 800ab18:	4b31      	ldr	r3, [pc, #196]	@ (800abe0 <_strtod_l+0xb00>)
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f7f5 fd6e 	bl	8000600 <__aeabi_dmul>
 800ab24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab26:	4606      	mov	r6, r0
 800ab28:	460f      	mov	r7, r1
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d09f      	beq.n	800aa6e <_strtod_l+0x98e>
 800ab2e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab32:	e7a0      	b.n	800aa76 <_strtod_l+0x996>
 800ab34:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800abb8 <_strtod_l+0xad8>
 800ab38:	ec57 6b17 	vmov	r6, r7, d7
 800ab3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab40:	e799      	b.n	800aa76 <_strtod_l+0x996>
 800ab42:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ab46:	9b08      	ldr	r3, [sp, #32]
 800ab48:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1c1      	bne.n	800aad4 <_strtod_l+0x9f4>
 800ab50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab54:	0d1b      	lsrs	r3, r3, #20
 800ab56:	051b      	lsls	r3, r3, #20
 800ab58:	429d      	cmp	r5, r3
 800ab5a:	d1bb      	bne.n	800aad4 <_strtod_l+0x9f4>
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	4639      	mov	r1, r7
 800ab60:	f7f6 f8ae 	bl	8000cc0 <__aeabi_d2lz>
 800ab64:	f7f5 fd1e 	bl	80005a4 <__aeabi_l2d>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ab74:	f7f5 fb8c 	bl	8000290 <__aeabi_dsub>
 800ab78:	460b      	mov	r3, r1
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	ea46 060a 	orr.w	r6, r6, sl
 800ab80:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab86:	431e      	orrs	r6, r3
 800ab88:	d06d      	beq.n	800ac66 <_strtod_l+0xb86>
 800ab8a:	a30d      	add	r3, pc, #52	@ (adr r3, 800abc0 <_strtod_l+0xae0>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f7f5 ffa8 	bl	8000ae4 <__aeabi_dcmplt>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	f47f accf 	bne.w	800a538 <_strtod_l+0x458>
 800ab9a:	a30b      	add	r3, pc, #44	@ (adr r3, 800abc8 <_strtod_l+0xae8>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aba4:	f7f5 ffbc 	bl	8000b20 <__aeabi_dcmpgt>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d093      	beq.n	800aad4 <_strtod_l+0x9f4>
 800abac:	e4c4      	b.n	800a538 <_strtod_l+0x458>
 800abae:	bf00      	nop
 800abb0:	00000000 	.word	0x00000000
 800abb4:	bff00000 	.word	0xbff00000
 800abb8:	00000000 	.word	0x00000000
 800abbc:	3ff00000 	.word	0x3ff00000
 800abc0:	94a03595 	.word	0x94a03595
 800abc4:	3fdfffff 	.word	0x3fdfffff
 800abc8:	35afe535 	.word	0x35afe535
 800abcc:	3fe00000 	.word	0x3fe00000
 800abd0:	000fffff 	.word	0x000fffff
 800abd4:	7ff00000 	.word	0x7ff00000
 800abd8:	7fefffff 	.word	0x7fefffff
 800abdc:	3ff00000 	.word	0x3ff00000
 800abe0:	3fe00000 	.word	0x3fe00000
 800abe4:	7fe00000 	.word	0x7fe00000
 800abe8:	7c9fffff 	.word	0x7c9fffff
 800abec:	9b08      	ldr	r3, [sp, #32]
 800abee:	b323      	cbz	r3, 800ac3a <_strtod_l+0xb5a>
 800abf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800abf4:	d821      	bhi.n	800ac3a <_strtod_l+0xb5a>
 800abf6:	4630      	mov	r0, r6
 800abf8:	4639      	mov	r1, r7
 800abfa:	a327      	add	r3, pc, #156	@ (adr r3, 800ac98 <_strtod_l+0xbb8>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 ff7a 	bl	8000af8 <__aeabi_dcmple>
 800ac04:	b1a0      	cbz	r0, 800ac30 <_strtod_l+0xb50>
 800ac06:	4639      	mov	r1, r7
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7f5 ffd1 	bl	8000bb0 <__aeabi_d2uiz>
 800ac0e:	2801      	cmp	r0, #1
 800ac10:	bf38      	it	cc
 800ac12:	2001      	movcc	r0, #1
 800ac14:	f7f5 fc7a 	bl	800050c <__aeabi_ui2d>
 800ac18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	b9fb      	cbnz	r3, 800ac60 <_strtod_l+0xb80>
 800ac20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac24:	9014      	str	r0, [sp, #80]	@ 0x50
 800ac26:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ac2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ac36:	1b5b      	subs	r3, r3, r5
 800ac38:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac3a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ac3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ac42:	f7ff f8eb 	bl	8009e1c <__ulp>
 800ac46:	4650      	mov	r0, sl
 800ac48:	4659      	mov	r1, fp
 800ac4a:	ec53 2b10 	vmov	r2, r3, d0
 800ac4e:	f7f5 fcd7 	bl	8000600 <__aeabi_dmul>
 800ac52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac56:	f7f5 fb1d 	bl	8000294 <__adddf3>
 800ac5a:	4682      	mov	sl, r0
 800ac5c:	468b      	mov	fp, r1
 800ac5e:	e772      	b.n	800ab46 <_strtod_l+0xa66>
 800ac60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ac64:	e7e0      	b.n	800ac28 <_strtod_l+0xb48>
 800ac66:	a30e      	add	r3, pc, #56	@ (adr r3, 800aca0 <_strtod_l+0xbc0>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	f7f5 ff3a 	bl	8000ae4 <__aeabi_dcmplt>
 800ac70:	e79a      	b.n	800aba8 <_strtod_l+0xac8>
 800ac72:	2300      	movs	r3, #0
 800ac74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac78:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	f7ff ba6d 	b.w	800a15a <_strtod_l+0x7a>
 800ac80:	2a65      	cmp	r2, #101	@ 0x65
 800ac82:	f43f ab67 	beq.w	800a354 <_strtod_l+0x274>
 800ac86:	2a45      	cmp	r2, #69	@ 0x45
 800ac88:	f43f ab64 	beq.w	800a354 <_strtod_l+0x274>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	f7ff bba0 	b.w	800a3d2 <_strtod_l+0x2f2>
 800ac92:	bf00      	nop
 800ac94:	f3af 8000 	nop.w
 800ac98:	ffc00000 	.word	0xffc00000
 800ac9c:	41dfffff 	.word	0x41dfffff
 800aca0:	94a03595 	.word	0x94a03595
 800aca4:	3fcfffff 	.word	0x3fcfffff

0800aca8 <_strtod_r>:
 800aca8:	4b01      	ldr	r3, [pc, #4]	@ (800acb0 <_strtod_r+0x8>)
 800acaa:	f7ff ba19 	b.w	800a0e0 <_strtod_l>
 800acae:	bf00      	nop
 800acb0:	20000068 	.word	0x20000068

0800acb4 <_strtol_l.constprop.0>:
 800acb4:	2b24      	cmp	r3, #36	@ 0x24
 800acb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acba:	4686      	mov	lr, r0
 800acbc:	4690      	mov	r8, r2
 800acbe:	d801      	bhi.n	800acc4 <_strtol_l.constprop.0+0x10>
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d106      	bne.n	800acd2 <_strtol_l.constprop.0+0x1e>
 800acc4:	f7fd fd9c 	bl	8008800 <__errno>
 800acc8:	2316      	movs	r3, #22
 800acca:	6003      	str	r3, [r0, #0]
 800accc:	2000      	movs	r0, #0
 800acce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd2:	460d      	mov	r5, r1
 800acd4:	4833      	ldr	r0, [pc, #204]	@ (800ada4 <_strtol_l.constprop.0+0xf0>)
 800acd6:	462a      	mov	r2, r5
 800acd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acdc:	5d06      	ldrb	r6, [r0, r4]
 800acde:	f016 0608 	ands.w	r6, r6, #8
 800ace2:	d1f8      	bne.n	800acd6 <_strtol_l.constprop.0+0x22>
 800ace4:	2c2d      	cmp	r4, #45	@ 0x2d
 800ace6:	d12d      	bne.n	800ad44 <_strtol_l.constprop.0+0x90>
 800ace8:	782c      	ldrb	r4, [r5, #0]
 800acea:	2601      	movs	r6, #1
 800acec:	1c95      	adds	r5, r2, #2
 800acee:	f033 0210 	bics.w	r2, r3, #16
 800acf2:	d109      	bne.n	800ad08 <_strtol_l.constprop.0+0x54>
 800acf4:	2c30      	cmp	r4, #48	@ 0x30
 800acf6:	d12a      	bne.n	800ad4e <_strtol_l.constprop.0+0x9a>
 800acf8:	782a      	ldrb	r2, [r5, #0]
 800acfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acfe:	2a58      	cmp	r2, #88	@ 0x58
 800ad00:	d125      	bne.n	800ad4e <_strtol_l.constprop.0+0x9a>
 800ad02:	786c      	ldrb	r4, [r5, #1]
 800ad04:	2310      	movs	r3, #16
 800ad06:	3502      	adds	r5, #2
 800ad08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad12:	4610      	mov	r0, r2
 800ad14:	fbbc f9f3 	udiv	r9, ip, r3
 800ad18:	fb03 ca19 	mls	sl, r3, r9, ip
 800ad1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ad20:	2f09      	cmp	r7, #9
 800ad22:	d81b      	bhi.n	800ad5c <_strtol_l.constprop.0+0xa8>
 800ad24:	463c      	mov	r4, r7
 800ad26:	42a3      	cmp	r3, r4
 800ad28:	dd27      	ble.n	800ad7a <_strtol_l.constprop.0+0xc6>
 800ad2a:	1c57      	adds	r7, r2, #1
 800ad2c:	d007      	beq.n	800ad3e <_strtol_l.constprop.0+0x8a>
 800ad2e:	4581      	cmp	r9, r0
 800ad30:	d320      	bcc.n	800ad74 <_strtol_l.constprop.0+0xc0>
 800ad32:	d101      	bne.n	800ad38 <_strtol_l.constprop.0+0x84>
 800ad34:	45a2      	cmp	sl, r4
 800ad36:	db1d      	blt.n	800ad74 <_strtol_l.constprop.0+0xc0>
 800ad38:	fb00 4003 	mla	r0, r0, r3, r4
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad42:	e7eb      	b.n	800ad1c <_strtol_l.constprop.0+0x68>
 800ad44:	2c2b      	cmp	r4, #43	@ 0x2b
 800ad46:	bf04      	itt	eq
 800ad48:	782c      	ldrbeq	r4, [r5, #0]
 800ad4a:	1c95      	addeq	r5, r2, #2
 800ad4c:	e7cf      	b.n	800acee <_strtol_l.constprop.0+0x3a>
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1da      	bne.n	800ad08 <_strtol_l.constprop.0+0x54>
 800ad52:	2c30      	cmp	r4, #48	@ 0x30
 800ad54:	bf0c      	ite	eq
 800ad56:	2308      	moveq	r3, #8
 800ad58:	230a      	movne	r3, #10
 800ad5a:	e7d5      	b.n	800ad08 <_strtol_l.constprop.0+0x54>
 800ad5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad60:	2f19      	cmp	r7, #25
 800ad62:	d801      	bhi.n	800ad68 <_strtol_l.constprop.0+0xb4>
 800ad64:	3c37      	subs	r4, #55	@ 0x37
 800ad66:	e7de      	b.n	800ad26 <_strtol_l.constprop.0+0x72>
 800ad68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad6c:	2f19      	cmp	r7, #25
 800ad6e:	d804      	bhi.n	800ad7a <_strtol_l.constprop.0+0xc6>
 800ad70:	3c57      	subs	r4, #87	@ 0x57
 800ad72:	e7d8      	b.n	800ad26 <_strtol_l.constprop.0+0x72>
 800ad74:	f04f 32ff 	mov.w	r2, #4294967295
 800ad78:	e7e1      	b.n	800ad3e <_strtol_l.constprop.0+0x8a>
 800ad7a:	1c53      	adds	r3, r2, #1
 800ad7c:	d108      	bne.n	800ad90 <_strtol_l.constprop.0+0xdc>
 800ad7e:	2322      	movs	r3, #34	@ 0x22
 800ad80:	4660      	mov	r0, ip
 800ad82:	f8ce 3000 	str.w	r3, [lr]
 800ad86:	f1b8 0f00 	cmp.w	r8, #0
 800ad8a:	d0a0      	beq.n	800acce <_strtol_l.constprop.0+0x1a>
 800ad8c:	1e69      	subs	r1, r5, #1
 800ad8e:	e006      	b.n	800ad9e <_strtol_l.constprop.0+0xea>
 800ad90:	b106      	cbz	r6, 800ad94 <_strtol_l.constprop.0+0xe0>
 800ad92:	4240      	negs	r0, r0
 800ad94:	f1b8 0f00 	cmp.w	r8, #0
 800ad98:	d099      	beq.n	800acce <_strtol_l.constprop.0+0x1a>
 800ad9a:	2a00      	cmp	r2, #0
 800ad9c:	d1f6      	bne.n	800ad8c <_strtol_l.constprop.0+0xd8>
 800ad9e:	f8c8 1000 	str.w	r1, [r8]
 800ada2:	e794      	b.n	800acce <_strtol_l.constprop.0+0x1a>
 800ada4:	0800c2e9 	.word	0x0800c2e9

0800ada8 <_strtol_r>:
 800ada8:	f7ff bf84 	b.w	800acb4 <_strtol_l.constprop.0>

0800adac <__ssputs_r>:
 800adac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb0:	461f      	mov	r7, r3
 800adb2:	688e      	ldr	r6, [r1, #8]
 800adb4:	4682      	mov	sl, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	42be      	cmp	r6, r7
 800adba:	4690      	mov	r8, r2
 800adbc:	680b      	ldr	r3, [r1, #0]
 800adbe:	d82d      	bhi.n	800ae1c <__ssputs_r+0x70>
 800adc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800adc8:	d026      	beq.n	800ae18 <__ssputs_r+0x6c>
 800adca:	6965      	ldr	r5, [r4, #20]
 800adcc:	6909      	ldr	r1, [r1, #16]
 800adce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800add2:	eba3 0901 	sub.w	r9, r3, r1
 800add6:	1c7b      	adds	r3, r7, #1
 800add8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800addc:	444b      	add	r3, r9
 800adde:	106d      	asrs	r5, r5, #1
 800ade0:	429d      	cmp	r5, r3
 800ade2:	bf38      	it	cc
 800ade4:	461d      	movcc	r5, r3
 800ade6:	0553      	lsls	r3, r2, #21
 800ade8:	d527      	bpl.n	800ae3a <__ssputs_r+0x8e>
 800adea:	4629      	mov	r1, r5
 800adec:	f7fe fc10 	bl	8009610 <_malloc_r>
 800adf0:	4606      	mov	r6, r0
 800adf2:	b360      	cbz	r0, 800ae4e <__ssputs_r+0xa2>
 800adf4:	464a      	mov	r2, r9
 800adf6:	6921      	ldr	r1, [r4, #16]
 800adf8:	f000 fa18 	bl	800b22c <memcpy>
 800adfc:	89a3      	ldrh	r3, [r4, #12]
 800adfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	6126      	str	r6, [r4, #16]
 800ae0a:	444e      	add	r6, r9
 800ae0c:	6165      	str	r5, [r4, #20]
 800ae0e:	eba5 0509 	sub.w	r5, r5, r9
 800ae12:	6026      	str	r6, [r4, #0]
 800ae14:	463e      	mov	r6, r7
 800ae16:	60a5      	str	r5, [r4, #8]
 800ae18:	42be      	cmp	r6, r7
 800ae1a:	d900      	bls.n	800ae1e <__ssputs_r+0x72>
 800ae1c:	463e      	mov	r6, r7
 800ae1e:	4632      	mov	r2, r6
 800ae20:	4641      	mov	r1, r8
 800ae22:	6820      	ldr	r0, [r4, #0]
 800ae24:	f000 f9c6 	bl	800b1b4 <memmove>
 800ae28:	68a3      	ldr	r3, [r4, #8]
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	1b9b      	subs	r3, r3, r6
 800ae2e:	60a3      	str	r3, [r4, #8]
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	4433      	add	r3, r6
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	f000 fd85 	bl	800b94a <_realloc_r>
 800ae40:	4606      	mov	r6, r0
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d1e0      	bne.n	800ae08 <__ssputs_r+0x5c>
 800ae46:	6921      	ldr	r1, [r4, #16]
 800ae48:	4650      	mov	r0, sl
 800ae4a:	f7fe fb6d 	bl	8009528 <_free_r>
 800ae4e:	230c      	movs	r3, #12
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	f8ca 3000 	str.w	r3, [sl]
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae5e:	81a3      	strh	r3, [r4, #12]
 800ae60:	e7e9      	b.n	800ae36 <__ssputs_r+0x8a>
	...

0800ae64 <_svfiprintf_r>:
 800ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	4698      	mov	r8, r3
 800ae6a:	898b      	ldrh	r3, [r1, #12]
 800ae6c:	b09d      	sub	sp, #116	@ 0x74
 800ae6e:	4607      	mov	r7, r0
 800ae70:	061b      	lsls	r3, r3, #24
 800ae72:	460d      	mov	r5, r1
 800ae74:	4614      	mov	r4, r2
 800ae76:	d510      	bpl.n	800ae9a <_svfiprintf_r+0x36>
 800ae78:	690b      	ldr	r3, [r1, #16]
 800ae7a:	b973      	cbnz	r3, 800ae9a <_svfiprintf_r+0x36>
 800ae7c:	2140      	movs	r1, #64	@ 0x40
 800ae7e:	f7fe fbc7 	bl	8009610 <_malloc_r>
 800ae82:	6028      	str	r0, [r5, #0]
 800ae84:	6128      	str	r0, [r5, #16]
 800ae86:	b930      	cbnz	r0, 800ae96 <_svfiprintf_r+0x32>
 800ae88:	230c      	movs	r3, #12
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	b01d      	add	sp, #116	@ 0x74
 800ae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae96:	2340      	movs	r3, #64	@ 0x40
 800ae98:	616b      	str	r3, [r5, #20]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aea0:	f04f 0901 	mov.w	r9, #1
 800aea4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b048 <_svfiprintf_r+0x1e4>
 800aea8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeaa:	2320      	movs	r3, #32
 800aeac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeb0:	2330      	movs	r3, #48	@ 0x30
 800aeb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aeb6:	4623      	mov	r3, r4
 800aeb8:	469a      	mov	sl, r3
 800aeba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aebe:	b10a      	cbz	r2, 800aec4 <_svfiprintf_r+0x60>
 800aec0:	2a25      	cmp	r2, #37	@ 0x25
 800aec2:	d1f9      	bne.n	800aeb8 <_svfiprintf_r+0x54>
 800aec4:	ebba 0b04 	subs.w	fp, sl, r4
 800aec8:	d00b      	beq.n	800aee2 <_svfiprintf_r+0x7e>
 800aeca:	465b      	mov	r3, fp
 800aecc:	4622      	mov	r2, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	4638      	mov	r0, r7
 800aed2:	f7ff ff6b 	bl	800adac <__ssputs_r>
 800aed6:	3001      	adds	r0, #1
 800aed8:	f000 80a7 	beq.w	800b02a <_svfiprintf_r+0x1c6>
 800aedc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aede:	445a      	add	r2, fp
 800aee0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aee2:	f89a 3000 	ldrb.w	r3, [sl]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 809f 	beq.w	800b02a <_svfiprintf_r+0x1c6>
 800aeec:	2300      	movs	r3, #0
 800aeee:	f04f 32ff 	mov.w	r2, #4294967295
 800aef2:	f10a 0a01 	add.w	sl, sl, #1
 800aef6:	9304      	str	r3, [sp, #16]
 800aef8:	9307      	str	r3, [sp, #28]
 800aefa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aefe:	931a      	str	r3, [sp, #104]	@ 0x68
 800af00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af04:	4654      	mov	r4, sl
 800af06:	2205      	movs	r2, #5
 800af08:	484f      	ldr	r0, [pc, #316]	@ (800b048 <_svfiprintf_r+0x1e4>)
 800af0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af0e:	f7fd fca4 	bl	800885a <memchr>
 800af12:	9a04      	ldr	r2, [sp, #16]
 800af14:	b9d8      	cbnz	r0, 800af4e <_svfiprintf_r+0xea>
 800af16:	06d0      	lsls	r0, r2, #27
 800af18:	bf44      	itt	mi
 800af1a:	2320      	movmi	r3, #32
 800af1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af20:	0711      	lsls	r1, r2, #28
 800af22:	bf44      	itt	mi
 800af24:	232b      	movmi	r3, #43	@ 0x2b
 800af26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af2a:	f89a 3000 	ldrb.w	r3, [sl]
 800af2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af30:	d015      	beq.n	800af5e <_svfiprintf_r+0xfa>
 800af32:	9a07      	ldr	r2, [sp, #28]
 800af34:	4654      	mov	r4, sl
 800af36:	2000      	movs	r0, #0
 800af38:	f04f 0c0a 	mov.w	ip, #10
 800af3c:	4621      	mov	r1, r4
 800af3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af42:	3b30      	subs	r3, #48	@ 0x30
 800af44:	2b09      	cmp	r3, #9
 800af46:	d94b      	bls.n	800afe0 <_svfiprintf_r+0x17c>
 800af48:	b1b0      	cbz	r0, 800af78 <_svfiprintf_r+0x114>
 800af4a:	9207      	str	r2, [sp, #28]
 800af4c:	e014      	b.n	800af78 <_svfiprintf_r+0x114>
 800af4e:	eba0 0308 	sub.w	r3, r0, r8
 800af52:	46a2      	mov	sl, r4
 800af54:	fa09 f303 	lsl.w	r3, r9, r3
 800af58:	4313      	orrs	r3, r2
 800af5a:	9304      	str	r3, [sp, #16]
 800af5c:	e7d2      	b.n	800af04 <_svfiprintf_r+0xa0>
 800af5e:	9b03      	ldr	r3, [sp, #12]
 800af60:	1d19      	adds	r1, r3, #4
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	9103      	str	r1, [sp, #12]
 800af68:	bfbb      	ittet	lt
 800af6a:	425b      	neglt	r3, r3
 800af6c:	f042 0202 	orrlt.w	r2, r2, #2
 800af70:	9307      	strge	r3, [sp, #28]
 800af72:	9307      	strlt	r3, [sp, #28]
 800af74:	bfb8      	it	lt
 800af76:	9204      	strlt	r2, [sp, #16]
 800af78:	7823      	ldrb	r3, [r4, #0]
 800af7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800af7c:	d10a      	bne.n	800af94 <_svfiprintf_r+0x130>
 800af7e:	7863      	ldrb	r3, [r4, #1]
 800af80:	2b2a      	cmp	r3, #42	@ 0x2a
 800af82:	d132      	bne.n	800afea <_svfiprintf_r+0x186>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	3402      	adds	r4, #2
 800af88:	1d1a      	adds	r2, r3, #4
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af90:	9203      	str	r2, [sp, #12]
 800af92:	9305      	str	r3, [sp, #20]
 800af94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b058 <_svfiprintf_r+0x1f4>
 800af98:	2203      	movs	r2, #3
 800af9a:	7821      	ldrb	r1, [r4, #0]
 800af9c:	4650      	mov	r0, sl
 800af9e:	f7fd fc5c 	bl	800885a <memchr>
 800afa2:	b138      	cbz	r0, 800afb4 <_svfiprintf_r+0x150>
 800afa4:	eba0 000a 	sub.w	r0, r0, sl
 800afa8:	2240      	movs	r2, #64	@ 0x40
 800afaa:	9b04      	ldr	r3, [sp, #16]
 800afac:	3401      	adds	r4, #1
 800afae:	4082      	lsls	r2, r0
 800afb0:	4313      	orrs	r3, r2
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb8:	2206      	movs	r2, #6
 800afba:	4824      	ldr	r0, [pc, #144]	@ (800b04c <_svfiprintf_r+0x1e8>)
 800afbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afc0:	f7fd fc4b 	bl	800885a <memchr>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d036      	beq.n	800b036 <_svfiprintf_r+0x1d2>
 800afc8:	4b21      	ldr	r3, [pc, #132]	@ (800b050 <_svfiprintf_r+0x1ec>)
 800afca:	bb1b      	cbnz	r3, 800b014 <_svfiprintf_r+0x1b0>
 800afcc:	9b03      	ldr	r3, [sp, #12]
 800afce:	3307      	adds	r3, #7
 800afd0:	f023 0307 	bic.w	r3, r3, #7
 800afd4:	3308      	adds	r3, #8
 800afd6:	9303      	str	r3, [sp, #12]
 800afd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afda:	4433      	add	r3, r6
 800afdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afde:	e76a      	b.n	800aeb6 <_svfiprintf_r+0x52>
 800afe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800afe4:	460c      	mov	r4, r1
 800afe6:	2001      	movs	r0, #1
 800afe8:	e7a8      	b.n	800af3c <_svfiprintf_r+0xd8>
 800afea:	2300      	movs	r3, #0
 800afec:	3401      	adds	r4, #1
 800afee:	f04f 0c0a 	mov.w	ip, #10
 800aff2:	4619      	mov	r1, r3
 800aff4:	9305      	str	r3, [sp, #20]
 800aff6:	4620      	mov	r0, r4
 800aff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800affc:	3a30      	subs	r2, #48	@ 0x30
 800affe:	2a09      	cmp	r2, #9
 800b000:	d903      	bls.n	800b00a <_svfiprintf_r+0x1a6>
 800b002:	2b00      	cmp	r3, #0
 800b004:	d0c6      	beq.n	800af94 <_svfiprintf_r+0x130>
 800b006:	9105      	str	r1, [sp, #20]
 800b008:	e7c4      	b.n	800af94 <_svfiprintf_r+0x130>
 800b00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b00e:	4604      	mov	r4, r0
 800b010:	2301      	movs	r3, #1
 800b012:	e7f0      	b.n	800aff6 <_svfiprintf_r+0x192>
 800b014:	ab03      	add	r3, sp, #12
 800b016:	462a      	mov	r2, r5
 800b018:	a904      	add	r1, sp, #16
 800b01a:	4638      	mov	r0, r7
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	4b0d      	ldr	r3, [pc, #52]	@ (800b054 <_svfiprintf_r+0x1f0>)
 800b020:	f7fc fc74 	bl	800790c <_printf_float>
 800b024:	1c42      	adds	r2, r0, #1
 800b026:	4606      	mov	r6, r0
 800b028:	d1d6      	bne.n	800afd8 <_svfiprintf_r+0x174>
 800b02a:	89ab      	ldrh	r3, [r5, #12]
 800b02c:	065b      	lsls	r3, r3, #25
 800b02e:	f53f af2d 	bmi.w	800ae8c <_svfiprintf_r+0x28>
 800b032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b034:	e72c      	b.n	800ae90 <_svfiprintf_r+0x2c>
 800b036:	ab03      	add	r3, sp, #12
 800b038:	462a      	mov	r2, r5
 800b03a:	a904      	add	r1, sp, #16
 800b03c:	4638      	mov	r0, r7
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	4b04      	ldr	r3, [pc, #16]	@ (800b054 <_svfiprintf_r+0x1f0>)
 800b042:	f7fc feff 	bl	8007e44 <_printf_i>
 800b046:	e7ed      	b.n	800b024 <_svfiprintf_r+0x1c0>
 800b048:	0800c3e9 	.word	0x0800c3e9
 800b04c:	0800c3f3 	.word	0x0800c3f3
 800b050:	0800790d 	.word	0x0800790d
 800b054:	0800adad 	.word	0x0800adad
 800b058:	0800c3ef 	.word	0x0800c3ef

0800b05c <__sflush_r>:
 800b05c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b064:	0716      	lsls	r6, r2, #28
 800b066:	4605      	mov	r5, r0
 800b068:	460c      	mov	r4, r1
 800b06a:	d454      	bmi.n	800b116 <__sflush_r+0xba>
 800b06c:	684b      	ldr	r3, [r1, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dc02      	bgt.n	800b078 <__sflush_r+0x1c>
 800b072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b074:	2b00      	cmp	r3, #0
 800b076:	dd48      	ble.n	800b10a <__sflush_r+0xae>
 800b078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b07a:	2e00      	cmp	r6, #0
 800b07c:	d045      	beq.n	800b10a <__sflush_r+0xae>
 800b07e:	2300      	movs	r3, #0
 800b080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b084:	682f      	ldr	r7, [r5, #0]
 800b086:	6a21      	ldr	r1, [r4, #32]
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	d030      	beq.n	800b0ee <__sflush_r+0x92>
 800b08c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	0759      	lsls	r1, r3, #29
 800b092:	d505      	bpl.n	800b0a0 <__sflush_r+0x44>
 800b094:	6863      	ldr	r3, [r4, #4]
 800b096:	1ad2      	subs	r2, r2, r3
 800b098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b09a:	b10b      	cbz	r3, 800b0a0 <__sflush_r+0x44>
 800b09c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b09e:	1ad2      	subs	r2, r2, r3
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0a4:	6a21      	ldr	r1, [r4, #32]
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	47b0      	blx	r6
 800b0aa:	1c43      	adds	r3, r0, #1
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	d106      	bne.n	800b0be <__sflush_r+0x62>
 800b0b0:	6829      	ldr	r1, [r5, #0]
 800b0b2:	291d      	cmp	r1, #29
 800b0b4:	d82b      	bhi.n	800b10e <__sflush_r+0xb2>
 800b0b6:	4a2a      	ldr	r2, [pc, #168]	@ (800b160 <__sflush_r+0x104>)
 800b0b8:	410a      	asrs	r2, r1
 800b0ba:	07d6      	lsls	r6, r2, #31
 800b0bc:	d427      	bmi.n	800b10e <__sflush_r+0xb2>
 800b0be:	2200      	movs	r2, #0
 800b0c0:	04d9      	lsls	r1, r3, #19
 800b0c2:	6062      	str	r2, [r4, #4]
 800b0c4:	6922      	ldr	r2, [r4, #16]
 800b0c6:	6022      	str	r2, [r4, #0]
 800b0c8:	d504      	bpl.n	800b0d4 <__sflush_r+0x78>
 800b0ca:	1c42      	adds	r2, r0, #1
 800b0cc:	d101      	bne.n	800b0d2 <__sflush_r+0x76>
 800b0ce:	682b      	ldr	r3, [r5, #0]
 800b0d0:	b903      	cbnz	r3, 800b0d4 <__sflush_r+0x78>
 800b0d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0d6:	602f      	str	r7, [r5, #0]
 800b0d8:	b1b9      	cbz	r1, 800b10a <__sflush_r+0xae>
 800b0da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0de:	4299      	cmp	r1, r3
 800b0e0:	d002      	beq.n	800b0e8 <__sflush_r+0x8c>
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f7fe fa20 	bl	8009528 <_free_r>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0ec:	e00d      	b.n	800b10a <__sflush_r+0xae>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b0      	blx	r6
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	1c50      	adds	r0, r2, #1
 800b0f8:	d1c9      	bne.n	800b08e <__sflush_r+0x32>
 800b0fa:	682b      	ldr	r3, [r5, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0c6      	beq.n	800b08e <__sflush_r+0x32>
 800b100:	2b1d      	cmp	r3, #29
 800b102:	d001      	beq.n	800b108 <__sflush_r+0xac>
 800b104:	2b16      	cmp	r3, #22
 800b106:	d11d      	bne.n	800b144 <__sflush_r+0xe8>
 800b108:	602f      	str	r7, [r5, #0]
 800b10a:	2000      	movs	r0, #0
 800b10c:	e021      	b.n	800b152 <__sflush_r+0xf6>
 800b10e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b112:	b21b      	sxth	r3, r3
 800b114:	e01a      	b.n	800b14c <__sflush_r+0xf0>
 800b116:	690f      	ldr	r7, [r1, #16]
 800b118:	2f00      	cmp	r7, #0
 800b11a:	d0f6      	beq.n	800b10a <__sflush_r+0xae>
 800b11c:	0793      	lsls	r3, r2, #30
 800b11e:	680e      	ldr	r6, [r1, #0]
 800b120:	600f      	str	r7, [r1, #0]
 800b122:	bf0c      	ite	eq
 800b124:	694b      	ldreq	r3, [r1, #20]
 800b126:	2300      	movne	r3, #0
 800b128:	eba6 0807 	sub.w	r8, r6, r7
 800b12c:	608b      	str	r3, [r1, #8]
 800b12e:	f1b8 0f00 	cmp.w	r8, #0
 800b132:	ddea      	ble.n	800b10a <__sflush_r+0xae>
 800b134:	4643      	mov	r3, r8
 800b136:	463a      	mov	r2, r7
 800b138:	6a21      	ldr	r1, [r4, #32]
 800b13a:	4628      	mov	r0, r5
 800b13c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b13e:	47b0      	blx	r6
 800b140:	2800      	cmp	r0, #0
 800b142:	dc08      	bgt.n	800b156 <__sflush_r+0xfa>
 800b144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b156:	4407      	add	r7, r0
 800b158:	eba8 0800 	sub.w	r8, r8, r0
 800b15c:	e7e7      	b.n	800b12e <__sflush_r+0xd2>
 800b15e:	bf00      	nop
 800b160:	dfbffffe 	.word	0xdfbffffe

0800b164 <_fflush_r>:
 800b164:	b538      	push	{r3, r4, r5, lr}
 800b166:	690b      	ldr	r3, [r1, #16]
 800b168:	4605      	mov	r5, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	b913      	cbnz	r3, 800b174 <_fflush_r+0x10>
 800b16e:	2500      	movs	r5, #0
 800b170:	4628      	mov	r0, r5
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	b118      	cbz	r0, 800b17e <_fflush_r+0x1a>
 800b176:	6a03      	ldr	r3, [r0, #32]
 800b178:	b90b      	cbnz	r3, 800b17e <_fflush_r+0x1a>
 800b17a:	f7fd fa21 	bl	80085c0 <__sinit>
 800b17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0f3      	beq.n	800b16e <_fflush_r+0xa>
 800b186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b188:	07d0      	lsls	r0, r2, #31
 800b18a:	d404      	bmi.n	800b196 <_fflush_r+0x32>
 800b18c:	0599      	lsls	r1, r3, #22
 800b18e:	d402      	bmi.n	800b196 <_fflush_r+0x32>
 800b190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b192:	f7fd fb60 	bl	8008856 <__retarget_lock_acquire_recursive>
 800b196:	4628      	mov	r0, r5
 800b198:	4621      	mov	r1, r4
 800b19a:	f7ff ff5f 	bl	800b05c <__sflush_r>
 800b19e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	07da      	lsls	r2, r3, #31
 800b1a4:	d4e4      	bmi.n	800b170 <_fflush_r+0xc>
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	059b      	lsls	r3, r3, #22
 800b1aa:	d4e1      	bmi.n	800b170 <_fflush_r+0xc>
 800b1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ae:	f7fd fb53 	bl	8008858 <__retarget_lock_release_recursive>
 800b1b2:	e7dd      	b.n	800b170 <_fflush_r+0xc>

0800b1b4 <memmove>:
 800b1b4:	4288      	cmp	r0, r1
 800b1b6:	b510      	push	{r4, lr}
 800b1b8:	eb01 0402 	add.w	r4, r1, r2
 800b1bc:	d902      	bls.n	800b1c4 <memmove+0x10>
 800b1be:	4284      	cmp	r4, r0
 800b1c0:	4623      	mov	r3, r4
 800b1c2:	d807      	bhi.n	800b1d4 <memmove+0x20>
 800b1c4:	1e43      	subs	r3, r0, #1
 800b1c6:	42a1      	cmp	r1, r4
 800b1c8:	d008      	beq.n	800b1dc <memmove+0x28>
 800b1ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1d2:	e7f8      	b.n	800b1c6 <memmove+0x12>
 800b1d4:	4402      	add	r2, r0
 800b1d6:	4601      	mov	r1, r0
 800b1d8:	428a      	cmp	r2, r1
 800b1da:	d100      	bne.n	800b1de <memmove+0x2a>
 800b1dc:	bd10      	pop	{r4, pc}
 800b1de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1e6:	e7f7      	b.n	800b1d8 <memmove+0x24>

0800b1e8 <strncmp>:
 800b1e8:	b510      	push	{r4, lr}
 800b1ea:	b16a      	cbz	r2, 800b208 <strncmp+0x20>
 800b1ec:	3901      	subs	r1, #1
 800b1ee:	1884      	adds	r4, r0, r2
 800b1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d103      	bne.n	800b204 <strncmp+0x1c>
 800b1fc:	42a0      	cmp	r0, r4
 800b1fe:	d001      	beq.n	800b204 <strncmp+0x1c>
 800b200:	2a00      	cmp	r2, #0
 800b202:	d1f5      	bne.n	800b1f0 <strncmp+0x8>
 800b204:	1ad0      	subs	r0, r2, r3
 800b206:	bd10      	pop	{r4, pc}
 800b208:	4610      	mov	r0, r2
 800b20a:	e7fc      	b.n	800b206 <strncmp+0x1e>

0800b20c <_sbrk_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	2300      	movs	r3, #0
 800b210:	4d05      	ldr	r5, [pc, #20]	@ (800b228 <_sbrk_r+0x1c>)
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	602b      	str	r3, [r5, #0]
 800b218:	f7f6 fa32 	bl	8001680 <_sbrk>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_sbrk_r+0x1a>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b103      	cbz	r3, 800b226 <_sbrk_r+0x1a>
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	20000454 	.word	0x20000454

0800b22c <memcpy>:
 800b22c:	440a      	add	r2, r1
 800b22e:	1e43      	subs	r3, r0, #1
 800b230:	4291      	cmp	r1, r2
 800b232:	d100      	bne.n	800b236 <memcpy+0xa>
 800b234:	4770      	bx	lr
 800b236:	b510      	push	{r4, lr}
 800b238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b23c:	4291      	cmp	r1, r2
 800b23e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b242:	d1f9      	bne.n	800b238 <memcpy+0xc>
 800b244:	bd10      	pop	{r4, pc}
	...

0800b248 <nan>:
 800b248:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b250 <nan+0x8>
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	00000000 	.word	0x00000000
 800b254:	7ff80000 	.word	0x7ff80000

0800b258 <__assert_func>:
 800b258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b25a:	4614      	mov	r4, r2
 800b25c:	461a      	mov	r2, r3
 800b25e:	4b09      	ldr	r3, [pc, #36]	@ (800b284 <__assert_func+0x2c>)
 800b260:	4605      	mov	r5, r0
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68d8      	ldr	r0, [r3, #12]
 800b266:	b954      	cbnz	r4, 800b27e <__assert_func+0x26>
 800b268:	4b07      	ldr	r3, [pc, #28]	@ (800b288 <__assert_func+0x30>)
 800b26a:	461c      	mov	r4, r3
 800b26c:	9100      	str	r1, [sp, #0]
 800b26e:	4907      	ldr	r1, [pc, #28]	@ (800b28c <__assert_func+0x34>)
 800b270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b274:	462b      	mov	r3, r5
 800b276:	f000 fba3 	bl	800b9c0 <fiprintf>
 800b27a:	f000 fbb3 	bl	800b9e4 <abort>
 800b27e:	4b04      	ldr	r3, [pc, #16]	@ (800b290 <__assert_func+0x38>)
 800b280:	e7f4      	b.n	800b26c <__assert_func+0x14>
 800b282:	bf00      	nop
 800b284:	20000018 	.word	0x20000018
 800b288:	0800c43d 	.word	0x0800c43d
 800b28c:	0800c40f 	.word	0x0800c40f
 800b290:	0800c402 	.word	0x0800c402

0800b294 <_calloc_r>:
 800b294:	b570      	push	{r4, r5, r6, lr}
 800b296:	fba1 5402 	umull	r5, r4, r1, r2
 800b29a:	b93c      	cbnz	r4, 800b2ac <_calloc_r+0x18>
 800b29c:	4629      	mov	r1, r5
 800b29e:	f7fe f9b7 	bl	8009610 <_malloc_r>
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	b928      	cbnz	r0, 800b2b2 <_calloc_r+0x1e>
 800b2a6:	2600      	movs	r6, #0
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	220c      	movs	r2, #12
 800b2ae:	6002      	str	r2, [r0, #0]
 800b2b0:	e7f9      	b.n	800b2a6 <_calloc_r+0x12>
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	f7fd fa50 	bl	800875a <memset>
 800b2ba:	e7f5      	b.n	800b2a8 <_calloc_r+0x14>

0800b2bc <rshift>:
 800b2bc:	6903      	ldr	r3, [r0, #16]
 800b2be:	114a      	asrs	r2, r1, #5
 800b2c0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	f100 0414 	add.w	r4, r0, #20
 800b2cc:	dd45      	ble.n	800b35a <rshift+0x9e>
 800b2ce:	f011 011f 	ands.w	r1, r1, #31
 800b2d2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2d6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2da:	d10c      	bne.n	800b2f6 <rshift+0x3a>
 800b2dc:	f100 0710 	add.w	r7, r0, #16
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	42b1      	cmp	r1, r6
 800b2e4:	d334      	bcc.n	800b350 <rshift+0x94>
 800b2e6:	1a9b      	subs	r3, r3, r2
 800b2e8:	1eea      	subs	r2, r5, #3
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4296      	cmp	r6, r2
 800b2ee:	bf38      	it	cc
 800b2f0:	2300      	movcc	r3, #0
 800b2f2:	4423      	add	r3, r4
 800b2f4:	e015      	b.n	800b322 <rshift+0x66>
 800b2f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2fa:	f1c1 0820 	rsb	r8, r1, #32
 800b2fe:	f105 0e04 	add.w	lr, r5, #4
 800b302:	46a1      	mov	r9, r4
 800b304:	40cf      	lsrs	r7, r1
 800b306:	4576      	cmp	r6, lr
 800b308:	46f4      	mov	ip, lr
 800b30a:	d815      	bhi.n	800b338 <rshift+0x7c>
 800b30c:	1a9a      	subs	r2, r3, r2
 800b30e:	3501      	adds	r5, #1
 800b310:	0092      	lsls	r2, r2, #2
 800b312:	3a04      	subs	r2, #4
 800b314:	42ae      	cmp	r6, r5
 800b316:	bf38      	it	cc
 800b318:	2200      	movcc	r2, #0
 800b31a:	18a3      	adds	r3, r4, r2
 800b31c:	50a7      	str	r7, [r4, r2]
 800b31e:	b107      	cbz	r7, 800b322 <rshift+0x66>
 800b320:	3304      	adds	r3, #4
 800b322:	1b1a      	subs	r2, r3, r4
 800b324:	42a3      	cmp	r3, r4
 800b326:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b32a:	bf08      	it	eq
 800b32c:	2300      	moveq	r3, #0
 800b32e:	6102      	str	r2, [r0, #16]
 800b330:	bf08      	it	eq
 800b332:	6143      	streq	r3, [r0, #20]
 800b334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b338:	f8dc c000 	ldr.w	ip, [ip]
 800b33c:	fa0c fc08 	lsl.w	ip, ip, r8
 800b340:	ea4c 0707 	orr.w	r7, ip, r7
 800b344:	f849 7b04 	str.w	r7, [r9], #4
 800b348:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b34c:	40cf      	lsrs	r7, r1
 800b34e:	e7da      	b.n	800b306 <rshift+0x4a>
 800b350:	f851 cb04 	ldr.w	ip, [r1], #4
 800b354:	f847 cf04 	str.w	ip, [r7, #4]!
 800b358:	e7c3      	b.n	800b2e2 <rshift+0x26>
 800b35a:	4623      	mov	r3, r4
 800b35c:	e7e1      	b.n	800b322 <rshift+0x66>

0800b35e <__hexdig_fun>:
 800b35e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b362:	2b09      	cmp	r3, #9
 800b364:	d802      	bhi.n	800b36c <__hexdig_fun+0xe>
 800b366:	3820      	subs	r0, #32
 800b368:	b2c0      	uxtb	r0, r0
 800b36a:	4770      	bx	lr
 800b36c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b370:	2b05      	cmp	r3, #5
 800b372:	d801      	bhi.n	800b378 <__hexdig_fun+0x1a>
 800b374:	3847      	subs	r0, #71	@ 0x47
 800b376:	e7f7      	b.n	800b368 <__hexdig_fun+0xa>
 800b378:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b37c:	2b05      	cmp	r3, #5
 800b37e:	d801      	bhi.n	800b384 <__hexdig_fun+0x26>
 800b380:	3827      	subs	r0, #39	@ 0x27
 800b382:	e7f1      	b.n	800b368 <__hexdig_fun+0xa>
 800b384:	2000      	movs	r0, #0
 800b386:	4770      	bx	lr

0800b388 <__gethex>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	b085      	sub	sp, #20
 800b38e:	468a      	mov	sl, r1
 800b390:	4690      	mov	r8, r2
 800b392:	9302      	str	r3, [sp, #8]
 800b394:	680b      	ldr	r3, [r1, #0]
 800b396:	9001      	str	r0, [sp, #4]
 800b398:	1c9c      	adds	r4, r3, #2
 800b39a:	46a1      	mov	r9, r4
 800b39c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b3a0:	2830      	cmp	r0, #48	@ 0x30
 800b3a2:	d0fa      	beq.n	800b39a <__gethex+0x12>
 800b3a4:	eba9 0303 	sub.w	r3, r9, r3
 800b3a8:	f1a3 0b02 	sub.w	fp, r3, #2
 800b3ac:	f7ff ffd7 	bl	800b35e <__hexdig_fun>
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d166      	bne.n	800b484 <__gethex+0xfc>
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	499e      	ldr	r1, [pc, #632]	@ (800b634 <__gethex+0x2ac>)
 800b3ba:	4648      	mov	r0, r9
 800b3bc:	f7ff ff14 	bl	800b1e8 <strncmp>
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d165      	bne.n	800b492 <__gethex+0x10a>
 800b3c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b3ca:	4626      	mov	r6, r4
 800b3cc:	f7ff ffc7 	bl	800b35e <__hexdig_fun>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d060      	beq.n	800b496 <__gethex+0x10e>
 800b3d4:	4623      	mov	r3, r4
 800b3d6:	7818      	ldrb	r0, [r3, #0]
 800b3d8:	4699      	mov	r9, r3
 800b3da:	3301      	adds	r3, #1
 800b3dc:	2830      	cmp	r0, #48	@ 0x30
 800b3de:	d0fa      	beq.n	800b3d6 <__gethex+0x4e>
 800b3e0:	f7ff ffbd 	bl	800b35e <__hexdig_fun>
 800b3e4:	fab0 f580 	clz	r5, r0
 800b3e8:	f04f 0b01 	mov.w	fp, #1
 800b3ec:	096d      	lsrs	r5, r5, #5
 800b3ee:	464a      	mov	r2, r9
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	3201      	adds	r2, #1
 800b3f4:	7830      	ldrb	r0, [r6, #0]
 800b3f6:	f7ff ffb2 	bl	800b35e <__hexdig_fun>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d1f8      	bne.n	800b3f0 <__gethex+0x68>
 800b3fe:	2201      	movs	r2, #1
 800b400:	498c      	ldr	r1, [pc, #560]	@ (800b634 <__gethex+0x2ac>)
 800b402:	4630      	mov	r0, r6
 800b404:	f7ff fef0 	bl	800b1e8 <strncmp>
 800b408:	2800      	cmp	r0, #0
 800b40a:	d13e      	bne.n	800b48a <__gethex+0x102>
 800b40c:	b944      	cbnz	r4, 800b420 <__gethex+0x98>
 800b40e:	1c74      	adds	r4, r6, #1
 800b410:	4622      	mov	r2, r4
 800b412:	4616      	mov	r6, r2
 800b414:	3201      	adds	r2, #1
 800b416:	7830      	ldrb	r0, [r6, #0]
 800b418:	f7ff ffa1 	bl	800b35e <__hexdig_fun>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d1f8      	bne.n	800b412 <__gethex+0x8a>
 800b420:	1ba4      	subs	r4, r4, r6
 800b422:	00a7      	lsls	r7, r4, #2
 800b424:	7833      	ldrb	r3, [r6, #0]
 800b426:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b42a:	2b50      	cmp	r3, #80	@ 0x50
 800b42c:	d13d      	bne.n	800b4aa <__gethex+0x122>
 800b42e:	7873      	ldrb	r3, [r6, #1]
 800b430:	2b2b      	cmp	r3, #43	@ 0x2b
 800b432:	d032      	beq.n	800b49a <__gethex+0x112>
 800b434:	2b2d      	cmp	r3, #45	@ 0x2d
 800b436:	d033      	beq.n	800b4a0 <__gethex+0x118>
 800b438:	1c71      	adds	r1, r6, #1
 800b43a:	2400      	movs	r4, #0
 800b43c:	7808      	ldrb	r0, [r1, #0]
 800b43e:	f7ff ff8e 	bl	800b35e <__hexdig_fun>
 800b442:	1e43      	subs	r3, r0, #1
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b18      	cmp	r3, #24
 800b448:	d82f      	bhi.n	800b4aa <__gethex+0x122>
 800b44a:	f1a0 0210 	sub.w	r2, r0, #16
 800b44e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b452:	f7ff ff84 	bl	800b35e <__hexdig_fun>
 800b456:	f100 3cff 	add.w	ip, r0, #4294967295
 800b45a:	230a      	movs	r3, #10
 800b45c:	fa5f fc8c 	uxtb.w	ip, ip
 800b460:	f1bc 0f18 	cmp.w	ip, #24
 800b464:	d91e      	bls.n	800b4a4 <__gethex+0x11c>
 800b466:	b104      	cbz	r4, 800b46a <__gethex+0xe2>
 800b468:	4252      	negs	r2, r2
 800b46a:	4417      	add	r7, r2
 800b46c:	f8ca 1000 	str.w	r1, [sl]
 800b470:	b1ed      	cbz	r5, 800b4ae <__gethex+0x126>
 800b472:	f1bb 0f00 	cmp.w	fp, #0
 800b476:	bf0c      	ite	eq
 800b478:	2506      	moveq	r5, #6
 800b47a:	2500      	movne	r5, #0
 800b47c:	4628      	mov	r0, r5
 800b47e:	b005      	add	sp, #20
 800b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b484:	2500      	movs	r5, #0
 800b486:	462c      	mov	r4, r5
 800b488:	e7b1      	b.n	800b3ee <__gethex+0x66>
 800b48a:	2c00      	cmp	r4, #0
 800b48c:	d1c8      	bne.n	800b420 <__gethex+0x98>
 800b48e:	4627      	mov	r7, r4
 800b490:	e7c8      	b.n	800b424 <__gethex+0x9c>
 800b492:	464e      	mov	r6, r9
 800b494:	462f      	mov	r7, r5
 800b496:	2501      	movs	r5, #1
 800b498:	e7c4      	b.n	800b424 <__gethex+0x9c>
 800b49a:	2400      	movs	r4, #0
 800b49c:	1cb1      	adds	r1, r6, #2
 800b49e:	e7cd      	b.n	800b43c <__gethex+0xb4>
 800b4a0:	2401      	movs	r4, #1
 800b4a2:	e7fb      	b.n	800b49c <__gethex+0x114>
 800b4a4:	fb03 0002 	mla	r0, r3, r2, r0
 800b4a8:	e7cf      	b.n	800b44a <__gethex+0xc2>
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	e7de      	b.n	800b46c <__gethex+0xe4>
 800b4ae:	eba6 0309 	sub.w	r3, r6, r9
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	2b07      	cmp	r3, #7
 800b4b8:	dc0a      	bgt.n	800b4d0 <__gethex+0x148>
 800b4ba:	9801      	ldr	r0, [sp, #4]
 800b4bc:	f7fe f934 	bl	8009728 <_Balloc>
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	b940      	cbnz	r0, 800b4d6 <__gethex+0x14e>
 800b4c4:	4b5c      	ldr	r3, [pc, #368]	@ (800b638 <__gethex+0x2b0>)
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	21e4      	movs	r1, #228	@ 0xe4
 800b4ca:	485c      	ldr	r0, [pc, #368]	@ (800b63c <__gethex+0x2b4>)
 800b4cc:	f7ff fec4 	bl	800b258 <__assert_func>
 800b4d0:	3101      	adds	r1, #1
 800b4d2:	105b      	asrs	r3, r3, #1
 800b4d4:	e7ef      	b.n	800b4b6 <__gethex+0x12e>
 800b4d6:	f100 0a14 	add.w	sl, r0, #20
 800b4da:	2300      	movs	r3, #0
 800b4dc:	4655      	mov	r5, sl
 800b4de:	469b      	mov	fp, r3
 800b4e0:	45b1      	cmp	r9, r6
 800b4e2:	d337      	bcc.n	800b554 <__gethex+0x1cc>
 800b4e4:	f845 bb04 	str.w	fp, [r5], #4
 800b4e8:	eba5 050a 	sub.w	r5, r5, sl
 800b4ec:	4658      	mov	r0, fp
 800b4ee:	10ad      	asrs	r5, r5, #2
 800b4f0:	6125      	str	r5, [r4, #16]
 800b4f2:	016d      	lsls	r5, r5, #5
 800b4f4:	f7fe fa0c 	bl	8009910 <__hi0bits>
 800b4f8:	f8d8 6000 	ldr.w	r6, [r8]
 800b4fc:	1a2d      	subs	r5, r5, r0
 800b4fe:	42b5      	cmp	r5, r6
 800b500:	dd54      	ble.n	800b5ac <__gethex+0x224>
 800b502:	1bad      	subs	r5, r5, r6
 800b504:	4620      	mov	r0, r4
 800b506:	4629      	mov	r1, r5
 800b508:	f7fe fda9 	bl	800a05e <__any_on>
 800b50c:	4681      	mov	r9, r0
 800b50e:	b178      	cbz	r0, 800b530 <__gethex+0x1a8>
 800b510:	1e6b      	subs	r3, r5, #1
 800b512:	f04f 0901 	mov.w	r9, #1
 800b516:	1159      	asrs	r1, r3, #5
 800b518:	f003 021f 	and.w	r2, r3, #31
 800b51c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b520:	fa09 f202 	lsl.w	r2, r9, r2
 800b524:	420a      	tst	r2, r1
 800b526:	d003      	beq.n	800b530 <__gethex+0x1a8>
 800b528:	454b      	cmp	r3, r9
 800b52a:	dc36      	bgt.n	800b59a <__gethex+0x212>
 800b52c:	f04f 0902 	mov.w	r9, #2
 800b530:	442f      	add	r7, r5
 800b532:	4629      	mov	r1, r5
 800b534:	4620      	mov	r0, r4
 800b536:	f7ff fec1 	bl	800b2bc <rshift>
 800b53a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b53e:	42bb      	cmp	r3, r7
 800b540:	da42      	bge.n	800b5c8 <__gethex+0x240>
 800b542:	4621      	mov	r1, r4
 800b544:	9801      	ldr	r0, [sp, #4]
 800b546:	f7fe f92f 	bl	80097a8 <_Bfree>
 800b54a:	2300      	movs	r3, #0
 800b54c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b54e:	25a3      	movs	r5, #163	@ 0xa3
 800b550:	6013      	str	r3, [r2, #0]
 800b552:	e793      	b.n	800b47c <__gethex+0xf4>
 800b554:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b558:	2a2e      	cmp	r2, #46	@ 0x2e
 800b55a:	d012      	beq.n	800b582 <__gethex+0x1fa>
 800b55c:	2b20      	cmp	r3, #32
 800b55e:	d104      	bne.n	800b56a <__gethex+0x1e2>
 800b560:	f845 bb04 	str.w	fp, [r5], #4
 800b564:	f04f 0b00 	mov.w	fp, #0
 800b568:	465b      	mov	r3, fp
 800b56a:	7830      	ldrb	r0, [r6, #0]
 800b56c:	9303      	str	r3, [sp, #12]
 800b56e:	f7ff fef6 	bl	800b35e <__hexdig_fun>
 800b572:	9b03      	ldr	r3, [sp, #12]
 800b574:	f000 000f 	and.w	r0, r0, #15
 800b578:	4098      	lsls	r0, r3
 800b57a:	3304      	adds	r3, #4
 800b57c:	ea4b 0b00 	orr.w	fp, fp, r0
 800b580:	e7ae      	b.n	800b4e0 <__gethex+0x158>
 800b582:	45b1      	cmp	r9, r6
 800b584:	d8ea      	bhi.n	800b55c <__gethex+0x1d4>
 800b586:	2201      	movs	r2, #1
 800b588:	492a      	ldr	r1, [pc, #168]	@ (800b634 <__gethex+0x2ac>)
 800b58a:	4630      	mov	r0, r6
 800b58c:	9303      	str	r3, [sp, #12]
 800b58e:	f7ff fe2b 	bl	800b1e8 <strncmp>
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	2800      	cmp	r0, #0
 800b596:	d1e1      	bne.n	800b55c <__gethex+0x1d4>
 800b598:	e7a2      	b.n	800b4e0 <__gethex+0x158>
 800b59a:	1ea9      	subs	r1, r5, #2
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7fe fd5e 	bl	800a05e <__any_on>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d0c2      	beq.n	800b52c <__gethex+0x1a4>
 800b5a6:	f04f 0903 	mov.w	r9, #3
 800b5aa:	e7c1      	b.n	800b530 <__gethex+0x1a8>
 800b5ac:	da09      	bge.n	800b5c2 <__gethex+0x23a>
 800b5ae:	1b75      	subs	r5, r6, r5
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	9801      	ldr	r0, [sp, #4]
 800b5b4:	462a      	mov	r2, r5
 800b5b6:	1b7f      	subs	r7, r7, r5
 800b5b8:	f7fe fb10 	bl	8009bdc <__lshift>
 800b5bc:	4604      	mov	r4, r0
 800b5be:	f100 0a14 	add.w	sl, r0, #20
 800b5c2:	f04f 0900 	mov.w	r9, #0
 800b5c6:	e7b8      	b.n	800b53a <__gethex+0x1b2>
 800b5c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5cc:	42bd      	cmp	r5, r7
 800b5ce:	dd6f      	ble.n	800b6b0 <__gethex+0x328>
 800b5d0:	1bed      	subs	r5, r5, r7
 800b5d2:	42ae      	cmp	r6, r5
 800b5d4:	dc34      	bgt.n	800b640 <__gethex+0x2b8>
 800b5d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5da:	2b02      	cmp	r3, #2
 800b5dc:	d022      	beq.n	800b624 <__gethex+0x29c>
 800b5de:	2b03      	cmp	r3, #3
 800b5e0:	d024      	beq.n	800b62c <__gethex+0x2a4>
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d115      	bne.n	800b612 <__gethex+0x28a>
 800b5e6:	42ae      	cmp	r6, r5
 800b5e8:	d113      	bne.n	800b612 <__gethex+0x28a>
 800b5ea:	2e01      	cmp	r6, #1
 800b5ec:	d10b      	bne.n	800b606 <__gethex+0x27e>
 800b5ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5f2:	2562      	movs	r5, #98	@ 0x62
 800b5f4:	9a02      	ldr	r2, [sp, #8]
 800b5f6:	6013      	str	r3, [r2, #0]
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	6123      	str	r3, [r4, #16]
 800b5fc:	f8ca 3000 	str.w	r3, [sl]
 800b600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b602:	601c      	str	r4, [r3, #0]
 800b604:	e73a      	b.n	800b47c <__gethex+0xf4>
 800b606:	1e71      	subs	r1, r6, #1
 800b608:	4620      	mov	r0, r4
 800b60a:	f7fe fd28 	bl	800a05e <__any_on>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d1ed      	bne.n	800b5ee <__gethex+0x266>
 800b612:	4621      	mov	r1, r4
 800b614:	9801      	ldr	r0, [sp, #4]
 800b616:	f7fe f8c7 	bl	80097a8 <_Bfree>
 800b61a:	2300      	movs	r3, #0
 800b61c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b61e:	2550      	movs	r5, #80	@ 0x50
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	e72b      	b.n	800b47c <__gethex+0xf4>
 800b624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1f3      	bne.n	800b612 <__gethex+0x28a>
 800b62a:	e7e0      	b.n	800b5ee <__gethex+0x266>
 800b62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1dd      	bne.n	800b5ee <__gethex+0x266>
 800b632:	e7ee      	b.n	800b612 <__gethex+0x28a>
 800b634:	0800c290 	.word	0x0800c290
 800b638:	0800c129 	.word	0x0800c129
 800b63c:	0800c43e 	.word	0x0800c43e
 800b640:	1e6f      	subs	r7, r5, #1
 800b642:	f1b9 0f00 	cmp.w	r9, #0
 800b646:	d130      	bne.n	800b6aa <__gethex+0x322>
 800b648:	b127      	cbz	r7, 800b654 <__gethex+0x2cc>
 800b64a:	4639      	mov	r1, r7
 800b64c:	4620      	mov	r0, r4
 800b64e:	f7fe fd06 	bl	800a05e <__any_on>
 800b652:	4681      	mov	r9, r0
 800b654:	117a      	asrs	r2, r7, #5
 800b656:	2301      	movs	r3, #1
 800b658:	f007 071f 	and.w	r7, r7, #31
 800b65c:	4629      	mov	r1, r5
 800b65e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b662:	4620      	mov	r0, r4
 800b664:	40bb      	lsls	r3, r7
 800b666:	1b76      	subs	r6, r6, r5
 800b668:	2502      	movs	r5, #2
 800b66a:	4213      	tst	r3, r2
 800b66c:	bf18      	it	ne
 800b66e:	f049 0902 	orrne.w	r9, r9, #2
 800b672:	f7ff fe23 	bl	800b2bc <rshift>
 800b676:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b67a:	f1b9 0f00 	cmp.w	r9, #0
 800b67e:	d047      	beq.n	800b710 <__gethex+0x388>
 800b680:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d015      	beq.n	800b6b4 <__gethex+0x32c>
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d017      	beq.n	800b6bc <__gethex+0x334>
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d109      	bne.n	800b6a4 <__gethex+0x31c>
 800b690:	f019 0f02 	tst.w	r9, #2
 800b694:	d006      	beq.n	800b6a4 <__gethex+0x31c>
 800b696:	f8da 3000 	ldr.w	r3, [sl]
 800b69a:	ea49 0903 	orr.w	r9, r9, r3
 800b69e:	f019 0f01 	tst.w	r9, #1
 800b6a2:	d10e      	bne.n	800b6c2 <__gethex+0x33a>
 800b6a4:	f045 0510 	orr.w	r5, r5, #16
 800b6a8:	e032      	b.n	800b710 <__gethex+0x388>
 800b6aa:	f04f 0901 	mov.w	r9, #1
 800b6ae:	e7d1      	b.n	800b654 <__gethex+0x2cc>
 800b6b0:	2501      	movs	r5, #1
 800b6b2:	e7e2      	b.n	800b67a <__gethex+0x2f2>
 800b6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6b6:	f1c3 0301 	rsb	r3, r3, #1
 800b6ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0f0      	beq.n	800b6a4 <__gethex+0x31c>
 800b6c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b6c6:	f104 0314 	add.w	r3, r4, #20
 800b6ca:	f04f 0c00 	mov.w	ip, #0
 800b6ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b6d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b6e0:	d01b      	beq.n	800b71a <__gethex+0x392>
 800b6e2:	3201      	adds	r2, #1
 800b6e4:	6002      	str	r2, [r0, #0]
 800b6e6:	2d02      	cmp	r5, #2
 800b6e8:	f104 0314 	add.w	r3, r4, #20
 800b6ec:	d13c      	bne.n	800b768 <__gethex+0x3e0>
 800b6ee:	f8d8 2000 	ldr.w	r2, [r8]
 800b6f2:	3a01      	subs	r2, #1
 800b6f4:	42b2      	cmp	r2, r6
 800b6f6:	d109      	bne.n	800b70c <__gethex+0x384>
 800b6f8:	1171      	asrs	r1, r6, #5
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f006 061f 	and.w	r6, r6, #31
 800b700:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b704:	fa02 f606 	lsl.w	r6, r2, r6
 800b708:	421e      	tst	r6, r3
 800b70a:	d13a      	bne.n	800b782 <__gethex+0x3fa>
 800b70c:	f045 0520 	orr.w	r5, r5, #32
 800b710:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b712:	601c      	str	r4, [r3, #0]
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	601f      	str	r7, [r3, #0]
 800b718:	e6b0      	b.n	800b47c <__gethex+0xf4>
 800b71a:	4299      	cmp	r1, r3
 800b71c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b720:	d8d9      	bhi.n	800b6d6 <__gethex+0x34e>
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	459b      	cmp	fp, r3
 800b726:	db17      	blt.n	800b758 <__gethex+0x3d0>
 800b728:	6861      	ldr	r1, [r4, #4]
 800b72a:	9801      	ldr	r0, [sp, #4]
 800b72c:	3101      	adds	r1, #1
 800b72e:	f7fd fffb 	bl	8009728 <_Balloc>
 800b732:	4681      	mov	r9, r0
 800b734:	b918      	cbnz	r0, 800b73e <__gethex+0x3b6>
 800b736:	4b1a      	ldr	r3, [pc, #104]	@ (800b7a0 <__gethex+0x418>)
 800b738:	4602      	mov	r2, r0
 800b73a:	2184      	movs	r1, #132	@ 0x84
 800b73c:	e6c5      	b.n	800b4ca <__gethex+0x142>
 800b73e:	6922      	ldr	r2, [r4, #16]
 800b740:	f104 010c 	add.w	r1, r4, #12
 800b744:	300c      	adds	r0, #12
 800b746:	3202      	adds	r2, #2
 800b748:	0092      	lsls	r2, r2, #2
 800b74a:	f7ff fd6f 	bl	800b22c <memcpy>
 800b74e:	4621      	mov	r1, r4
 800b750:	464c      	mov	r4, r9
 800b752:	9801      	ldr	r0, [sp, #4]
 800b754:	f7fe f828 	bl	80097a8 <_Bfree>
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	1c5a      	adds	r2, r3, #1
 800b75c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b760:	6122      	str	r2, [r4, #16]
 800b762:	2201      	movs	r2, #1
 800b764:	615a      	str	r2, [r3, #20]
 800b766:	e7be      	b.n	800b6e6 <__gethex+0x35e>
 800b768:	6922      	ldr	r2, [r4, #16]
 800b76a:	455a      	cmp	r2, fp
 800b76c:	dd0b      	ble.n	800b786 <__gethex+0x3fe>
 800b76e:	2101      	movs	r1, #1
 800b770:	4620      	mov	r0, r4
 800b772:	f7ff fda3 	bl	800b2bc <rshift>
 800b776:	3701      	adds	r7, #1
 800b778:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b77c:	42bb      	cmp	r3, r7
 800b77e:	f6ff aee0 	blt.w	800b542 <__gethex+0x1ba>
 800b782:	2501      	movs	r5, #1
 800b784:	e7c2      	b.n	800b70c <__gethex+0x384>
 800b786:	f016 061f 	ands.w	r6, r6, #31
 800b78a:	d0fa      	beq.n	800b782 <__gethex+0x3fa>
 800b78c:	4453      	add	r3, sl
 800b78e:	f1c6 0620 	rsb	r6, r6, #32
 800b792:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b796:	f7fe f8bb 	bl	8009910 <__hi0bits>
 800b79a:	42b0      	cmp	r0, r6
 800b79c:	dbe7      	blt.n	800b76e <__gethex+0x3e6>
 800b79e:	e7f0      	b.n	800b782 <__gethex+0x3fa>
 800b7a0:	0800c129 	.word	0x0800c129

0800b7a4 <L_shift>:
 800b7a4:	f1c2 0208 	rsb	r2, r2, #8
 800b7a8:	0092      	lsls	r2, r2, #2
 800b7aa:	b570      	push	{r4, r5, r6, lr}
 800b7ac:	f1c2 0620 	rsb	r6, r2, #32
 800b7b0:	6843      	ldr	r3, [r0, #4]
 800b7b2:	6804      	ldr	r4, [r0, #0]
 800b7b4:	fa03 f506 	lsl.w	r5, r3, r6
 800b7b8:	40d3      	lsrs	r3, r2
 800b7ba:	432c      	orrs	r4, r5
 800b7bc:	6004      	str	r4, [r0, #0]
 800b7be:	f840 3f04 	str.w	r3, [r0, #4]!
 800b7c2:	4288      	cmp	r0, r1
 800b7c4:	d3f4      	bcc.n	800b7b0 <L_shift+0xc>
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}

0800b7c8 <__match>:
 800b7c8:	6803      	ldr	r3, [r0, #0]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	b530      	push	{r4, r5, lr}
 800b7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7d2:	b914      	cbnz	r4, 800b7da <__match+0x12>
 800b7d4:	6003      	str	r3, [r0, #0]
 800b7d6:	2001      	movs	r0, #1
 800b7d8:	bd30      	pop	{r4, r5, pc}
 800b7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b7e2:	2d19      	cmp	r5, #25
 800b7e4:	bf98      	it	ls
 800b7e6:	3220      	addls	r2, #32
 800b7e8:	42a2      	cmp	r2, r4
 800b7ea:	d0f0      	beq.n	800b7ce <__match+0x6>
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e7f3      	b.n	800b7d8 <__match+0x10>

0800b7f0 <__hexnan>:
 800b7f0:	680b      	ldr	r3, [r1, #0]
 800b7f2:	6801      	ldr	r1, [r0, #0]
 800b7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f8:	115e      	asrs	r6, r3, #5
 800b7fa:	f013 031f 	ands.w	r3, r3, #31
 800b7fe:	f04f 0500 	mov.w	r5, #0
 800b802:	b087      	sub	sp, #28
 800b804:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b808:	4682      	mov	sl, r0
 800b80a:	4690      	mov	r8, r2
 800b80c:	46ab      	mov	fp, r5
 800b80e:	bf18      	it	ne
 800b810:	3604      	addne	r6, #4
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	9502      	str	r5, [sp, #8]
 800b816:	1f37      	subs	r7, r6, #4
 800b818:	f846 5c04 	str.w	r5, [r6, #-4]
 800b81c:	46b9      	mov	r9, r7
 800b81e:	463c      	mov	r4, r7
 800b820:	1c4b      	adds	r3, r1, #1
 800b822:	784a      	ldrb	r2, [r1, #1]
 800b824:	9303      	str	r3, [sp, #12]
 800b826:	b342      	cbz	r2, 800b87a <__hexnan+0x8a>
 800b828:	4610      	mov	r0, r2
 800b82a:	9105      	str	r1, [sp, #20]
 800b82c:	9204      	str	r2, [sp, #16]
 800b82e:	f7ff fd96 	bl	800b35e <__hexdig_fun>
 800b832:	2800      	cmp	r0, #0
 800b834:	d151      	bne.n	800b8da <__hexnan+0xea>
 800b836:	9a04      	ldr	r2, [sp, #16]
 800b838:	9905      	ldr	r1, [sp, #20]
 800b83a:	2a20      	cmp	r2, #32
 800b83c:	d818      	bhi.n	800b870 <__hexnan+0x80>
 800b83e:	9b02      	ldr	r3, [sp, #8]
 800b840:	459b      	cmp	fp, r3
 800b842:	dd13      	ble.n	800b86c <__hexnan+0x7c>
 800b844:	454c      	cmp	r4, r9
 800b846:	d206      	bcs.n	800b856 <__hexnan+0x66>
 800b848:	2d07      	cmp	r5, #7
 800b84a:	dc04      	bgt.n	800b856 <__hexnan+0x66>
 800b84c:	462a      	mov	r2, r5
 800b84e:	4649      	mov	r1, r9
 800b850:	4620      	mov	r0, r4
 800b852:	f7ff ffa7 	bl	800b7a4 <L_shift>
 800b856:	4544      	cmp	r4, r8
 800b858:	d951      	bls.n	800b8fe <__hexnan+0x10e>
 800b85a:	2300      	movs	r3, #0
 800b85c:	f1a4 0904 	sub.w	r9, r4, #4
 800b860:	f8cd b008 	str.w	fp, [sp, #8]
 800b864:	f844 3c04 	str.w	r3, [r4, #-4]
 800b868:	461d      	mov	r5, r3
 800b86a:	464c      	mov	r4, r9
 800b86c:	9903      	ldr	r1, [sp, #12]
 800b86e:	e7d7      	b.n	800b820 <__hexnan+0x30>
 800b870:	2a29      	cmp	r2, #41	@ 0x29
 800b872:	d156      	bne.n	800b922 <__hexnan+0x132>
 800b874:	3102      	adds	r1, #2
 800b876:	f8ca 1000 	str.w	r1, [sl]
 800b87a:	f1bb 0f00 	cmp.w	fp, #0
 800b87e:	d050      	beq.n	800b922 <__hexnan+0x132>
 800b880:	454c      	cmp	r4, r9
 800b882:	d206      	bcs.n	800b892 <__hexnan+0xa2>
 800b884:	2d07      	cmp	r5, #7
 800b886:	dc04      	bgt.n	800b892 <__hexnan+0xa2>
 800b888:	462a      	mov	r2, r5
 800b88a:	4649      	mov	r1, r9
 800b88c:	4620      	mov	r0, r4
 800b88e:	f7ff ff89 	bl	800b7a4 <L_shift>
 800b892:	4544      	cmp	r4, r8
 800b894:	d935      	bls.n	800b902 <__hexnan+0x112>
 800b896:	f1a8 0204 	sub.w	r2, r8, #4
 800b89a:	4623      	mov	r3, r4
 800b89c:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8a0:	429f      	cmp	r7, r3
 800b8a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b8a6:	d2f9      	bcs.n	800b89c <__hexnan+0xac>
 800b8a8:	1b3b      	subs	r3, r7, r4
 800b8aa:	3e03      	subs	r6, #3
 800b8ac:	3401      	adds	r4, #1
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f023 0303 	bic.w	r3, r3, #3
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	42b4      	cmp	r4, r6
 800b8b8:	bf88      	it	hi
 800b8ba:	2304      	movhi	r3, #4
 800b8bc:	4443      	add	r3, r8
 800b8be:	f843 2b04 	str.w	r2, [r3], #4
 800b8c2:	429f      	cmp	r7, r3
 800b8c4:	d2fb      	bcs.n	800b8be <__hexnan+0xce>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	b91b      	cbnz	r3, 800b8d2 <__hexnan+0xe2>
 800b8ca:	4547      	cmp	r7, r8
 800b8cc:	d127      	bne.n	800b91e <__hexnan+0x12e>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	603b      	str	r3, [r7, #0]
 800b8d2:	2005      	movs	r0, #5
 800b8d4:	b007      	add	sp, #28
 800b8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8da:	3501      	adds	r5, #1
 800b8dc:	f10b 0b01 	add.w	fp, fp, #1
 800b8e0:	2d08      	cmp	r5, #8
 800b8e2:	dd05      	ble.n	800b8f0 <__hexnan+0x100>
 800b8e4:	4544      	cmp	r4, r8
 800b8e6:	d9c1      	bls.n	800b86c <__hexnan+0x7c>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	3c04      	subs	r4, #4
 800b8ec:	2501      	movs	r5, #1
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	6822      	ldr	r2, [r4, #0]
 800b8f2:	f000 000f 	and.w	r0, r0, #15
 800b8f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b8fa:	6020      	str	r0, [r4, #0]
 800b8fc:	e7b6      	b.n	800b86c <__hexnan+0x7c>
 800b8fe:	2508      	movs	r5, #8
 800b900:	e7b4      	b.n	800b86c <__hexnan+0x7c>
 800b902:	9b01      	ldr	r3, [sp, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d0de      	beq.n	800b8c6 <__hexnan+0xd6>
 800b908:	f1c3 0320 	rsb	r3, r3, #32
 800b90c:	f04f 32ff 	mov.w	r2, #4294967295
 800b910:	40da      	lsrs	r2, r3
 800b912:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b916:	4013      	ands	r3, r2
 800b918:	f846 3c04 	str.w	r3, [r6, #-4]
 800b91c:	e7d3      	b.n	800b8c6 <__hexnan+0xd6>
 800b91e:	3f04      	subs	r7, #4
 800b920:	e7d1      	b.n	800b8c6 <__hexnan+0xd6>
 800b922:	2004      	movs	r0, #4
 800b924:	e7d6      	b.n	800b8d4 <__hexnan+0xe4>

0800b926 <__ascii_mbtowc>:
 800b926:	b082      	sub	sp, #8
 800b928:	b901      	cbnz	r1, 800b92c <__ascii_mbtowc+0x6>
 800b92a:	a901      	add	r1, sp, #4
 800b92c:	b142      	cbz	r2, 800b940 <__ascii_mbtowc+0x1a>
 800b92e:	b14b      	cbz	r3, 800b944 <__ascii_mbtowc+0x1e>
 800b930:	7813      	ldrb	r3, [r2, #0]
 800b932:	600b      	str	r3, [r1, #0]
 800b934:	7812      	ldrb	r2, [r2, #0]
 800b936:	1e10      	subs	r0, r2, #0
 800b938:	bf18      	it	ne
 800b93a:	2001      	movne	r0, #1
 800b93c:	b002      	add	sp, #8
 800b93e:	4770      	bx	lr
 800b940:	4610      	mov	r0, r2
 800b942:	e7fb      	b.n	800b93c <__ascii_mbtowc+0x16>
 800b944:	f06f 0001 	mvn.w	r0, #1
 800b948:	e7f8      	b.n	800b93c <__ascii_mbtowc+0x16>

0800b94a <_realloc_r>:
 800b94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b94e:	4680      	mov	r8, r0
 800b950:	4615      	mov	r5, r2
 800b952:	460c      	mov	r4, r1
 800b954:	b921      	cbnz	r1, 800b960 <_realloc_r+0x16>
 800b956:	4611      	mov	r1, r2
 800b958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b95c:	f7fd be58 	b.w	8009610 <_malloc_r>
 800b960:	b92a      	cbnz	r2, 800b96e <_realloc_r+0x24>
 800b962:	f7fd fde1 	bl	8009528 <_free_r>
 800b966:	2400      	movs	r4, #0
 800b968:	4620      	mov	r0, r4
 800b96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b96e:	f000 f840 	bl	800b9f2 <_malloc_usable_size_r>
 800b972:	4285      	cmp	r5, r0
 800b974:	4606      	mov	r6, r0
 800b976:	d802      	bhi.n	800b97e <_realloc_r+0x34>
 800b978:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b97c:	d8f4      	bhi.n	800b968 <_realloc_r+0x1e>
 800b97e:	4629      	mov	r1, r5
 800b980:	4640      	mov	r0, r8
 800b982:	f7fd fe45 	bl	8009610 <_malloc_r>
 800b986:	4607      	mov	r7, r0
 800b988:	2800      	cmp	r0, #0
 800b98a:	d0ec      	beq.n	800b966 <_realloc_r+0x1c>
 800b98c:	42b5      	cmp	r5, r6
 800b98e:	462a      	mov	r2, r5
 800b990:	4621      	mov	r1, r4
 800b992:	bf28      	it	cs
 800b994:	4632      	movcs	r2, r6
 800b996:	f7ff fc49 	bl	800b22c <memcpy>
 800b99a:	4621      	mov	r1, r4
 800b99c:	4640      	mov	r0, r8
 800b99e:	463c      	mov	r4, r7
 800b9a0:	f7fd fdc2 	bl	8009528 <_free_r>
 800b9a4:	e7e0      	b.n	800b968 <_realloc_r+0x1e>

0800b9a6 <__ascii_wctomb>:
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	b141      	cbz	r1, 800b9be <__ascii_wctomb+0x18>
 800b9ac:	2aff      	cmp	r2, #255	@ 0xff
 800b9ae:	d904      	bls.n	800b9ba <__ascii_wctomb+0x14>
 800b9b0:	228a      	movs	r2, #138	@ 0x8a
 800b9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	4770      	bx	lr
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	700a      	strb	r2, [r1, #0]
 800b9be:	4770      	bx	lr

0800b9c0 <fiprintf>:
 800b9c0:	b40e      	push	{r1, r2, r3}
 800b9c2:	b503      	push	{r0, r1, lr}
 800b9c4:	ab03      	add	r3, sp, #12
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	4805      	ldr	r0, [pc, #20]	@ (800b9e0 <fiprintf+0x20>)
 800b9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ce:	6800      	ldr	r0, [r0, #0]
 800b9d0:	9301      	str	r3, [sp, #4]
 800b9d2:	f000 f83f 	bl	800ba54 <_vfiprintf_r>
 800b9d6:	b002      	add	sp, #8
 800b9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9dc:	b003      	add	sp, #12
 800b9de:	4770      	bx	lr
 800b9e0:	20000018 	.word	0x20000018

0800b9e4 <abort>:
 800b9e4:	2006      	movs	r0, #6
 800b9e6:	b508      	push	{r3, lr}
 800b9e8:	f000 fa08 	bl	800bdfc <raise>
 800b9ec:	2001      	movs	r0, #1
 800b9ee:	f7f5 fdcf 	bl	8001590 <_exit>

0800b9f2 <_malloc_usable_size_r>:
 800b9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9f6:	1f18      	subs	r0, r3, #4
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bfbc      	itt	lt
 800b9fc:	580b      	ldrlt	r3, [r1, r0]
 800b9fe:	18c0      	addlt	r0, r0, r3
 800ba00:	4770      	bx	lr

0800ba02 <__sfputc_r>:
 800ba02:	6893      	ldr	r3, [r2, #8]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	6093      	str	r3, [r2, #8]
 800ba0a:	b410      	push	{r4}
 800ba0c:	da08      	bge.n	800ba20 <__sfputc_r+0x1e>
 800ba0e:	6994      	ldr	r4, [r2, #24]
 800ba10:	42a3      	cmp	r3, r4
 800ba12:	db01      	blt.n	800ba18 <__sfputc_r+0x16>
 800ba14:	290a      	cmp	r1, #10
 800ba16:	d103      	bne.n	800ba20 <__sfputc_r+0x1e>
 800ba18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba1c:	f000 b932 	b.w	800bc84 <__swbuf_r>
 800ba20:	6813      	ldr	r3, [r2, #0]
 800ba22:	1c58      	adds	r0, r3, #1
 800ba24:	6010      	str	r0, [r2, #0]
 800ba26:	4608      	mov	r0, r1
 800ba28:	7019      	strb	r1, [r3, #0]
 800ba2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <__sfputs_r>:
 800ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba32:	4606      	mov	r6, r0
 800ba34:	460f      	mov	r7, r1
 800ba36:	4614      	mov	r4, r2
 800ba38:	18d5      	adds	r5, r2, r3
 800ba3a:	42ac      	cmp	r4, r5
 800ba3c:	d101      	bne.n	800ba42 <__sfputs_r+0x12>
 800ba3e:	2000      	movs	r0, #0
 800ba40:	e007      	b.n	800ba52 <__sfputs_r+0x22>
 800ba42:	463a      	mov	r2, r7
 800ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f7ff ffda 	bl	800ba02 <__sfputc_r>
 800ba4e:	1c43      	adds	r3, r0, #1
 800ba50:	d1f3      	bne.n	800ba3a <__sfputs_r+0xa>
 800ba52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba54 <_vfiprintf_r>:
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	460d      	mov	r5, r1
 800ba5a:	b09d      	sub	sp, #116	@ 0x74
 800ba5c:	4614      	mov	r4, r2
 800ba5e:	4698      	mov	r8, r3
 800ba60:	4606      	mov	r6, r0
 800ba62:	b118      	cbz	r0, 800ba6c <_vfiprintf_r+0x18>
 800ba64:	6a03      	ldr	r3, [r0, #32]
 800ba66:	b90b      	cbnz	r3, 800ba6c <_vfiprintf_r+0x18>
 800ba68:	f7fc fdaa 	bl	80085c0 <__sinit>
 800ba6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba6e:	07d9      	lsls	r1, r3, #31
 800ba70:	d405      	bmi.n	800ba7e <_vfiprintf_r+0x2a>
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	059a      	lsls	r2, r3, #22
 800ba76:	d402      	bmi.n	800ba7e <_vfiprintf_r+0x2a>
 800ba78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba7a:	f7fc feec 	bl	8008856 <__retarget_lock_acquire_recursive>
 800ba7e:	89ab      	ldrh	r3, [r5, #12]
 800ba80:	071b      	lsls	r3, r3, #28
 800ba82:	d501      	bpl.n	800ba88 <_vfiprintf_r+0x34>
 800ba84:	692b      	ldr	r3, [r5, #16]
 800ba86:	b99b      	cbnz	r3, 800bab0 <_vfiprintf_r+0x5c>
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f000 f938 	bl	800bd00 <__swsetup_r>
 800ba90:	b170      	cbz	r0, 800bab0 <_vfiprintf_r+0x5c>
 800ba92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba94:	07dc      	lsls	r4, r3, #31
 800ba96:	d504      	bpl.n	800baa2 <_vfiprintf_r+0x4e>
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	b01d      	add	sp, #116	@ 0x74
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	89ab      	ldrh	r3, [r5, #12]
 800baa4:	0598      	lsls	r0, r3, #22
 800baa6:	d4f7      	bmi.n	800ba98 <_vfiprintf_r+0x44>
 800baa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baaa:	f7fc fed5 	bl	8008858 <__retarget_lock_release_recursive>
 800baae:	e7f3      	b.n	800ba98 <_vfiprintf_r+0x44>
 800bab0:	2300      	movs	r3, #0
 800bab2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bab6:	f04f 0901 	mov.w	r9, #1
 800baba:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bc70 <_vfiprintf_r+0x21c>
 800babe:	9309      	str	r3, [sp, #36]	@ 0x24
 800bac0:	2320      	movs	r3, #32
 800bac2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bac6:	2330      	movs	r3, #48	@ 0x30
 800bac8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bacc:	4623      	mov	r3, r4
 800bace:	469a      	mov	sl, r3
 800bad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bad4:	b10a      	cbz	r2, 800bada <_vfiprintf_r+0x86>
 800bad6:	2a25      	cmp	r2, #37	@ 0x25
 800bad8:	d1f9      	bne.n	800bace <_vfiprintf_r+0x7a>
 800bada:	ebba 0b04 	subs.w	fp, sl, r4
 800bade:	d00b      	beq.n	800baf8 <_vfiprintf_r+0xa4>
 800bae0:	465b      	mov	r3, fp
 800bae2:	4622      	mov	r2, r4
 800bae4:	4629      	mov	r1, r5
 800bae6:	4630      	mov	r0, r6
 800bae8:	f7ff ffa2 	bl	800ba30 <__sfputs_r>
 800baec:	3001      	adds	r0, #1
 800baee:	f000 80a7 	beq.w	800bc40 <_vfiprintf_r+0x1ec>
 800baf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baf4:	445a      	add	r2, fp
 800baf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800baf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 809f 	beq.w	800bc40 <_vfiprintf_r+0x1ec>
 800bb02:	2300      	movs	r3, #0
 800bb04:	f04f 32ff 	mov.w	r2, #4294967295
 800bb08:	f10a 0a01 	add.w	sl, sl, #1
 800bb0c:	9304      	str	r3, [sp, #16]
 800bb0e:	9307      	str	r3, [sp, #28]
 800bb10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb14:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb1a:	4654      	mov	r4, sl
 800bb1c:	2205      	movs	r2, #5
 800bb1e:	4854      	ldr	r0, [pc, #336]	@ (800bc70 <_vfiprintf_r+0x21c>)
 800bb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb24:	f7fc fe99 	bl	800885a <memchr>
 800bb28:	9a04      	ldr	r2, [sp, #16]
 800bb2a:	b9d8      	cbnz	r0, 800bb64 <_vfiprintf_r+0x110>
 800bb2c:	06d1      	lsls	r1, r2, #27
 800bb2e:	bf44      	itt	mi
 800bb30:	2320      	movmi	r3, #32
 800bb32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb36:	0713      	lsls	r3, r2, #28
 800bb38:	bf44      	itt	mi
 800bb3a:	232b      	movmi	r3, #43	@ 0x2b
 800bb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb40:	f89a 3000 	ldrb.w	r3, [sl]
 800bb44:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb46:	d015      	beq.n	800bb74 <_vfiprintf_r+0x120>
 800bb48:	9a07      	ldr	r2, [sp, #28]
 800bb4a:	4654      	mov	r4, sl
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f04f 0c0a 	mov.w	ip, #10
 800bb52:	4621      	mov	r1, r4
 800bb54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb58:	3b30      	subs	r3, #48	@ 0x30
 800bb5a:	2b09      	cmp	r3, #9
 800bb5c:	d94b      	bls.n	800bbf6 <_vfiprintf_r+0x1a2>
 800bb5e:	b1b0      	cbz	r0, 800bb8e <_vfiprintf_r+0x13a>
 800bb60:	9207      	str	r2, [sp, #28]
 800bb62:	e014      	b.n	800bb8e <_vfiprintf_r+0x13a>
 800bb64:	eba0 0308 	sub.w	r3, r0, r8
 800bb68:	46a2      	mov	sl, r4
 800bb6a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	e7d2      	b.n	800bb1a <_vfiprintf_r+0xc6>
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	1d19      	adds	r1, r3, #4
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	9103      	str	r1, [sp, #12]
 800bb7e:	bfbb      	ittet	lt
 800bb80:	425b      	neglt	r3, r3
 800bb82:	f042 0202 	orrlt.w	r2, r2, #2
 800bb86:	9307      	strge	r3, [sp, #28]
 800bb88:	9307      	strlt	r3, [sp, #28]
 800bb8a:	bfb8      	it	lt
 800bb8c:	9204      	strlt	r2, [sp, #16]
 800bb8e:	7823      	ldrb	r3, [r4, #0]
 800bb90:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb92:	d10a      	bne.n	800bbaa <_vfiprintf_r+0x156>
 800bb94:	7863      	ldrb	r3, [r4, #1]
 800bb96:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb98:	d132      	bne.n	800bc00 <_vfiprintf_r+0x1ac>
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	3402      	adds	r4, #2
 800bb9e:	1d1a      	adds	r2, r3, #4
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bba6:	9203      	str	r2, [sp, #12]
 800bba8:	9305      	str	r3, [sp, #20]
 800bbaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc80 <_vfiprintf_r+0x22c>
 800bbae:	2203      	movs	r2, #3
 800bbb0:	7821      	ldrb	r1, [r4, #0]
 800bbb2:	4650      	mov	r0, sl
 800bbb4:	f7fc fe51 	bl	800885a <memchr>
 800bbb8:	b138      	cbz	r0, 800bbca <_vfiprintf_r+0x176>
 800bbba:	eba0 000a 	sub.w	r0, r0, sl
 800bbbe:	2240      	movs	r2, #64	@ 0x40
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	3401      	adds	r4, #1
 800bbc4:	4082      	lsls	r2, r0
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	9304      	str	r3, [sp, #16]
 800bbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbce:	2206      	movs	r2, #6
 800bbd0:	4828      	ldr	r0, [pc, #160]	@ (800bc74 <_vfiprintf_r+0x220>)
 800bbd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbd6:	f7fc fe40 	bl	800885a <memchr>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d03f      	beq.n	800bc5e <_vfiprintf_r+0x20a>
 800bbde:	4b26      	ldr	r3, [pc, #152]	@ (800bc78 <_vfiprintf_r+0x224>)
 800bbe0:	bb1b      	cbnz	r3, 800bc2a <_vfiprintf_r+0x1d6>
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	3307      	adds	r3, #7
 800bbe6:	f023 0307 	bic.w	r3, r3, #7
 800bbea:	3308      	adds	r3, #8
 800bbec:	9303      	str	r3, [sp, #12]
 800bbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf0:	443b      	add	r3, r7
 800bbf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbf4:	e76a      	b.n	800bacc <_vfiprintf_r+0x78>
 800bbf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	2001      	movs	r0, #1
 800bbfe:	e7a8      	b.n	800bb52 <_vfiprintf_r+0xfe>
 800bc00:	2300      	movs	r3, #0
 800bc02:	3401      	adds	r4, #1
 800bc04:	f04f 0c0a 	mov.w	ip, #10
 800bc08:	4619      	mov	r1, r3
 800bc0a:	9305      	str	r3, [sp, #20]
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc12:	3a30      	subs	r2, #48	@ 0x30
 800bc14:	2a09      	cmp	r2, #9
 800bc16:	d903      	bls.n	800bc20 <_vfiprintf_r+0x1cc>
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d0c6      	beq.n	800bbaa <_vfiprintf_r+0x156>
 800bc1c:	9105      	str	r1, [sp, #20]
 800bc1e:	e7c4      	b.n	800bbaa <_vfiprintf_r+0x156>
 800bc20:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc24:	4604      	mov	r4, r0
 800bc26:	2301      	movs	r3, #1
 800bc28:	e7f0      	b.n	800bc0c <_vfiprintf_r+0x1b8>
 800bc2a:	ab03      	add	r3, sp, #12
 800bc2c:	462a      	mov	r2, r5
 800bc2e:	a904      	add	r1, sp, #16
 800bc30:	4630      	mov	r0, r6
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	4b11      	ldr	r3, [pc, #68]	@ (800bc7c <_vfiprintf_r+0x228>)
 800bc36:	f7fb fe69 	bl	800790c <_printf_float>
 800bc3a:	4607      	mov	r7, r0
 800bc3c:	1c78      	adds	r0, r7, #1
 800bc3e:	d1d6      	bne.n	800bbee <_vfiprintf_r+0x19a>
 800bc40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc42:	07d9      	lsls	r1, r3, #31
 800bc44:	d405      	bmi.n	800bc52 <_vfiprintf_r+0x1fe>
 800bc46:	89ab      	ldrh	r3, [r5, #12]
 800bc48:	059a      	lsls	r2, r3, #22
 800bc4a:	d402      	bmi.n	800bc52 <_vfiprintf_r+0x1fe>
 800bc4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc4e:	f7fc fe03 	bl	8008858 <__retarget_lock_release_recursive>
 800bc52:	89ab      	ldrh	r3, [r5, #12]
 800bc54:	065b      	lsls	r3, r3, #25
 800bc56:	f53f af1f 	bmi.w	800ba98 <_vfiprintf_r+0x44>
 800bc5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc5c:	e71e      	b.n	800ba9c <_vfiprintf_r+0x48>
 800bc5e:	ab03      	add	r3, sp, #12
 800bc60:	462a      	mov	r2, r5
 800bc62:	a904      	add	r1, sp, #16
 800bc64:	4630      	mov	r0, r6
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	4b04      	ldr	r3, [pc, #16]	@ (800bc7c <_vfiprintf_r+0x228>)
 800bc6a:	f7fc f8eb 	bl	8007e44 <_printf_i>
 800bc6e:	e7e4      	b.n	800bc3a <_vfiprintf_r+0x1e6>
 800bc70:	0800c3e9 	.word	0x0800c3e9
 800bc74:	0800c3f3 	.word	0x0800c3f3
 800bc78:	0800790d 	.word	0x0800790d
 800bc7c:	0800ba31 	.word	0x0800ba31
 800bc80:	0800c3ef 	.word	0x0800c3ef

0800bc84 <__swbuf_r>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	460e      	mov	r6, r1
 800bc88:	4614      	mov	r4, r2
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	b118      	cbz	r0, 800bc96 <__swbuf_r+0x12>
 800bc8e:	6a03      	ldr	r3, [r0, #32]
 800bc90:	b90b      	cbnz	r3, 800bc96 <__swbuf_r+0x12>
 800bc92:	f7fc fc95 	bl	80085c0 <__sinit>
 800bc96:	69a3      	ldr	r3, [r4, #24]
 800bc98:	60a3      	str	r3, [r4, #8]
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	071a      	lsls	r2, r3, #28
 800bc9e:	d501      	bpl.n	800bca4 <__swbuf_r+0x20>
 800bca0:	6923      	ldr	r3, [r4, #16]
 800bca2:	b943      	cbnz	r3, 800bcb6 <__swbuf_r+0x32>
 800bca4:	4621      	mov	r1, r4
 800bca6:	4628      	mov	r0, r5
 800bca8:	f000 f82a 	bl	800bd00 <__swsetup_r>
 800bcac:	b118      	cbz	r0, 800bcb6 <__swbuf_r+0x32>
 800bcae:	f04f 37ff 	mov.w	r7, #4294967295
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	b2f6      	uxtb	r6, r6
 800bcba:	6922      	ldr	r2, [r4, #16]
 800bcbc:	4637      	mov	r7, r6
 800bcbe:	1a98      	subs	r0, r3, r2
 800bcc0:	6963      	ldr	r3, [r4, #20]
 800bcc2:	4283      	cmp	r3, r0
 800bcc4:	dc05      	bgt.n	800bcd2 <__swbuf_r+0x4e>
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f7ff fa4b 	bl	800b164 <_fflush_r>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d1ed      	bne.n	800bcae <__swbuf_r+0x2a>
 800bcd2:	68a3      	ldr	r3, [r4, #8]
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	60a3      	str	r3, [r4, #8]
 800bcd8:	6823      	ldr	r3, [r4, #0]
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	6022      	str	r2, [r4, #0]
 800bcde:	701e      	strb	r6, [r3, #0]
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	6962      	ldr	r2, [r4, #20]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d004      	beq.n	800bcf2 <__swbuf_r+0x6e>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	07db      	lsls	r3, r3, #31
 800bcec:	d5e1      	bpl.n	800bcb2 <__swbuf_r+0x2e>
 800bcee:	2e0a      	cmp	r6, #10
 800bcf0:	d1df      	bne.n	800bcb2 <__swbuf_r+0x2e>
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	f7ff fa35 	bl	800b164 <_fflush_r>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d0d9      	beq.n	800bcb2 <__swbuf_r+0x2e>
 800bcfe:	e7d6      	b.n	800bcae <__swbuf_r+0x2a>

0800bd00 <__swsetup_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	4b29      	ldr	r3, [pc, #164]	@ (800bda8 <__swsetup_r+0xa8>)
 800bd04:	4605      	mov	r5, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	6818      	ldr	r0, [r3, #0]
 800bd0a:	b118      	cbz	r0, 800bd14 <__swsetup_r+0x14>
 800bd0c:	6a03      	ldr	r3, [r0, #32]
 800bd0e:	b90b      	cbnz	r3, 800bd14 <__swsetup_r+0x14>
 800bd10:	f7fc fc56 	bl	80085c0 <__sinit>
 800bd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd18:	0719      	lsls	r1, r3, #28
 800bd1a:	d422      	bmi.n	800bd62 <__swsetup_r+0x62>
 800bd1c:	06da      	lsls	r2, r3, #27
 800bd1e:	d407      	bmi.n	800bd30 <__swsetup_r+0x30>
 800bd20:	2209      	movs	r2, #9
 800bd22:	602a      	str	r2, [r5, #0]
 800bd24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	81a3      	strh	r3, [r4, #12]
 800bd2e:	e033      	b.n	800bd98 <__swsetup_r+0x98>
 800bd30:	0758      	lsls	r0, r3, #29
 800bd32:	d512      	bpl.n	800bd5a <__swsetup_r+0x5a>
 800bd34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd36:	b141      	cbz	r1, 800bd4a <__swsetup_r+0x4a>
 800bd38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd3c:	4299      	cmp	r1, r3
 800bd3e:	d002      	beq.n	800bd46 <__swsetup_r+0x46>
 800bd40:	4628      	mov	r0, r5
 800bd42:	f7fd fbf1 	bl	8009528 <_free_r>
 800bd46:	2300      	movs	r3, #0
 800bd48:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	2300      	movs	r3, #0
 800bd54:	6063      	str	r3, [r4, #4]
 800bd56:	6923      	ldr	r3, [r4, #16]
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	f043 0308 	orr.w	r3, r3, #8
 800bd60:	81a3      	strh	r3, [r4, #12]
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	b94b      	cbnz	r3, 800bd7a <__swsetup_r+0x7a>
 800bd66:	89a3      	ldrh	r3, [r4, #12]
 800bd68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd70:	d003      	beq.n	800bd7a <__swsetup_r+0x7a>
 800bd72:	4621      	mov	r1, r4
 800bd74:	4628      	mov	r0, r5
 800bd76:	f000 f882 	bl	800be7e <__smakebuf_r>
 800bd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7e:	f013 0201 	ands.w	r2, r3, #1
 800bd82:	d00a      	beq.n	800bd9a <__swsetup_r+0x9a>
 800bd84:	2200      	movs	r2, #0
 800bd86:	60a2      	str	r2, [r4, #8]
 800bd88:	6962      	ldr	r2, [r4, #20]
 800bd8a:	4252      	negs	r2, r2
 800bd8c:	61a2      	str	r2, [r4, #24]
 800bd8e:	6922      	ldr	r2, [r4, #16]
 800bd90:	b942      	cbnz	r2, 800bda4 <__swsetup_r+0xa4>
 800bd92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd96:	d1c5      	bne.n	800bd24 <__swsetup_r+0x24>
 800bd98:	bd38      	pop	{r3, r4, r5, pc}
 800bd9a:	0799      	lsls	r1, r3, #30
 800bd9c:	bf58      	it	pl
 800bd9e:	6962      	ldrpl	r2, [r4, #20]
 800bda0:	60a2      	str	r2, [r4, #8]
 800bda2:	e7f4      	b.n	800bd8e <__swsetup_r+0x8e>
 800bda4:	2000      	movs	r0, #0
 800bda6:	e7f7      	b.n	800bd98 <__swsetup_r+0x98>
 800bda8:	20000018 	.word	0x20000018

0800bdac <_raise_r>:
 800bdac:	291f      	cmp	r1, #31
 800bdae:	b538      	push	{r3, r4, r5, lr}
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	d904      	bls.n	800bdc0 <_raise_r+0x14>
 800bdb6:	2316      	movs	r3, #22
 800bdb8:	6003      	str	r3, [r0, #0]
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bdc2:	b112      	cbz	r2, 800bdca <_raise_r+0x1e>
 800bdc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdc8:	b94b      	cbnz	r3, 800bdde <_raise_r+0x32>
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f000 f830 	bl	800be30 <_getpid_r>
 800bdd0:	4622      	mov	r2, r4
 800bdd2:	4601      	mov	r1, r0
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdda:	f000 b817 	b.w	800be0c <_kill_r>
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d00a      	beq.n	800bdf8 <_raise_r+0x4c>
 800bde2:	1c59      	adds	r1, r3, #1
 800bde4:	d103      	bne.n	800bdee <_raise_r+0x42>
 800bde6:	2316      	movs	r3, #22
 800bde8:	6003      	str	r3, [r0, #0]
 800bdea:	2001      	movs	r0, #1
 800bdec:	e7e7      	b.n	800bdbe <_raise_r+0x12>
 800bdee:	2100      	movs	r1, #0
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bdf6:	4798      	blx	r3
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	e7e0      	b.n	800bdbe <_raise_r+0x12>

0800bdfc <raise>:
 800bdfc:	4b02      	ldr	r3, [pc, #8]	@ (800be08 <raise+0xc>)
 800bdfe:	4601      	mov	r1, r0
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	f7ff bfd3 	b.w	800bdac <_raise_r>
 800be06:	bf00      	nop
 800be08:	20000018 	.word	0x20000018

0800be0c <_kill_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	2300      	movs	r3, #0
 800be10:	4d06      	ldr	r5, [pc, #24]	@ (800be2c <_kill_r+0x20>)
 800be12:	4604      	mov	r4, r0
 800be14:	4608      	mov	r0, r1
 800be16:	4611      	mov	r1, r2
 800be18:	602b      	str	r3, [r5, #0]
 800be1a:	f7f5 fba9 	bl	8001570 <_kill>
 800be1e:	1c43      	adds	r3, r0, #1
 800be20:	d102      	bne.n	800be28 <_kill_r+0x1c>
 800be22:	682b      	ldr	r3, [r5, #0]
 800be24:	b103      	cbz	r3, 800be28 <_kill_r+0x1c>
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	bd38      	pop	{r3, r4, r5, pc}
 800be2a:	bf00      	nop
 800be2c:	20000454 	.word	0x20000454

0800be30 <_getpid_r>:
 800be30:	f7f5 bb96 	b.w	8001560 <_getpid>

0800be34 <__swhatbuf_r>:
 800be34:	b570      	push	{r4, r5, r6, lr}
 800be36:	460c      	mov	r4, r1
 800be38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be3c:	b096      	sub	sp, #88	@ 0x58
 800be3e:	4615      	mov	r5, r2
 800be40:	2900      	cmp	r1, #0
 800be42:	461e      	mov	r6, r3
 800be44:	da0c      	bge.n	800be60 <__swhatbuf_r+0x2c>
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	2100      	movs	r1, #0
 800be4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be4e:	bf14      	ite	ne
 800be50:	2340      	movne	r3, #64	@ 0x40
 800be52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be56:	2000      	movs	r0, #0
 800be58:	6031      	str	r1, [r6, #0]
 800be5a:	602b      	str	r3, [r5, #0]
 800be5c:	b016      	add	sp, #88	@ 0x58
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	466a      	mov	r2, sp
 800be62:	f000 f849 	bl	800bef8 <_fstat_r>
 800be66:	2800      	cmp	r0, #0
 800be68:	dbed      	blt.n	800be46 <__swhatbuf_r+0x12>
 800be6a:	9901      	ldr	r1, [sp, #4]
 800be6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be74:	4259      	negs	r1, r3
 800be76:	4159      	adcs	r1, r3
 800be78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be7c:	e7eb      	b.n	800be56 <__swhatbuf_r+0x22>

0800be7e <__smakebuf_r>:
 800be7e:	898b      	ldrh	r3, [r1, #12]
 800be80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be82:	079d      	lsls	r5, r3, #30
 800be84:	4606      	mov	r6, r0
 800be86:	460c      	mov	r4, r1
 800be88:	d507      	bpl.n	800be9a <__smakebuf_r+0x1c>
 800be8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be8e:	6023      	str	r3, [r4, #0]
 800be90:	6123      	str	r3, [r4, #16]
 800be92:	2301      	movs	r3, #1
 800be94:	6163      	str	r3, [r4, #20]
 800be96:	b003      	add	sp, #12
 800be98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be9a:	ab01      	add	r3, sp, #4
 800be9c:	466a      	mov	r2, sp
 800be9e:	f7ff ffc9 	bl	800be34 <__swhatbuf_r>
 800bea2:	9f00      	ldr	r7, [sp, #0]
 800bea4:	4605      	mov	r5, r0
 800bea6:	4630      	mov	r0, r6
 800bea8:	4639      	mov	r1, r7
 800beaa:	f7fd fbb1 	bl	8009610 <_malloc_r>
 800beae:	b948      	cbnz	r0, 800bec4 <__smakebuf_r+0x46>
 800beb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb4:	059a      	lsls	r2, r3, #22
 800beb6:	d4ee      	bmi.n	800be96 <__smakebuf_r+0x18>
 800beb8:	f023 0303 	bic.w	r3, r3, #3
 800bebc:	f043 0302 	orr.w	r3, r3, #2
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	e7e2      	b.n	800be8a <__smakebuf_r+0xc>
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	6020      	str	r0, [r4, #0]
 800bec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800becc:	81a3      	strh	r3, [r4, #12]
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bed4:	b15b      	cbz	r3, 800beee <__smakebuf_r+0x70>
 800bed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beda:	4630      	mov	r0, r6
 800bedc:	f000 f81e 	bl	800bf1c <_isatty_r>
 800bee0:	b128      	cbz	r0, 800beee <__smakebuf_r+0x70>
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	f023 0303 	bic.w	r3, r3, #3
 800bee8:	f043 0301 	orr.w	r3, r3, #1
 800beec:	81a3      	strh	r3, [r4, #12]
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	431d      	orrs	r5, r3
 800bef2:	81a5      	strh	r5, [r4, #12]
 800bef4:	e7cf      	b.n	800be96 <__smakebuf_r+0x18>
	...

0800bef8 <_fstat_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	2300      	movs	r3, #0
 800befc:	4d06      	ldr	r5, [pc, #24]	@ (800bf18 <_fstat_r+0x20>)
 800befe:	4604      	mov	r4, r0
 800bf00:	4608      	mov	r0, r1
 800bf02:	4611      	mov	r1, r2
 800bf04:	602b      	str	r3, [r5, #0]
 800bf06:	f7f5 fb93 	bl	8001630 <_fstat>
 800bf0a:	1c43      	adds	r3, r0, #1
 800bf0c:	d102      	bne.n	800bf14 <_fstat_r+0x1c>
 800bf0e:	682b      	ldr	r3, [r5, #0]
 800bf10:	b103      	cbz	r3, 800bf14 <_fstat_r+0x1c>
 800bf12:	6023      	str	r3, [r4, #0]
 800bf14:	bd38      	pop	{r3, r4, r5, pc}
 800bf16:	bf00      	nop
 800bf18:	20000454 	.word	0x20000454

0800bf1c <_isatty_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4d05      	ldr	r5, [pc, #20]	@ (800bf38 <_isatty_r+0x1c>)
 800bf22:	4604      	mov	r4, r0
 800bf24:	4608      	mov	r0, r1
 800bf26:	602b      	str	r3, [r5, #0]
 800bf28:	f7f5 fb92 	bl	8001650 <_isatty>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_isatty_r+0x1a>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_isatty_r+0x1a>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	20000454 	.word	0x20000454

0800bf3c <_init>:
 800bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3e:	bf00      	nop
 800bf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf42:	bc08      	pop	{r3}
 800bf44:	469e      	mov	lr, r3
 800bf46:	4770      	bx	lr

0800bf48 <_fini>:
 800bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4a:	bf00      	nop
 800bf4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf4e:	bc08      	pop	{r3}
 800bf50:	469e      	mov	lr, r3
 800bf52:	4770      	bx	lr
